{"file_contents":{"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/examples/TileView.tsx":{"content":"import TileView from '../TileView';\n\nexport default function TileViewExample() {\n  return (\n    <div className=\"h-screen relative\">\n      <TileView onAppClick={(id) => console.log('Tile clicked:', id)} />\n    </div>\n  );\n}\n","size_bytes":223},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { startBackgroundJobs } from \"./background-jobs\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session middleware\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'harmony-secret-key-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    httpOnly: true,\n    secure: process.env.NODE_ENV === 'production',\n    maxAge: 1000 * 60 * 60 * 24 * 7 // 7 days\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n    \n    // Start background jobs for auto-calculation\n    startBackgroundJobs();\n  });\n})();\n","size_bytes":2551},"client/src/components/apps/SettingsWindow.tsx":{"content":"export default function SettingsWindow() {\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold text-foreground\">Settings</h2>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <h3 className=\"text-sm font-medium text-foreground mb-3\">Appearance</h3>\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center justify-between p-3 rounded-lg border border-border bg-card hover-elevate\">\n              <span className=\"text-sm text-foreground\">Dark Mode</span>\n              <input type=\"checkbox\" data-testid=\"checkbox-dark-mode\" className=\"rounded\" />\n            </label>\n            <label className=\"flex items-center justify-between p-3 rounded-lg border border-border bg-card hover-elevate\">\n              <span className=\"text-sm text-foreground\">Show Desktop Icons</span>\n              <input type=\"checkbox\" data-testid=\"checkbox-show-icons\" defaultChecked className=\"rounded\" />\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"text-sm font-medium text-foreground mb-3\">Notifications</h3>\n          <div className=\"space-y-2\">\n            <label className=\"flex items-center justify-between p-3 rounded-lg border border-border bg-card hover-elevate\">\n              <span className=\"text-sm text-foreground\">Prayer Reminders</span>\n              <input type=\"checkbox\" data-testid=\"checkbox-prayer-reminders\" defaultChecked className=\"rounded\" />\n            </label>\n            <label className=\"flex items-center justify-between p-3 rounded-lg border border-border bg-card hover-elevate\">\n              <span className=\"text-sm text-foreground\">Daily Devotionals</span>\n              <input type=\"checkbox\" data-testid=\"checkbox-daily-devotionals\" defaultChecked className=\"rounded\" />\n            </label>\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"text-sm font-medium text-foreground mb-3\">Bible Translation</h3>\n          <select \n            className=\"w-full p-3 rounded-lg border border-input bg-background text-foreground focus:ring-2 focus:ring-ring\"\n            data-testid=\"select-bible-translation\"\n          >\n            <option>NIV - New International Version</option>\n            <option>KJV - King James Version</option>\n            <option>ESV - English Standard Version</option>\n            <option>NKJV - New King James Version</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2480},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/apps/SongsWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Play, Loader2, RefreshCw, ExternalLink, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Song {\n  id: string;\n  userId: string;\n  title: string;\n  artist: string;\n  youtubeId: string;\n  createdAt: string;\n}\n\nexport default function SongsWindow() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data: songsData, isLoading, error } = useQuery<{ data: Song[] }>({\n    queryKey: ['/api/songs']\n  });\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load songs</p>\n          <p className=\"text-sm text-muted-foreground\">{String(error)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/songs/generate');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/songs'] });\n      toast({ title: 'Songs updated!', description: 'New worship songs recommended.' });\n    }\n  });\n\n  const listenMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('POST', `/api/songs/${id}/listen`);\n      return res.json();\n    }\n  });\n\n  const handlePlay = (song: Song) => {\n    listenMutation.mutate(song.id);\n    window.open(`https://www.youtube.com/watch?v=${song.youtubeId}`, '_blank');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const songs = songsData?.data || [];\n\n  // Filter songs by search query (title or artist)\n  const filteredSongs = songs.filter(song => \n    !searchQuery || \n    song.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    song.artist.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Worship Songs</h2>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-generate-songs\"\n        >\n          {generateMutation.isPending ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n          )}\n          Refresh\n        </Button>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search songs or artists...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-songs\"\n        />\n      </div>\n\n      <div className=\"flex-1 overflow-auto space-y-2\">\n        {songs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">No songs yet</p>\n            <Button onClick={() => generateMutation.mutate()} data-testid=\"button-get-songs\">\n              Get Worship Songs\n            </Button>\n          </div>\n        ) : filteredSongs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No songs match your search</p>\n          </div>\n        ) : (\n          filteredSongs.map(song => (\n            <div\n              key={song.id}\n              className=\"flex items-center gap-3 p-3 rounded-lg border border-border bg-card hover-elevate\"\n              data-testid={`song-item-${song.id}`}\n            >\n              <div className=\"flex-1 min-w-0\">\n                <h3 className=\"font-medium text-foreground text-sm truncate\">{song.title}</h3>\n                <p className=\"text-xs text-muted-foreground truncate\">{song.artist}</p>\n              </div>\n              <Button\n                size=\"icon\"\n                onClick={() => handlePlay(song)}\n                data-testid={`button-play-${song.id}`}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4727},"server/routes.ts":{"content":"import { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { db } from './db';\nimport { \n  users, moods, prayerJournals, devotionals, bibleVerses, syncNotes,\n  spiritualGuides, conversations, messages, prayerChains, prayerChainComments,\n  videos, songs, sermons, resources, flourishingScores,\n  faithCircles, faithCircleMembers, faithCirclePosts,\n  financialTransactions, generosityCommitments, financialGoals, \n  stewardshipReflections, budgetCategories,\n  insertFaithCircleSchema, insertFaithCirclePostSchema,\n  insertFinancialTransactionSchema, insertGenerosityCommitmentSchema,\n  insertFinancialGoalSchema, insertStewardshipReflectionSchema, insertBudgetCategorySchema\n} from '@shared/schema';\nimport { eq, desc, and, or, ilike, sql } from 'drizzle-orm';\nimport './auth'; // Import session type declarations\nimport { hashPassword, verifyPassword, requireAuth } from './auth';\nimport { createEvent } from './events';\nimport { \n  runBibleVerseEngine, runDevotionalEngine, runVideoEngine,\n  runSongEngine, runSermonEngine, runResourceEngine, runFlourishingEngine\n} from './personalization';\nimport OpenAI from 'openai';\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // ============ AUTHENTICATION ============\n  \n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { email, password, name } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({\n          success: false,\n          error: { code: 'INVALID_INPUT', message: 'Email and password required' }\n        });\n      }\n\n      const existing = await db.select().from(users).where(eq(users.email, email)).limit(1);\n      if (existing.length > 0) {\n        return res.status(400).json({\n          success: false,\n          error: { code: 'USER_EXISTS', message: 'Email already registered' }\n        });\n      }\n\n      const hashedPassword = await hashPassword(password);\n      const user = await db.insert(users).values({\n        email,\n        password: hashedPassword,\n        name: name || null\n      }).returning();\n\n      req.session.userId = user[0].id;\n      \n      res.json({\n        success: true,\n        data: { id: user[0].id, email: user[0].email, name: user[0].name }\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({\n        success: false,\n        error: { code: 'DATABASE_ERROR', message: 'Registration failed' }\n      });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await db.select().from(users).where(eq(users.email, email)).limit(1);\n      if (user.length === 0) {\n        return res.status(401).json({\n          success: false,\n          error: { code: 'INVALID_CREDENTIALS', message: 'Invalid email or password' }\n        });\n      }\n\n      const valid = await verifyPassword(password, user[0].password);\n      if (!valid) {\n        return res.status(401).json({\n          success: false,\n          error: { code: 'INVALID_CREDENTIALS', message: 'Invalid email or password' }\n        });\n      }\n\n      req.session.userId = user[0].id;\n      \n      res.json({\n        success: true,\n        data: { id: user[0].id, email: user[0].email, name: user[0].name }\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({\n        success: false,\n        error: { code: 'DATABASE_ERROR', message: 'Login failed' }\n      });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n\n  app.get('/api/auth/me', requireAuth, async (req, res) => {\n    res.json({\n      success: true,\n      data: req.user\n    });\n  });\n\n  // ============ MOODS ============\n  \n  app.get('/api/moods', requireAuth, async (req, res) => {\n    try {\n      const userMoods = await db.select().from(moods)\n        .where(eq(moods.userId, req.user!.id))\n        .orderBy(desc(moods.createdAt));\n      \n      res.json({ success: true, data: userMoods });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch moods' } });\n    }\n  });\n\n  app.post('/api/moods', requireAuth, async (req, res) => {\n    try {\n      const { moodType, notes } = req.body;\n      \n      const mood = await db.insert(moods).values({\n        userId: req.user!.id,\n        moodType,\n        notes\n      }).returning();\n\n      await createEvent(req.user!.id, 'mood', { mood_type: moodType, notes });\n      \n      res.json({ success: true, data: mood[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create mood' } });\n    }\n  });\n\n  // ============ PRAYER JOURNALS ============\n  \n  app.get('/api/prayers', requireAuth, async (req, res) => {\n    try {\n      const prayers = await db.select().from(prayerJournals)\n        .where(eq(prayerJournals.userId, req.user!.id))\n        .orderBy(desc(prayerJournals.createdAt));\n      \n      res.json({ success: true, data: prayers });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch prayers' } });\n    }\n  });\n\n  app.post('/api/prayers', requireAuth, async (req, res) => {\n    try {\n      const { content } = req.body;\n      \n      const prayer = await db.insert(prayerJournals).values({\n        userId: req.user!.id,\n        content\n      }).returning();\n\n      await createEvent(req.user!.id, 'prayer', { content, is_answered: false });\n      \n      res.json({ success: true, data: prayer[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create prayer' } });\n    }\n  });\n\n  app.patch('/api/prayers/:id/answer', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isAnswered } = req.body;\n      \n      const prayer = await db.update(prayerJournals)\n        .set({ \n          isAnswered,\n          answeredAt: isAnswered ? new Date() : null\n        })\n        .where(and(\n          eq(prayerJournals.id, id),\n          eq(prayerJournals.userId, req.user!.id)\n        ))\n        .returning();\n      \n      // Track prayer answered event with details\n      if (isAnswered && prayer[0]) {\n        await createEvent(req.user!.id, 'prayer', { \n          content: prayer[0].content,\n          is_answered: true,\n          action: 'answered'\n        });\n      }\n      \n      res.json({ success: true, data: prayer[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to update prayer' } });\n    }\n  });\n\n  app.delete('/api/prayers/:id', requireAuth, async (req, res) => {\n    try {\n      await db.delete(prayerJournals).where(and(\n        eq(prayerJournals.id, req.params.id),\n        eq(prayerJournals.userId, req.user!.id)\n      ));\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to delete prayer' } });\n    }\n  });\n\n  // ============ BIBLE VERSES ============\n  \n  app.get('/api/bible-verses', requireAuth, async (req, res) => {\n    try {\n      const verses = await db.select().from(bibleVerses)\n        .where(eq(bibleVerses.userId, req.user!.id))\n        .orderBy(desc(bibleVerses.createdAt))\n        .limit(10);\n      \n      res.json({ success: true, data: verses });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch verses' } });\n    }\n  });\n\n  app.post('/api/bible-verses/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runBibleVerseEngine(req.user!.id);\n      await createEvent(req.user!.id, 'bible_read', { \n        book: result.verse.book, \n        chapter: result.verse.chapter, \n        verses: `${result.verse.verseStart}-${result.verse.verseEnd}` \n      }, true); // immediate = true for user-triggered actions\n      res.json(result);\n    } catch (error) {\n      console.error('Bible verse generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to generate verse' } });\n    }\n  });\n\n  app.get('/api/bible-verses/search', requireAuth, async (req, res) => {\n    try {\n      const query = req.query.query as string;\n      if (!query) {\n        return res.status(400).json({ success: false, error: { code: 'INVALID_QUERY', message: 'Query parameter required' } });\n      }\n\n      // Use LLM to fetch the verse text\n      const { llmClient } = await import('./llm-client');\n      \n      const prompt = `Return the Bible verse for: ${query}\n\nIMPORTANT: Return ONLY a JSON object with this exact structure:\n{\n  \"reference\": \"Book Chapter:Verse\",\n  \"text\": \"The actual verse text\",\n  \"translation\": \"Translation version\"\n}\n\nExample response for \"John 3:16 NIV\":\n{\n  \"reference\": \"John 3:16\",\n  \"text\": \"For God so loved the world that he gave his one and only Son, that whoever believes in him shall not perish but have eternal life.\",\n  \"translation\": \"NIV\"\n}\n\nReturn the verse in the requested translation. If no translation specified, use NIV.`;\n\n      const llmResponse = await llmClient.chatCompletion({\n        messages: [{ role: 'user', content: prompt }],\n        temperature: 0.3,\n        maxTokens: 800\n      });\n      \n      // Robust JSON parsing with validation\n      let verseData;\n      try {\n        verseData = JSON.parse(llmResponse.content);\n        \n        // Validate required fields\n        if (!verseData || typeof verseData !== 'object') {\n          throw new Error('Invalid response structure');\n        }\n        \n        if (!verseData.reference || typeof verseData.reference !== 'string') {\n          throw new Error('Missing or invalid reference');\n        }\n        \n        if (!verseData.text || typeof verseData.text !== 'string') {\n          throw new Error('Missing or invalid verse text');\n        }\n        \n      } catch (parseError) {\n        console.error('LLM response parsing failed:', parseError);\n        console.error('Raw LLM response:', llmResponse.content);\n        return res.status(404).json({ \n          success: false, \n          error: { \n            code: 'VERSE_NOT_FOUND', \n            message: 'Could not retrieve verse. Please try a different reference.' \n          } \n        });\n      }\n      \n      res.json({ \n        success: true, \n        data: {\n          reference: verseData.reference.trim(),\n          text: verseData.text.trim(),\n          translation: verseData.translation?.trim() || 'NIV'\n        }\n      });\n    } catch (error) {\n      console.error('Bible verse search error:', error);\n      res.status(500).json({ success: false, error: { code: 'SEARCH_FAILED', message: 'Failed to search verse' } });\n    }\n  });\n\n  app.post('/api/bible-verses/save', requireAuth, async (req, res) => {\n    try {\n      const { reference, text, translation, book, chapter, verseStart, verseEnd } = req.body;\n      \n      if (!reference || !text) {\n        return res.status(400).json({ success: false, error: { code: 'INVALID_DATA', message: 'Reference and text required' } });\n      }\n\n      // Parse Bible reference properly (handles multi-word books like \"1 Corinthians\")\n      // Reference format: \"Book Chapter:Verse\" or \"Book Chapter:Verse-Verse\"\n      let parsedBook = book;\n      let parsedChapter = chapter;\n      let parsedVerseStart = verseStart;\n      let parsedVerseEnd = verseEnd;\n\n      if (!parsedBook || !parsedChapter || !parsedVerseStart) {\n        // Split reference into book and verses\n        const colonIndex = reference.lastIndexOf(':');\n        if (colonIndex === -1) {\n          return res.status(400).json({ success: false, error: { code: 'INVALID_REFERENCE', message: 'Invalid verse reference format' } });\n        }\n\n        const bookAndChapter = reference.substring(0, colonIndex).trim();\n        const verses = reference.substring(colonIndex + 1).trim();\n\n        // Extract chapter (last number before colon)\n        const parts = bookAndChapter.split(' ');\n        parsedChapter = parseInt(parts[parts.length - 1]);\n        parsedBook = parts.slice(0, -1).join(' ');\n\n        // Extract verse start and end\n        if (verses.includes('-')) {\n          const [start, end] = verses.split('-');\n          parsedVerseStart = parseInt(start);\n          parsedVerseEnd = parseInt(end);\n        } else {\n          parsedVerseStart = parseInt(verses);\n          parsedVerseEnd = null;\n        }\n      }\n\n      // Save to bible_verses table with the correct translation\n      const result = await db.insert(bibleVerses).values({\n        userId: req.user!.id,\n        book: parsedBook,\n        chapter: parsedChapter,\n        verseStart: parsedVerseStart,\n        verseEnd: parsedVerseEnd,\n        translation: translation || 'NIV',\n        content: text,\n        notes: null\n      }).returning();\n\n      // Create event for verse saved (with immediate flourishing calculation)\n      await createEvent(req.user!.id, 'bible_verse_saved', { \n        reference,\n        book: result[0].book,\n        chapter: result[0].chapter \n      }, true); // immediate = true for user-triggered saves\n\n      res.json({ success: true, data: result[0] });\n    } catch (error) {\n      console.error('Bible verse save error:', error);\n      res.status(500).json({ success: false, error: { code: 'SAVE_FAILED', message: 'Failed to save verse' } });\n    }\n  });\n\n  // ============ DEVOTIONALS ============\n  \n  app.get('/api/devotionals', requireAuth, async (req, res) => {\n    try {\n      const devos = await db.select().from(devotionals)\n        .where(eq(devotionals.userId, req.user!.id))\n        .orderBy(desc(devotionals.createdAt))\n        .limit(10);\n      \n      res.json({ success: true, data: devos });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch devotionals' } });\n    }\n  });\n\n  app.post('/api/devotionals/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runDevotionalEngine(req.user!.id);\n      await createEvent(req.user!.id, 'devotional_read', { title: result.devotional.title, was_personalized: true });\n      res.json(result);\n    } catch (error) {\n      console.error('Devotional generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to generate devotional' } });\n    }\n  });\n\n  // ============ SYNC NOTES ============\n  \n  app.get('/api/notes', requireAuth, async (req, res) => {\n    try {\n      const notes = await db.select().from(syncNotes)\n        .where(eq(syncNotes.userId, req.user!.id))\n        .orderBy(desc(syncNotes.updatedAt));\n      \n      res.json({ success: true, data: notes });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch notes' } });\n    }\n  });\n\n  app.post('/api/notes', requireAuth, async (req, res) => {\n    try {\n      const { content } = req.body;\n      \n      // Use AI to generate tags\n      const tagResponse = await openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [{\n          role: 'system',\n          content: 'Extract 2-4 relevant spiritual/faith tags from this note. Return ONLY a JSON array of strings. Example: [\"prayer\", \"faith\", \"trust\"]'\n        }, {\n          role: 'user',\n          content\n        }],\n        temperature: 0.5,\n        max_tokens: 100\n      });\n\n      const tags = JSON.parse(tagResponse.choices[0].message.content || '[]');\n      \n      const note = await db.insert(syncNotes).values({\n        userId: req.user!.id,\n        content,\n        aiTags: tags\n      }).returning();\n\n      await createEvent(req.user!.id, 'note_created', { tags, content });\n      \n      res.json({ success: true, data: note[0] });\n    } catch (error) {\n      console.error('Note creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create note' } });\n    }\n  });\n\n  app.patch('/api/notes/:id', requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { content } = req.body;\n      \n      const note = await db.update(syncNotes)\n        .set({ content, updatedAt: new Date() })\n        .where(and(\n          eq(syncNotes.id, id),\n          eq(syncNotes.userId, req.user!.id)\n        ))\n        .returning();\n      \n      // Track note update event with content\n      if (note[0]) {\n        await createEvent(req.user!.id, 'note_created', { \n          tags: note[0].aiTags || [],\n          content: note[0].content,\n          action: 'updated'\n        });\n      }\n      \n      res.json({ success: true, data: note[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to update note' } });\n    }\n  });\n\n  app.delete('/api/notes/:id', requireAuth, async (req, res) => {\n    try {\n      await db.delete(syncNotes).where(and(\n        eq(syncNotes.id, req.params.id),\n        eq(syncNotes.userId, req.user!.id)\n      ));\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to delete note' } });\n    }\n  });\n\n  // ============ SPIRITUAL GUIDES ============\n  \n  app.get('/api/guides', async (req, res) => {\n    try {\n      const guides = await db.select().from(spiritualGuides);\n      res.json({ success: true, data: guides });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch guides' } });\n    }\n  });\n\n  app.get('/api/conversations', requireAuth, async (req, res) => {\n    try {\n      const convos = await db.select().from(conversations)\n        .where(eq(conversations.userId, req.user!.id))\n        .orderBy(desc(conversations.updatedAt));\n      \n      res.json({ success: true, data: convos });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch conversations' } });\n    }\n  });\n\n  app.post('/api/conversations', requireAuth, async (req, res) => {\n    try {\n      const { guideId, title } = req.body;\n      \n      const conversation = await db.insert(conversations).values({\n        userId: req.user!.id,\n        guideId,\n        title: title || 'New Conversation'\n      }).returning();\n      \n      res.json({ success: true, data: conversation[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create conversation' } });\n    }\n  });\n\n  app.get('/api/conversations/:id/messages', requireAuth, async (req, res) => {\n    try {\n      const msgs = await db.select().from(messages)\n        .where(eq(messages.conversationId, req.params.id))\n        .orderBy(messages.createdAt);\n      \n      res.json({ success: true, data: msgs });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch messages' } });\n    }\n  });\n\n  app.post('/api/conversations/:id/messages', requireAuth, async (req, res) => {\n    try {\n      const { content } = req.body;\n      const conversationId = req.params.id;\n      \n      // Save user message\n      const userMsg = await db.insert(messages).values({\n        conversationId,\n        role: 'user',\n        content\n      }).returning();\n\n      // Get conversation and guide details\n      const convo = await db.select().from(conversations)\n        .where(eq(conversations.id, conversationId)).limit(1);\n      \n      const guide = await db.select().from(spiritualGuides)\n        .where(eq(spiritualGuides.id, convo[0].guideId)).limit(1);\n\n      // Get conversation history\n      const history = await db.select().from(messages)\n        .where(eq(messages.conversationId, conversationId))\n        .orderBy(messages.createdAt)\n        .limit(10);\n\n      // Call OpenAI\n      const response = await openai.chat.completions.create({\n        model: 'gpt-4o-mini',\n        messages: [\n          { role: 'system', content: guide[0].systemPrompt },\n          ...history.map(m => ({ role: m.role as 'user' | 'assistant', content: m.content })),\n          { role: 'user', content }\n        ],\n        temperature: 0.7,\n        max_tokens: 300\n      });\n\n      const aiContent = response.choices[0].message.content || '';\n\n      // Save AI response\n      const aiMsg = await db.insert(messages).values({\n        conversationId,\n        role: 'assistant',\n        content: aiContent\n      }).returning();\n\n      await createEvent(req.user!.id, 'guide_chat', { \n        guide_name: guide[0].name, \n        message_preview: content.substring(0, 50) \n      });\n\n      res.json({ \n        success: true, \n        data: { userMessage: userMsg[0], aiMessage: aiMsg[0] }\n      });\n    } catch (error) {\n      console.error('Message creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create message' } });\n    }\n  });\n\n  // ============ PRAYER CHAINS ============\n  \n  app.get('/api/prayer-chains', requireAuth, async (req, res) => {\n    try {\n      const chains = await db.select().from(prayerChains)\n        .orderBy(desc(prayerChains.createdAt))\n        .limit(50);\n      \n      res.json({ success: true, data: chains });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch prayer chains' } });\n    }\n  });\n\n  app.post('/api/prayer-chains', requireAuth, async (req, res) => {\n    try {\n      const { title, content } = req.body;\n      \n      const chain = await db.insert(prayerChains).values({\n        userId: req.user!.id,\n        title,\n        content\n      }).returning();\n      \n      res.json({ success: true, data: chain[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create prayer chain' } });\n    }\n  });\n\n  app.get('/api/prayer-chains/:id/comments', async (req, res) => {\n    try {\n      const comments = await db.select().from(prayerChainComments)\n        .where(eq(prayerChainComments.prayerChainId, req.params.id))\n        .orderBy(prayerChainComments.createdAt);\n      \n      res.json({ success: true, data: comments });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch comments' } });\n    }\n  });\n\n  app.post('/api/prayer-chains/:id/comments', requireAuth, async (req, res) => {\n    try {\n      const { content } = req.body;\n      \n      const comment = await db.insert(prayerChainComments).values({\n        prayerChainId: req.params.id,\n        userId: req.user!.id,\n        content\n      }).returning();\n      \n      res.json({ success: true, data: comment[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create comment' } });\n    }\n  });\n\n  // ============ VIDEOS ============\n  \n  app.get('/api/videos', requireAuth, async (req, res) => {\n    try {\n      const userVideos = await db.select().from(videos)\n        .where(eq(videos.userId, req.user!.id))\n        .orderBy(desc(videos.createdAt))\n        .limit(20);\n      \n      res.json({ success: true, data: userVideos });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch videos' } });\n    }\n  });\n\n  app.post('/api/videos/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runVideoEngine(req.user!.id);\n      res.json(result);\n    } catch (error) {\n      console.error('Video generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to generate videos' } });\n    }\n  });\n\n  app.post('/api/videos/:id/watch', requireAuth, async (req, res) => {\n    try {\n      const video = await db.select().from(videos)\n        .where(eq(videos.id, req.params.id)).limit(1);\n      \n      if (video.length > 0) {\n        await createEvent(req.user!.id, 'video_watched', { \n          title: video[0].title, \n          youtube_id: video[0].youtubeId \n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to track video' } });\n    }\n  });\n\n  // ============ SONGS ============\n  \n  app.get('/api/songs', requireAuth, async (req, res) => {\n    try {\n      const userSongs = await db.select().from(songs)\n        .where(eq(songs.userId, req.user!.id))\n        .orderBy(desc(songs.createdAt))\n        .limit(20);\n      \n      res.json({ success: true, data: userSongs });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch songs' } });\n    }\n  });\n\n  app.post('/api/songs/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runSongEngine(req.user!.id);\n      res.json(result);\n    } catch (error) {\n      console.error('Song generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to generate songs' } });\n    }\n  });\n\n  app.post('/api/songs/:id/listen', requireAuth, async (req, res) => {\n    try {\n      const song = await db.select().from(songs)\n        .where(eq(songs.id, req.params.id)).limit(1);\n      \n      if (song.length > 0) {\n        await createEvent(req.user!.id, 'song_listened', { \n          title: song[0].title, \n          artist: song[0].artist,\n          youtube_id: song[0].youtubeId \n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to track song' } });\n    }\n  });\n\n  // ============ SERMONS ============\n  \n  app.get('/api/sermons', requireAuth, async (req, res) => {\n    try {\n      const userSermons = await db.select().from(sermons)\n        .where(eq(sermons.userId, req.user!.id))\n        .orderBy(desc(sermons.createdAt))\n        .limit(20);\n      \n      res.json({ success: true, data: userSermons });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch sermons' } });\n    }\n  });\n\n  app.post('/api/sermons/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runSermonEngine(req.user!.id);\n      res.json(result);\n    } catch (error) {\n      console.error('Sermon generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to generate sermons' } });\n    }\n  });\n\n  // ============ RESOURCES (LIBRARY) ============\n  \n  app.get('/api/resources', requireAuth, async (req, res) => {\n    try {\n      const { type, search } = req.query;\n      \n      const conditions = [eq(resources.userId, req.user!.id)];\n\n      if (type) {\n        conditions.push(eq(resources.resourceType, type as string));\n      }\n\n      if (search) {\n        conditions.push(\n          or(\n            ilike(resources.title, `%${search}%`),\n            ilike(resources.description, `%${search}%`)\n          )!\n        );\n      }\n\n      const userResources = await db.select().from(resources)\n        .where(and(...conditions))\n        .orderBy(desc(resources.createdAt))\n        .limit(50);\n      \n      res.json({ success: true, data: userResources });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch resources' } });\n    }\n  });\n\n  app.post('/api/resources/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runResourceEngine(req.user!.id);\n      res.json(result);\n    } catch (error) {\n      console.error('Resource generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to generate resources' } });\n    }\n  });\n\n  app.post('/api/resources/:id/read', requireAuth, async (req, res) => {\n    try {\n      const resource = await db.select().from(resources)\n        .where(eq(resources.id, req.params.id)).limit(1);\n      \n      if (resource.length > 0) {\n        await createEvent(req.user!.id, 'resource_read', { \n          title: resource[0].title, \n          resource_type: resource[0].resourceType,\n          url: resource[0].url\n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to track resource' } });\n    }\n  });\n\n  // ============ FLOURISHING INDEX ============\n  \n  app.get('/api/flourishing', requireAuth, async (req, res) => {\n    try {\n      const scores = await db.select().from(flourishingScores)\n        .where(eq(flourishingScores.userId, req.user!.id))\n        .orderBy(desc(flourishingScores.createdAt))\n        .limit(1);\n      \n      res.json({ success: true, data: scores[0] || null });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch flourishing scores' } });\n    }\n  });\n\n  app.post('/api/flourishing/generate', requireAuth, async (req, res) => {\n    try {\n      const result = await runFlourishingEngine(req.user!.id);\n      res.json(result);\n    } catch (error) {\n      console.error('Flourishing generation error:', error);\n      res.status(500).json({ success: false, error: { code: 'PERSONALIZATION_FAILED', message: 'Failed to calculate flourishing scores' } });\n    }\n  });\n\n  // ============ FAITH CIRCLES ============\n  \n  // Get all faith circles\n  app.get('/api/faith-circles', requireAuth, async (req, res) => {\n    try {\n      const { category, search } = req.query;\n      \n      const conditions = [];\n      if (category && category !== 'all') {\n        conditions.push(eq(faithCircles.category, category as string));\n      }\n      if (search) {\n        conditions.push(\n          or(\n            ilike(faithCircles.title, `%${search}%`),\n            ilike(faithCircles.description, `%${search}%`)\n          )\n        );\n      }\n      \n      const circles = await db.select({\n        id: faithCircles.id,\n        creatorId: faithCircles.creatorId,\n        title: faithCircles.title,\n        description: faithCircles.description,\n        category: faithCircles.category,\n        memberCount: faithCircles.memberCount,\n        isPublic: faithCircles.isPublic,\n        createdAt: faithCircles.createdAt,\n        updatedAt: faithCircles.updatedAt,\n        creatorName: users.name,\n      })\n      .from(faithCircles)\n      .leftJoin(users, eq(faithCircles.creatorId, users.id))\n      .where(conditions.length > 0 ? and(...conditions) : undefined)\n      .orderBy(desc(faithCircles.updatedAt));\n      \n      // Check which circles the user has joined\n      const userMemberships = await db.select()\n        .from(faithCircleMembers)\n        .where(eq(faithCircleMembers.userId, req.user!.id));\n      \n      const membershipMap = new Map(userMemberships.map(m => [m.circleId, true]));\n      \n      const circlesWithMembership = circles.map(circle => ({\n        ...circle,\n        isMember: membershipMap.has(circle.id)\n      }));\n      \n      res.json({ success: true, data: circlesWithMembership });\n    } catch (error) {\n      console.error('Faith circles fetch error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch faith circles' } });\n    }\n  });\n\n  // Create new faith circle\n  app.post('/api/faith-circles', requireAuth, async (req, res) => {\n    try {\n      const validated = insertFaithCircleSchema.parse({\n        ...req.body,\n        creatorId: req.user!.id\n      });\n      \n      const circle = await db.insert(faithCircles).values(validated).returning();\n      \n      // Automatically join the creator as a member\n      await db.insert(faithCircleMembers).values({\n        circleId: circle[0].id,\n        userId: req.user!.id\n      });\n      \n      // Update member count\n      await db.update(faithCircles)\n        .set({ memberCount: 1 })\n        .where(eq(faithCircles.id, circle[0].id));\n      \n      res.json({ success: true, data: circle[0] });\n    } catch (error) {\n      console.error('Create circle error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create circle' } });\n    }\n  });\n\n  // Get circle details\n  app.get('/api/faith-circles/:id', requireAuth, async (req, res) => {\n    try {\n      const circle = await db.select({\n        id: faithCircles.id,\n        creatorId: faithCircles.creatorId,\n        title: faithCircles.title,\n        description: faithCircles.description,\n        category: faithCircles.category,\n        memberCount: faithCircles.memberCount,\n        isPublic: faithCircles.isPublic,\n        createdAt: faithCircles.createdAt,\n        updatedAt: faithCircles.updatedAt,\n        creatorName: users.name,\n      })\n      .from(faithCircles)\n      .leftJoin(users, eq(faithCircles.creatorId, users.id))\n      .where(eq(faithCircles.id, req.params.id))\n      .limit(1);\n      \n      if (circle.length === 0) {\n        return res.status(404).json({ success: false, error: { code: 'NOT_FOUND', message: 'Circle not found' } });\n      }\n      \n      // Check if user is a member\n      const membership = await db.select()\n        .from(faithCircleMembers)\n        .where(and(\n          eq(faithCircleMembers.circleId, req.params.id),\n          eq(faithCircleMembers.userId, req.user!.id)\n        ))\n        .limit(1);\n      \n      res.json({ \n        success: true, \n        data: {\n          ...circle[0],\n          isMember: membership.length > 0\n        }\n      });\n    } catch (error) {\n      console.error('Circle details error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch circle details' } });\n    }\n  });\n\n  // Join circle\n  app.post('/api/faith-circles/:id/join', requireAuth, async (req, res) => {\n    try {\n      // Check if already a member\n      const existing = await db.select()\n        .from(faithCircleMembers)\n        .where(and(\n          eq(faithCircleMembers.circleId, req.params.id),\n          eq(faithCircleMembers.userId, req.user!.id)\n        ))\n        .limit(1);\n      \n      if (existing.length > 0) {\n        return res.status(400).json({ success: false, error: { code: 'ALREADY_MEMBER', message: 'Already a member of this circle' } });\n      }\n      \n      // Add member\n      await db.insert(faithCircleMembers).values({\n        circleId: req.params.id,\n        userId: req.user!.id\n      });\n      \n      // Increment member count\n      await db.update(faithCircles)\n        .set({ memberCount: sql`${faithCircles.memberCount} + 1` })\n        .where(eq(faithCircles.id, req.params.id));\n      \n      // Get circle info for event\n      const circle = await db.select().from(faithCircles)\n        .where(eq(faithCircles.id, req.params.id))\n        .limit(1);\n      \n      if (circle.length > 0) {\n        await createEvent(req.user!.id, 'circle_joined', {\n          circle_id: req.params.id,\n          circle_title: circle[0].title\n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Join circle error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to join circle' } });\n    }\n  });\n\n  // Leave circle\n  app.post('/api/faith-circles/:id/leave', requireAuth, async (req, res) => {\n    try {\n      // Remove member\n      await db.delete(faithCircleMembers)\n        .where(and(\n          eq(faithCircleMembers.circleId, req.params.id),\n          eq(faithCircleMembers.userId, req.user!.id)\n        ));\n      \n      // Decrement member count\n      await db.update(faithCircles)\n        .set({ memberCount: sql`${faithCircles.memberCount} - 1` })\n        .where(eq(faithCircles.id, req.params.id));\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error('Leave circle error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to leave circle' } });\n    }\n  });\n\n  // Get circle posts\n  app.get('/api/faith-circles/:id/posts', requireAuth, async (req, res) => {\n    try {\n      const posts = await db.select({\n        id: faithCirclePosts.id,\n        circleId: faithCirclePosts.circleId,\n        userId: faithCirclePosts.userId,\n        content: faithCirclePosts.content,\n        createdAt: faithCirclePosts.createdAt,\n        userName: users.name,\n        userEmail: users.email,\n      })\n      .from(faithCirclePosts)\n      .leftJoin(users, eq(faithCirclePosts.userId, users.id))\n      .where(eq(faithCirclePosts.circleId, req.params.id))\n      .orderBy(desc(faithCirclePosts.createdAt))\n      .limit(50);\n      \n      res.json({ success: true, data: posts });\n    } catch (error) {\n      console.error('Fetch posts error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch posts' } });\n    }\n  });\n\n  // Create post in circle\n  app.post('/api/faith-circles/:id/posts', requireAuth, async (req, res) => {\n    try {\n      // Check if user is a member\n      const membership = await db.select()\n        .from(faithCircleMembers)\n        .where(and(\n          eq(faithCircleMembers.circleId, req.params.id),\n          eq(faithCircleMembers.userId, req.user!.id)\n        ))\n        .limit(1);\n      \n      if (membership.length === 0) {\n        return res.status(403).json({ success: false, error: { code: 'NOT_MEMBER', message: 'Must be a member to post' } });\n      }\n      \n      const validated = insertFaithCirclePostSchema.parse({\n        circleId: req.params.id,\n        userId: req.user!.id,\n        content: req.body.content\n      });\n      \n      const post = await db.insert(faithCirclePosts).values(validated).returning();\n      \n      // Update circle's updated_at\n      await db.update(faithCircles)\n        .set({ updatedAt: new Date() })\n        .where(eq(faithCircles.id, req.params.id));\n      \n      // Get circle info for event\n      const circle = await db.select().from(faithCircles)\n        .where(eq(faithCircles.id, req.params.id))\n        .limit(1);\n      \n      if (circle.length > 0) {\n        await createEvent(req.user!.id, 'circle_post', {\n          circle_id: req.params.id,\n          circle_title: circle[0].title,\n          post_preview: validated.content.substring(0, 100)\n        });\n      }\n      \n      // Return post with user info\n      const postWithUser = await db.select({\n        id: faithCirclePosts.id,\n        circleId: faithCirclePosts.circleId,\n        userId: faithCirclePosts.userId,\n        content: faithCirclePosts.content,\n        createdAt: faithCirclePosts.createdAt,\n        userName: users.name,\n        userEmail: users.email,\n      })\n      .from(faithCirclePosts)\n      .leftJoin(users, eq(faithCirclePosts.userId, users.id))\n      .where(eq(faithCirclePosts.id, post[0].id))\n      .limit(1);\n      \n      res.json({ success: true, data: postWithUser[0] });\n    } catch (error) {\n      console.error('Create post error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create post' } });\n    }\n  });\n\n  // ============ FINANCIAL STEWARDSHIP ============\n  \n  // Get financial dashboard summary\n  app.get('/api/financial/dashboard', requireAuth, async (req, res) => {\n    try {\n      const userId = req.user!.id;\n      \n      // Get recent transactions\n      const recentTransactions = await db.select()\n        .from(financialTransactions)\n        .where(eq(financialTransactions.userId, userId))\n        .orderBy(desc(financialTransactions.createdAt))\n        .limit(10);\n      \n      // Get active commitments\n      const activeCommitments = await db.select()\n        .from(generosityCommitments)\n        .where(and(\n          eq(generosityCommitments.userId, userId),\n          eq(generosityCommitments.status, 'active')\n        ))\n        .orderBy(desc(generosityCommitments.createdAt));\n      \n      // Get active goals\n      const activeGoals = await db.select()\n        .from(financialGoals)\n        .where(and(\n          eq(financialGoals.userId, userId),\n          eq(financialGoals.isCompleted, false)\n        ))\n        .orderBy(desc(financialGoals.createdAt));\n      \n      // Get budget categories\n      const budget = await db.select()\n        .from(budgetCategories)\n        .where(eq(budgetCategories.userId, userId));\n      \n      res.json({ \n        success: true, \n        data: { \n          recentTransactions, \n          activeCommitments, \n          activeGoals,\n          budget\n        } \n      });\n    } catch (error) {\n      console.error('Financial dashboard error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch dashboard' } });\n    }\n  });\n  \n  // Get all transactions\n  app.get('/api/financial/transactions', requireAuth, async (req, res) => {\n    try {\n      const transactions = await db.select()\n        .from(financialTransactions)\n        .where(eq(financialTransactions.userId, req.user!.id))\n        .orderBy(desc(financialTransactions.createdAt));\n      \n      res.json({ success: true, data: transactions });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch transactions' } });\n    }\n  });\n  \n  // Create transaction (tithe, generosity, debt payment, etc.)\n  app.post('/api/financial/transactions', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertFinancialTransactionSchema.parse({\n        ...req.body,\n        userId: req.user!.id\n      });\n      \n      const transaction = await db.insert(financialTransactions)\n        .values(validatedData)\n        .returning();\n      \n      // Create event for personalization\n      await createEvent(req.user!.id, req.body.transactionType as any, {\n        amount: req.body.amount,\n        category: req.body.category,\n        spiritual_tag: req.body.spiritualTag\n      });\n      \n      res.json({ success: true, data: transaction[0] });\n    } catch (error) {\n      console.error('Transaction creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create transaction' } });\n    }\n  });\n  \n  // Get generosity commitments\n  app.get('/api/financial/commitments', requireAuth, async (req, res) => {\n    try {\n      const commitments = await db.select()\n        .from(generosityCommitments)\n        .where(eq(generosityCommitments.userId, req.user!.id))\n        .orderBy(desc(generosityCommitments.createdAt));\n      \n      res.json({ success: true, data: commitments });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch commitments' } });\n    }\n  });\n  \n  // Create generosity commitment\n  app.post('/api/financial/commitments', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertGenerosityCommitmentSchema.parse({\n        ...req.body,\n        userId: req.user!.id\n      });\n      \n      const commitment = await db.insert(generosityCommitments)\n        .values(validatedData)\n        .returning();\n      \n      await createEvent(req.user!.id, 'generosity_commitment', {\n        title: req.body.title,\n        target_amount: req.body.targetAmount\n      });\n      \n      res.json({ success: true, data: commitment[0] });\n    } catch (error) {\n      console.error('Commitment creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create commitment' } });\n    }\n  });\n  \n  // Update generosity commitment\n  app.patch('/api/financial/commitments/:id', requireAuth, async (req, res) => {\n    try {\n      const updated = await db.update(generosityCommitments)\n        .set(req.body)\n        .where(and(\n          eq(generosityCommitments.id, req.params.id),\n          eq(generosityCommitments.userId, req.user!.id)\n        ))\n        .returning();\n      \n      res.json({ success: true, data: updated[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to update commitment' } });\n    }\n  });\n  \n  // Get financial goals\n  app.get('/api/financial/goals', requireAuth, async (req, res) => {\n    try {\n      const goals = await db.select()\n        .from(financialGoals)\n        .where(eq(financialGoals.userId, req.user!.id))\n        .orderBy(desc(financialGoals.createdAt));\n      \n      res.json({ success: true, data: goals });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch goals' } });\n    }\n  });\n  \n  // Create financial goal\n  app.post('/api/financial/goals', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertFinancialGoalSchema.parse({\n        ...req.body,\n        userId: req.user!.id\n      });\n      \n      const goal = await db.insert(financialGoals)\n        .values(validatedData)\n        .returning();\n      \n      await createEvent(req.user!.id, 'financial_goal_set', {\n        title: req.body.title,\n        goal_type: req.body.goalType\n      });\n      \n      res.json({ success: true, data: goal[0] });\n    } catch (error) {\n      console.error('Goal creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create goal' } });\n    }\n  });\n  \n  // Update financial goal progress\n  app.patch('/api/financial/goals/:id', requireAuth, async (req, res) => {\n    try {\n      const updated = await db.update(financialGoals)\n        .set(req.body)\n        .where(and(\n          eq(financialGoals.id, req.params.id),\n          eq(financialGoals.userId, req.user!.id)\n        ))\n        .returning();\n      \n      res.json({ success: true, data: updated[0] });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to update goal' } });\n    }\n  });\n  \n  // Get stewardship reflections\n  app.get('/api/financial/reflections', requireAuth, async (req, res) => {\n    try {\n      const reflections = await db.select()\n        .from(stewardshipReflections)\n        .where(eq(stewardshipReflections.userId, req.user!.id))\n        .orderBy(desc(stewardshipReflections.createdAt));\n      \n      res.json({ success: true, data: reflections });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch reflections' } });\n    }\n  });\n  \n  // Create stewardship reflection\n  app.post('/api/financial/reflections', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertStewardshipReflectionSchema.parse({\n        ...req.body,\n        userId: req.user!.id\n      });\n      \n      const reflection = await db.insert(stewardshipReflections)\n        .values(validatedData)\n        .returning();\n      \n      await createEvent(req.user!.id, 'stewardship_reflection', {\n        reflection_type: req.body.reflectionType,\n        content: req.body.content\n      });\n      \n      res.json({ success: true, data: reflection[0] });\n    } catch (error) {\n      console.error('Reflection creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create reflection' } });\n    }\n  });\n  \n  // Get budget categories\n  app.get('/api/financial/budget', requireAuth, async (req, res) => {\n    try {\n      const budget = await db.select()\n        .from(budgetCategories)\n        .where(eq(budgetCategories.userId, req.user!.id));\n      \n      res.json({ success: true, data: budget });\n    } catch (error) {\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to fetch budget' } });\n    }\n  });\n  \n  // Create budget category\n  app.post('/api/financial/budget', requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertBudgetCategorySchema.parse({\n        ...req.body,\n        userId: req.user!.id\n      });\n      \n      const category = await db.insert(budgetCategories)\n        .values(validatedData)\n        .returning();\n      \n      res.json({ success: true, data: category[0] });\n    } catch (error) {\n      console.error('Budget category creation error:', error);\n      res.status(500).json({ success: false, error: { code: 'DATABASE_ERROR', message: 'Failed to create budget category' } });\n    }\n  });\n\n  // ============ GLOBAL SEARCH ============\n  \n  app.get('/api/search', requireAuth, async (req, res) => {\n    try {\n      const query = (req.query.q as string)?.trim();\n      \n      if (!query || query.length < 2) {\n        return res.json({ success: true, data: { results: [] } });\n      }\n\n      const searchTerm = `%${query}%`;\n      const limit = 5; // Top 5 results per category\n\n      // Search across all entities in parallel\n      const [\n        bibleResults,\n        prayerResults,\n        devotionalResults,\n        noteResults,\n        guideResults,\n        videoResults,\n        songResults,\n        sermonResults,\n        resourceResults,\n        circleResults\n      ] = await Promise.all([\n        // Bible verses\n        db.select({\n          id: bibleVerses.id,\n          type: sql<string>`'bible'`,\n          title: sql<string>`${bibleVerses.book} || ' ' || ${bibleVerses.chapter} || ':' || ${bibleVerses.verseStart}`,\n          subtitle: bibleVerses.translation,\n          content: bibleVerses.content\n        })\n        .from(bibleVerses)\n        .where(and(\n          eq(bibleVerses.userId, req.user!.id),\n          or(\n            ilike(bibleVerses.book, searchTerm),\n            ilike(bibleVerses.content, searchTerm)\n          )\n        ))\n        .limit(limit),\n\n        // Prayers\n        db.select({\n          id: prayerJournals.id,\n          type: sql<string>`'prayer'`,\n          title: sql<string>`SUBSTRING(${prayerJournals.content}, 1, 50)`,\n          subtitle: sql<string>`CASE WHEN ${prayerJournals.isAnswered} THEN 'Answered' ELSE 'Ongoing' END`,\n          content: prayerJournals.content\n        })\n        .from(prayerJournals)\n        .where(and(\n          eq(prayerJournals.userId, req.user!.id),\n          ilike(prayerJournals.content, searchTerm)\n        ))\n        .limit(limit),\n\n        // Devotionals\n        db.select({\n          id: devotionals.id,\n          type: sql<string>`'devotional'`,\n          title: devotionals.title,\n          subtitle: devotionals.scriptureReference,\n          content: devotionals.content\n        })\n        .from(devotionals)\n        .where(and(\n          eq(devotionals.userId, req.user!.id),\n          or(\n            ilike(devotionals.title, searchTerm),\n            ilike(devotionals.content, searchTerm)\n          )\n        ))\n        .limit(limit),\n\n        // Notes\n        db.select({\n          id: syncNotes.id,\n          type: sql<string>`'note'`,\n          title: sql<string>`SUBSTRING(${syncNotes.content}, 1, 50)`,\n          subtitle: sql<string>`ARRAY_TO_STRING(${syncNotes.aiTags}, ', ')`,\n          content: syncNotes.content\n        })\n        .from(syncNotes)\n        .where(and(\n          eq(syncNotes.userId, req.user!.id),\n          ilike(syncNotes.content, searchTerm)\n        ))\n        .limit(limit),\n\n        // Spiritual Guides\n        db.select({\n          id: spiritualGuides.id,\n          type: sql<string>`'guide'`,\n          title: spiritualGuides.name,\n          subtitle: sql<string>`'AI Spiritual Guide'`,\n          content: sql<string>`NULL`\n        })\n        .from(spiritualGuides)\n        .where(\n          ilike(spiritualGuides.name, searchTerm)\n        )\n        .limit(limit),\n\n        // Videos\n        db.select({\n          id: videos.id,\n          type: sql<string>`'video'`,\n          title: videos.title,\n          subtitle: videos.channelName,\n          content: sql<string>`NULL`\n        })\n        .from(videos)\n        .where(and(\n          eq(videos.userId, req.user!.id),\n          or(\n            ilike(videos.title, searchTerm),\n            ilike(videos.channelName, searchTerm)\n          )\n        ))\n        .limit(limit),\n\n        // Songs\n        db.select({\n          id: songs.id,\n          type: sql<string>`'song'`,\n          title: songs.title,\n          subtitle: songs.artist,\n          content: sql<string>`NULL`\n        })\n        .from(songs)\n        .where(and(\n          eq(songs.userId, req.user!.id),\n          or(\n            ilike(songs.title, searchTerm),\n            ilike(songs.artist, searchTerm)\n          )\n        ))\n        .limit(limit),\n\n        // Sermons\n        db.select({\n          id: sermons.id,\n          type: sql<string>`'sermon'`,\n          title: sermons.title,\n          subtitle: sermons.churchName,\n          content: sql<string>`NULL`\n        })\n        .from(sermons)\n        .where(and(\n          eq(sermons.userId, req.user!.id),\n          or(\n            ilike(sermons.title, searchTerm),\n            ilike(sermons.churchName, searchTerm)\n          )\n        ))\n        .limit(limit),\n\n        // Resources\n        db.select({\n          id: resources.id,\n          type: sql<string>`'resource'`,\n          title: resources.title,\n          subtitle: resources.author,\n          content: resources.description\n        })\n        .from(resources)\n        .where(and(\n          eq(resources.userId, req.user!.id),\n          or(\n            ilike(resources.title, searchTerm),\n            ilike(resources.description, searchTerm),\n            ilike(resources.author, searchTerm)\n          )\n        ))\n        .limit(limit),\n\n        // Faith Circles\n        db.select({\n          id: faithCircles.id,\n          type: sql<string>`'circle'`,\n          title: faithCircles.title,\n          subtitle: sql<string>`${faithCircles.memberCount} || ' members'`,\n          content: faithCircles.description\n        })\n        .from(faithCircles)\n        .where(\n          or(\n            ilike(faithCircles.title, searchTerm),\n            ilike(faithCircles.description, searchTerm)\n          )\n        )\n        .limit(limit)\n      ]);\n\n      // Combine and structure results\n      const allResults = [\n        ...bibleResults,\n        ...prayerResults,\n        ...devotionalResults,\n        ...noteResults,\n        ...guideResults,\n        ...videoResults,\n        ...songResults,\n        ...sermonResults,\n        ...resourceResults,\n        ...circleResults\n      ];\n\n      res.json({ success: true, data: { results: allResults, query } });\n    } catch (error) {\n      console.error('Search error:', error);\n      res.status(500).json({ success: false, error: { code: 'SEARCH_ERROR', message: 'Failed to perform search' } });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":55344},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"replit.md":{"content":"# Harmony - Faith-Based Desktop Workspace\n\n## Overview\n\nHarmony is a faith-based productivity application designed as a desktop operating system metaphor. It integrates spiritual growth tools with modern productivity features, offering users a unique workspace for prayer journaling, Bible reading, mood tracking, and AI-powered spiritual guidance. The interface emulates a desktop environment with window management, a dock navigation system, and tile-based views.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework**: React with TypeScript, using Vite.\n**UI Component System**: shadcn/ui components built on Radix UI, following a \"New York\" style variant with custom theming.\n**Styling Approach**: Tailwind CSS with custom configuration for a dual-theme (light/dark) system with warm, faith-inspired color palettes, a stained-glass aesthetic, and custom border radii.\n**State Management**: React Query for server state; React hooks for local UI state.\n**Routing**: Wouter for client-side routing.\n**Desktop Paradigm Components**: Draggable/resizable windows, dock navigation, tile-based app launcher, full-screen launchpad, top menu bar, and right sidebar widget panel (in traditional OS-mode).\n**Typography**: Inter for UI, Crimson Text for scripture/devotional content.\n**Search System**: Multi-entity autocomplete search in top menu bar. Searches across 10 content types (Bible verses, prayers, devotionals, notes, spiritual guides, videos, songs, sermons, resources, faith circles) with grouped results by entity type, sticky section headers showing icons and counts, and click-outside-to-close functionality.\n**Right Sidebar Widgets** (Traditional OS-Mode): Contextual widget panel displaying verse of the day, journey stats (Flourishing Index, active prayers, saved verses), devotional preview, calendar, and daily spiritual reminders. Only visible in icon/traditional desktop view.\n\n### Backend Architecture\n\n**Server Framework**: Express.js with TypeScript on Node.js.\n**API Design**: RESTful API with an abstract storage interface (`IStorage`) currently using an in-memory implementation (`MemStorage`), designed for future database integration.\n**Development Tooling**: Vite HMR, custom logging, and error handling middleware.\n**Build Process**: Vite for frontend, esbuild for backend.\n\n### Data Storage Solutions\n\n**Database System**: PostgreSQL via Neon serverless driver.\n**ORM**: Drizzle ORM for type-safe queries and schema management.\n**Schema Design**: Includes tables for users, events (using JSONB for flexible data), moods, prayer journals, Bible reading logs, devotionals, notes, AI guides, media (videos, songs, sermons), resources, and Faith Circles.\n**Migration Strategy**: Drizzle Kit.\n**Session Management**: Prepared for `connect-pg-simple`.\n\n### Authentication & Authorization\n\n**Authentication System**: Session-based using `express-session` with a PostgreSQL session store, Bcrypt password hashing, protected API routes, and frontend AuthProvider context.\n**Session Management**: Persistent sessions with secure session cookies.\n\n### Design System\n\n**Color Philosophy**: Warm beige/deep brown bases with amber/gold accents. Stained glass effect with translucent overlays, backdrop blur, and color saturation.\n**Interaction Patterns**: CSS-based elevation system, consistent hover states, custom scrollbar styling.\n\n## External Dependencies\n\n### Third-Party Services & APIs\n\n**Database**: Neon Postgres serverless database (`@neondatabase/serverless`).\n**AI**: Multi-model LLM system with Gemini (gemini-2.0-flash-exp) as default, OpenAI (gpt-4o-mini) as automatic fallback. Unified via `llm-client.ts` abstraction layer with automatic quota-aware fallback (switches to OpenAI when Gemini quota exceeded). Configurable via `DEFAULT_MODEL` environment variable. Includes robust JSON sanitization for handling LLM formatting inconsistencies (markdown code fences, comma-separated objects, trailing commas).\n**Bible Content**: bible-api.com for Bible verse content (KJV).\n**Video/Music Integration**: YouTube integration.\n\n### Personalization System\n\n**Real-Time Event-Driven Personalization**: Comprehensive event tracking system (`server/events.ts`) that captures detailed user activity and triggers intelligent AI personalization engines based on event type.\n\n**Event Categories**:\n- **Spiritual Events** (mood, prayer, note_created, guide_chat): Trigger all 6 personalization engines (Bible verses, devotionals, videos, songs, sermons, resources) in parallel using fire-and-forget pattern\n- **Engagement Events** (video_watched, song_listened, resource_read, bible_verse_saved): Refine specific recommendation engine\n- **Community Events** (circle_joined, circle_post): Update devotionals and resources with community context\n\n**Event Data Captured**: Full content for prayers, notes, moods; metadata for media interactions; community engagement details for circles\n\n**Activity Analysis**: AI analyzes last 50 user activities with recency-weighted prioritization:\n- **[RECENT]** (last 10 activities): Weighted HEAVILY - reflects current spiritual state\n- **[MODERATE]** (activities 11-25): Important for identifying trends\n- **[OLDER]** (activities 26-50): Background context only\n\n**Performance**: Non-blocking architecture using fire-and-forget promises - API responses return immediately while personalization runs in background. Uses `Promise.allSettled` for parallel engine execution.\n\n### UI Component Libraries\n\n**Radix UI**: Unstyled, accessible UI primitives.\n**shadcn/ui**: Pre-built components using Radix UI with Tailwind styling.\n\n### Utility Libraries\n\n**Form Handling**: React Hook Form with Zod resolver and Drizzle-Zod.\n**Date Handling**: `date-fns`.\n**Styling Utilities**: `clsx`, `tailwind-merge`, `class-variance-authority` (CVA).\n**Icons**: Lucide React.\n\n### Build & Development Tools\n\n**Package Management**: npm.\n**Build Tools**: Vite (frontend), esbuild (backend), PostCSS with Tailwind CSS and Autoprefixer.\n**Development Environment**: Configured for Replit with custom Vite plugins.","size_bytes":6135},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/DesktopBackground.tsx":{"content":"interface DesktopBackgroundProps {\n  children: React.ReactNode;\n}\n\nexport default function DesktopBackground({ children }: DesktopBackgroundProps) {\n  return (\n    <div className=\"fixed inset-0 bg-gradient-to-br from-[#f5f1e8] to-[#e8dcc4] dark:from-[#1a1410] dark:to-[#2d2419]\">\n      <div \n        className=\"absolute inset-0\" \n        style={{\n          backgroundImage: 'radial-gradient(#d4c5a9 1px, transparent 1px)',\n          backgroundSize: '24px 24px',\n        }}\n      />\n      <div \n        className=\"absolute inset-0 dark:opacity-100 opacity-0 transition-opacity duration-300\" \n        style={{\n          backgroundImage: 'radial-gradient(#3d3427 1px, transparent 1px)',\n          backgroundSize: '24px 24px',\n        }}\n      />\n      {children}\n    </div>\n  );\n}\n","size_bytes":778},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/apps/PrayerWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Plus, Loader2, Trash2, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface Prayer {\n  id: string;\n  userId: string;\n  content: string;\n  isAnswered: boolean;\n  answeredAt: string | null;\n  createdAt: string;\n}\n\nexport default function PrayerWindow() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [newPrayerContent, setNewPrayerContent] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data: prayersData, isLoading } = useQuery<{ data: Prayer[] }>({\n    queryKey: ['/api/prayers']\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const res = await apiRequest('POST', '/api/prayers', { content });\n      await res.json();\n      \n      // Immediately trigger flourishing recalculation\n      const flourishingRes = await apiRequest('POST', '/api/flourishing/generate');\n      await flourishingRes.json();\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      setNewPrayerContent('');\n      setIsDialogOpen(false);\n      toast({ title: 'Prayer added!', description: 'Your prayer has been saved.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to add prayer.', variant: 'destructive' });\n    }\n  });\n\n  const answerMutation = useMutation({\n    mutationFn: async ({ id, isAnswered }: { id: string; isAnswered: boolean }) => {\n      const res = await apiRequest('PATCH', `/api/prayers/${id}/answer`, { isAnswered });\n      await res.json();\n      \n      // Immediately trigger flourishing recalculation\n      const flourishingRes = await apiRequest('POST', '/api/flourishing/generate');\n      await flourishingRes.json();\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      toast({ title: 'Updated!', description: 'Prayer status updated.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to update prayer.', variant: 'destructive' });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('DELETE', `/api/prayers/${id}`);\n      await res.json();\n      \n      // Immediately trigger flourishing recalculation\n      const flourishingRes = await apiRequest('POST', '/api/flourishing/generate');\n      await flourishingRes.json();\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prayers'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      toast({ title: 'Deleted!', description: 'Prayer has been removed.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to delete prayer.', variant: 'destructive' });\n    }\n  });\n\n  const handleAddPrayer = () => {\n    if (newPrayerContent.trim()) {\n      createMutation.mutate(newPrayerContent);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const prayers = prayersData?.data || [];\n\n  // Filter prayers by search query\n  const filteredPrayers = prayers.filter(prayer => \n    !searchQuery || prayer.content.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Prayer Journal</h2>\n        <Button\n          size=\"sm\"\n          onClick={() => setIsDialogOpen(true)}\n          data-testid=\"button-add-prayer\"\n        >\n          <Plus className=\"w-4 h-4 mr-2\" />\n          New Prayer\n        </Button>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search prayers...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-prayers\"\n        />\n      </div>\n\n      {prayers.length === 0 ? (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <p>No prayers yet. Add your first prayer!</p>\n        </div>\n      ) : filteredPrayers.length === 0 ? (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <p>No prayers match your search</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {filteredPrayers.map(prayer => (\n            <div \n              key={prayer.id} \n              className=\"p-3 rounded-lg border border-border bg-card hover-elevate\"\n              data-testid={`prayer-item-${prayer.id}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <input \n                  type=\"checkbox\" \n                  checked={prayer.isAnswered} \n                  onChange={() => answerMutation.mutate({ id: prayer.id, isAnswered: !prayer.isAnswered })}\n                  className=\"mt-1\"\n                  data-testid={`checkbox-prayer-${prayer.id}`}\n                />\n                <div className=\"flex-1\">\n                  <p className={`text-foreground ${prayer.isAnswered ? 'line-through opacity-60' : ''}`}>\n                    {prayer.content}\n                  </p>\n                  {prayer.isAnswered && prayer.answeredAt && (\n                    <span className=\"text-xs text-green-600 dark:text-green-400 mt-1 block\">\n                      ✓ Answered {new Date(prayer.answeredAt).toLocaleDateString()}\n                    </span>\n                  )}\n                </div>\n                <Button\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => deleteMutation.mutate(prayer.id)}\n                  disabled={deleteMutation.isPending}\n                  data-testid={`button-delete-prayer-${prayer.id}`}\n                >\n                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n        <DialogContent data-testid=\"dialog-add-prayer\">\n          <DialogHeader>\n            <DialogTitle>Add Prayer</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <Textarea\n              placeholder=\"Write your prayer here...\"\n              value={newPrayerContent}\n              onChange={(e) => setNewPrayerContent(e.target.value)}\n              className=\"min-h-[120px]\"\n              data-testid=\"textarea-new-prayer\"\n            />\n            <div className=\"flex gap-2 justify-end\">\n              <Button variant=\"ghost\" onClick={() => setIsDialogOpen(false)} data-testid=\"button-cancel\">\n                Cancel\n              </Button>\n              <Button \n                onClick={handleAddPrayer} \n                disabled={!newPrayerContent.trim() || createMutation.isPending}\n                data-testid=\"button-submit-prayer\"\n              >\n                {createMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Adding...\n                  </>\n                ) : (\n                  'Add Prayer'\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":8219},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/examples/DesktopIcon.tsx":{"content":"import DesktopIcon from '../DesktopIcon';\n\nexport default function DesktopIconExample() {\n  return (\n    <div className=\"flex gap-4 p-8\">\n      <DesktopIcon icon=\"📖\" label=\"Bible\" onClick={() => console.log('Bible clicked')} />\n      <DesktopIcon icon=\"🙏\" label=\"Prayer\" onClick={() => console.log('Prayer clicked')} />\n      <DesktopIcon icon=\"💫\" label=\"Devotional\" onClick={() => console.log('Devotional clicked')} />\n    </div>\n  );\n}\n","size_bytes":447},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/Launchpad.tsx":{"content":"import { useState } from 'react';\nimport { X, Search } from 'lucide-react';\nimport { apps } from './DesktopDock';\n\ninterface LaunchpadProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onAppClick: (appId: string) => void;\n}\n\nexport default function Launchpad({ isOpen, onClose, onAppClick }: LaunchpadProps) {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  if (!isOpen) return null;\n\n  const filteredApps = apps.filter(app =>\n    app.name.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  const handleAppClick = (appId: string) => {\n    onAppClick(appId);\n    onClose();\n  };\n\n  return (\n    <div \n      className=\"fixed inset-0 z-[200] bg-black/40 backdrop-blur-sm flex items-center justify-center\"\n      onClick={onClose}\n      data-testid=\"launchpad-overlay\"\n    >\n      <div \n        className=\"w-full max-w-4xl mx-4 bg-white/90 dark:bg-slate-900/90 backdrop-blur-xl rounded-3xl p-8 shadow-2xl border border-amber-900/20 dark:border-amber-200/20\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        <div className=\"flex items-center justify-between mb-6\">\n          <h2 className=\"text-2xl font-bold text-foreground\">Available On Harmony</h2>\n          <button\n            onClick={onClose}\n            className=\"p-2 rounded-full hover:bg-amber-100 dark:hover:bg-amber-900/30 transition-colors\"\n            data-testid=\"button-close-launchpad\"\n          >\n            <X className=\"w-6 h-6 text-foreground\" />\n          </button>\n        </div>\n\n        <div className=\"relative mb-8\">\n          <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-amber-600/60\" />\n          <input\n            type=\"text\"\n            placeholder=\"Search apps...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full rounded-full border border-amber-200 dark:border-amber-800 bg-amber-50/70 dark:bg-slate-800/70 py-3 pl-12 pr-4 text-sm placeholder-amber-600/60 dark:placeholder-amber-400/60 transition-all duration-300 focus:bg-white dark:focus:bg-slate-900 focus:ring-2 focus:ring-amber-500 focus:border-transparent\"\n            data-testid=\"input-search-apps\"\n            autoFocus\n          />\n        </div>\n\n        <div className=\"grid grid-cols-4 sm:grid-cols-5 md:grid-cols-6 lg:grid-cols-7 gap-6\">\n          {filteredApps.map((app) => (\n            <button\n              key={app.id}\n              onClick={() => handleAppClick(app.id)}\n              className=\"flex flex-col items-center gap-3 p-3 rounded-xl hover:bg-amber-100/50 dark:hover:bg-amber-900/20 transition-all duration-200 hover:-translate-y-1\"\n              data-testid={`launchpad-app-${app.id}`}\n            >\n              <div className={`w-16 h-16 rounded-2xl bg-gradient-to-br ${app.color} flex items-center justify-center text-white shadow-lg`}>\n                {app.icon}\n              </div>\n              <span className=\"text-xs font-medium text-foreground text-center line-clamp-2\">\n                {app.name}\n              </span>\n            </button>\n          ))}\n        </div>\n\n        {filteredApps.length === 0 && (\n          <div className=\"text-center py-12 text-muted-foreground\">\n            No apps found matching \"{searchQuery}\"\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3295},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/examples/TopMenuBar.tsx":{"content":"import { useState } from 'react';\nimport { ThemeProvider } from '../ThemeProvider';\nimport TopMenuBar from '../TopMenuBar';\n\nexport default function TopMenuBarExample() {\n  const [viewMode, setViewMode] = useState<'tiles' | 'icons'>('tiles');\n\n  return (\n    <ThemeProvider>\n      <TopMenuBar \n        viewMode={viewMode} \n        onViewModeToggle={() => setViewMode(prev => prev === 'tiles' ? 'icons' : 'tiles')} \n      />\n    </ThemeProvider>\n  );\n}\n","size_bytes":452},"client/src/components/apps/BibleWindow.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Loader2, RefreshCw, Search, BookOpen, Heart } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { useState } from 'react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ninterface BibleVerse {\n  id: string;\n  userId: string;\n  book: string;\n  chapter: number;\n  verseStart: number;\n  verseEnd: number | null;\n  translation: string;\n  content: string | null;\n  notes: string | null;\n  createdAt: string;\n}\n\ninterface SearchResult {\n  reference: string;\n  text: string;\n  translation: string;\n}\n\nconst BIBLE_VERSIONS = [\n  { value: 'NIV', label: 'NIV' },\n  { value: 'KJV', label: 'KJV' },\n  { value: 'ESV', label: 'ESV' },\n  { value: 'NKJV', label: 'NKJV' },\n  { value: 'NLT', label: 'NLT' },\n  { value: 'NASB', label: 'NASB' },\n];\n\nconst BIBLE_BOOKS = [\n  // Old Testament\n  'Genesis', 'Exodus', 'Leviticus', 'Numbers', 'Deuteronomy',\n  'Joshua', 'Judges', 'Ruth', '1 Samuel', '2 Samuel',\n  '1 Kings', '2 Kings', '1 Chronicles', '2 Chronicles',\n  'Ezra', 'Nehemiah', 'Esther', 'Job', 'Psalms', 'Proverbs',\n  'Ecclesiastes', 'Song of Solomon', 'Isaiah', 'Jeremiah', 'Lamentations',\n  'Ezekiel', 'Daniel', 'Hosea', 'Joel', 'Amos',\n  'Obadiah', 'Jonah', 'Micah', 'Nahum', 'Habakkuk',\n  'Zephaniah', 'Haggai', 'Zechariah', 'Malachi',\n  // New Testament\n  'Matthew', 'Mark', 'Luke', 'John', 'Acts',\n  'Romans', '1 Corinthians', '2 Corinthians', 'Galatians', 'Ephesians',\n  'Philippians', 'Colossians', '1 Thessalonians', '2 Thessalonians',\n  '1 Timothy', '2 Timothy', 'Titus', 'Philemon',\n  'Hebrews', 'James', '1 Peter', '2 Peter',\n  '1 John', '2 John', '3 John', 'Jude', 'Revelation'\n];\n\nexport default function BibleWindow() {\n  const { toast } = useToast();\n  const [version, setVersion] = useState('NIV');\n  const [book, setBook] = useState('John');\n  const [chapter, setChapter] = useState('');\n  const [verse, setVerse] = useState('');\n  const [searchResult, setSearchResult] = useState<SearchResult | null>(null);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const { data: versesData, isLoading } = useQuery<{ data: BibleVerse[] }>({\n    queryKey: ['/api/bible-verses']\n  });\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/bible-verses/generate');\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bible-verses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      toast({ title: 'New verse generated!', description: 'Personalized for your spiritual journey.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to generate verse. Please try again.', variant: 'destructive' });\n    }\n  });\n\n  const searchMutation = useMutation({\n    mutationFn: async (query: string) => {\n      const res = await apiRequest('GET', `/api/bible-verses/search?query=${encodeURIComponent(query)}`);\n      const data = await res.json();\n      return data.data as SearchResult;\n    },\n    onSuccess: (data) => {\n      setSearchResult(data);\n      toast({ title: 'Verse found!', description: data.reference });\n    },\n    onError: () => {\n      toast({ title: 'Not found', description: 'Could not find that verse. Try \"John 3:16\" format.', variant: 'destructive' });\n    }\n  });\n\n  const saveMutation = useMutation({\n    mutationFn: async (result: SearchResult) => {\n      const res = await apiRequest('POST', '/api/bible-verses/save', {\n        reference: result.reference,\n        text: result.text,\n        translation: result.translation\n      });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bible-verses'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      setSearchResult(null);\n      setChapter('');\n      setVerse('');\n      toast({ title: 'Verse saved!', description: 'Added to your Bible verses.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to save verse. Please try again.', variant: 'destructive' });\n    }\n  });\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!book || !chapter) return;\n    \n    // Build search query from structured fields\n    let query = `${book} ${chapter}`;\n    if (verse) {\n      query += `:${verse}`;\n    }\n    query += ` ${version}`;\n    \n    setIsSearching(true);\n    try {\n      await searchMutation.mutateAsync(query);\n    } finally {\n      setIsSearching(false);\n    }\n  };\n\n  const handleSaveSearchResult = () => {\n    if (searchResult) {\n      saveMutation.mutate(searchResult);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const latestVerse = versesData?.data?.[0];\n\n  return (\n    <Tabs defaultValue=\"personalized\" className=\"w-full\">\n      <TabsList className=\"grid w-full grid-cols-2\">\n        <TabsTrigger value=\"personalized\" data-testid=\"tab-personalized-verse\">\n          <BookOpen className=\"w-4 h-4 mr-2\" />\n          Personalized Verse\n        </TabsTrigger>\n        <TabsTrigger value=\"search\" data-testid=\"tab-search-verse\">\n          <Search className=\"w-4 h-4 mr-2\" />\n          Search Verses\n        </TabsTrigger>\n      </TabsList>\n\n      <TabsContent value=\"personalized\" className=\"space-y-6 mt-6\">\n        {!latestVerse ? (\n          <div className=\"space-y-6 text-center\">\n            <div>\n              <h2 className=\"text-xl font-serif font-semibold text-foreground mb-2\">Daily Verse</h2>\n              <p className=\"text-sm text-muted-foreground mb-4\">Get a personalized Bible verse for today</p>\n            </div>\n            <Button\n              onClick={() => generateMutation.mutate()}\n              disabled={generateMutation.isPending}\n              data-testid=\"button-generate-verse\"\n            >\n              {generateMutation.isPending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Generating...\n                </>\n              ) : (\n                <>\n                  <RefreshCw className=\"mr-2 h-4 w-4\" />\n                  Get Today's Verse\n                </>\n              )}\n            </Button>\n          </div>\n        ) : (\n          <>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-serif font-semibold text-foreground\" data-testid=\"text-verse-reference\">\n                  {latestVerse.book} {latestVerse.chapter}:{latestVerse.verseStart}\n                  {latestVerse.verseEnd ? `-${latestVerse.verseEnd}` : ''}\n                </h2>\n                <span className=\"text-sm text-muted-foreground\">{latestVerse.translation}</span>\n              </div>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={() => generateMutation.mutate()}\n                disabled={generateMutation.isPending}\n                data-testid=\"button-refresh-verse\"\n              >\n                {generateMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <RefreshCw className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\" data-testid=\"text-verse-content\">\n              {/* Actual Verse Content */}\n              {latestVerse.content && (\n                <div className=\"p-6 bg-background border border-border rounded-lg\">\n                  <p className=\"text-lg font-serif leading-relaxed text-foreground italic\">\n                    \"{latestVerse.content}\"\n                  </p>\n                </div>\n              )}\n\n              {/* AI Personalization */}\n              <div className=\"p-4 bg-primary/10 border border-primary/20 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground mb-2\">\n                  ✨ AI-Personalized Verse Recommendation\n                </p>\n                <p className=\"text-base font-semibold text-foreground\">\n                  {latestVerse.book} {latestVerse.chapter}:{latestVerse.verseStart}\n                  {latestVerse.verseEnd ? `-${latestVerse.verseEnd}` : ''}\n                </p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  This verse was personalized based on your spiritual journey, moods, and prayer patterns.\n                </p>\n              </div>\n\n              {/* Previous Reflection (AI's reasoning) */}\n              {latestVerse.notes && (\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <p className=\"text-sm font-medium text-foreground mb-1\">Previous reflection:</p>\n                  <p className=\"text-sm text-muted-foreground\">{latestVerse.notes}</p>\n                </div>\n              )}\n            </div>\n          </>\n        )}\n      </TabsContent>\n\n      <TabsContent value=\"search\" className=\"space-y-6 mt-6\">\n        <div className=\"space-y-4\">\n          <div>\n            <h2 className=\"text-xl font-serif font-semibold text-foreground mb-2\">Search Bible Verses</h2>\n            <p className=\"text-sm text-muted-foreground\">\n              Select book, chapter, and verse to find any Bible passage\n            </p>\n          </div>\n\n          <form onSubmit={handleSearch} className=\"flex flex-wrap gap-2\">\n            <Select value={version} onValueChange={setVersion}>\n              <SelectTrigger className=\"w-[100px]\" data-testid=\"select-bible-version\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {BIBLE_VERSIONS.map((v) => (\n                  <SelectItem key={v.value} value={v.value}>\n                    {v.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={book} onValueChange={setBook}>\n              <SelectTrigger className=\"w-[160px]\" data-testid=\"select-bible-book\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {BIBLE_BOOKS.map((b) => (\n                  <SelectItem key={b} value={b}>\n                    {b}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"number\"\n              placeholder=\"Chapter\"\n              value={chapter}\n              onChange={(e) => setChapter(e.target.value)}\n              disabled={isSearching}\n              data-testid=\"input-chapter\"\n              className=\"w-[100px]\"\n              min=\"1\"\n            />\n\n            <Input\n              type=\"text\"\n              placeholder=\"Verse (optional)\"\n              value={verse}\n              onChange={(e) => setVerse(e.target.value)}\n              disabled={isSearching}\n              data-testid=\"input-verse\"\n              className=\"w-[140px]\"\n            />\n\n            <Button \n              type=\"submit\" \n              disabled={isSearching || !chapter}\n              data-testid=\"button-search-verse\"\n              className=\"bg-amber-600 hover:bg-amber-700 text-white\"\n            >\n              {isSearching ? (\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n              ) : (\n                'Go'\n              )}\n            </Button>\n          </form>\n\n          {searchResult && (\n            <div className=\"space-y-4 border border-border rounded-lg p-6 bg-background\" data-testid=\"search-result\">\n              <div className=\"flex items-start justify-between\">\n                <div>\n                  <h3 className=\"text-lg font-serif font-semibold text-foreground\">\n                    {searchResult.reference}\n                  </h3>\n                  <span className=\"text-sm text-muted-foreground\">{searchResult.translation}</span>\n                </div>\n                <Button\n                  size=\"sm\"\n                  onClick={handleSaveSearchResult}\n                  disabled={saveMutation.isPending}\n                  data-testid=\"button-save-verse\"\n                >\n                  {saveMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Saving...\n                    </>\n                  ) : (\n                    <>\n                      <Heart className=\"mr-2 h-4 w-4\" />\n                      Save Verse\n                    </>\n                  )}\n                </Button>\n              </div>\n              \n              <p className=\"text-base font-serif leading-relaxed text-foreground italic\">\n                \"{searchResult.text}\"\n              </p>\n            </div>\n          )}\n\n          {!searchResult && !isSearching && (\n            <div className=\"text-center py-12 border border-dashed border-border rounded-lg\">\n              <Search className=\"w-12 h-12 mx-auto mb-4 text-muted-foreground opacity-50\" />\n              <p className=\"text-sm text-muted-foreground\">\n                Search for a Bible verse to get started\n              </p>\n            </div>\n          )}\n        </div>\n      </TabsContent>\n    </Tabs>\n  );\n}\n","size_bytes":13642},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/Window.tsx":{"content":"import { X, Minus, Maximize2 } from 'lucide-react';\nimport { useState, useRef, useEffect } from 'react';\n\ninterface WindowProps {\n  appId: string;\n  title: string;\n  children: React.ReactNode;\n  onClose: () => void;\n  initialPosition?: { x: number; y: number };\n  initialSize?: { width: number; height: number };\n}\n\nexport default function Window({ \n  appId, \n  title, \n  children, \n  onClose,\n  initialPosition = { x: 100, y: 100 },\n  initialSize = { width: 500, height: 550 }\n}: WindowProps) {\n  const [position, setPosition] = useState(initialPosition);\n  const [size, setSize] = useState(initialSize);\n  const [isDragging, setIsDragging] = useState(false);\n  const [isResizing, setIsResizing] = useState(false);\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\n  const windowRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleMouseMove = (e: MouseEvent) => {\n      if (isDragging) {\n        setPosition({\n          x: e.clientX - dragStart.x,\n          y: e.clientY - dragStart.y\n        });\n      } else if (isResizing) {\n        setSize({\n          width: Math.max(320, e.clientX - position.x),\n          height: Math.max(200, e.clientY - position.y)\n        });\n      }\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n      setIsResizing(false);\n    };\n\n    if (isDragging || isResizing) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, isResizing, dragStart, position]);\n\n  const handleDragStart = (e: React.MouseEvent) => {\n    setIsDragging(true);\n    setDragStart({\n      x: e.clientX - position.x,\n      y: e.clientY - position.y\n    });\n  };\n\n  const handleResizeStart = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsResizing(true);\n  };\n\n  return (\n    <div\n      ref={windowRef}\n      data-testid={`window-${appId}`}\n      className=\"absolute flex flex-col rounded-2xl shadow-2xl overflow-hidden bg-[rgba(245,241,232,0.7)] dark:bg-[rgba(26,20,16,0.7)] backdrop-blur-2xl border border-amber-500/25 dark:border-amber-500/20\"\n      style={{\n        left: `${position.x}px`,\n        top: `${position.y}px`,\n        width: `${size.width}px`,\n        height: `${size.height}px`,\n        minWidth: '320px',\n        minHeight: '200px',\n        zIndex: 1000\n      }}\n    >\n      <div \n        className=\"flex items-center justify-between h-11 bg-amber-100/80 dark:bg-amber-900/80 border-b border-amber-900/20 dark:border-amber-200/20 px-4 cursor-move\"\n        onMouseDown={handleDragStart}\n        data-testid={`window-header-${appId}`}\n      >\n        <h3 className=\"text-sm font-medium text-amber-900 dark:text-amber-100\">{title}</h3>\n        <div className=\"flex items-center gap-2\">\n          <button \n            onClick={onClose}\n            data-testid={`button-minimize-${appId}`}\n            className=\"w-3 h-3 rounded-full bg-[#c9a961] hover:opacity-80 transition-opacity\"\n          />\n          <button \n            onClick={onClose}\n            data-testid={`button-maximize-${appId}`}\n            className=\"w-3 h-3 rounded-full bg-[#87ceeb] hover:opacity-80 transition-opacity flex items-center justify-center\"\n          >\n            <Maximize2 className=\"w-2 h-2 text-white opacity-0 hover:opacity-100\" />\n          </button>\n          <button \n            onClick={onClose}\n            data-testid={`button-close-${appId}`}\n            className=\"w-3 h-3 rounded-full bg-red-500 hover:opacity-80 transition-opacity flex items-center justify-center\"\n          >\n            <X className=\"w-2 h-2 text-white opacity-0 hover:opacity-100\" />\n          </button>\n        </div>\n      </div>\n      <div className=\"flex-1 overflow-auto p-4\" data-testid={`window-content-${appId}`}>\n        {children}\n      </div>\n      <div \n        className=\"absolute bottom-0 right-0 w-5 h-5 cursor-se-resize\"\n        onMouseDown={handleResizeStart}\n        data-testid={`resize-handle-${appId}`}\n      />\n    </div>\n  );\n}\n","size_bytes":4153},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 40 17% 91%;\n\n  --foreground: 24 45% 18%;\n\n  --border: 40 20% 80%;\n\n  --card: 40 17% 88%;\n\n  --card-foreground: 24 45% 18%;\n\n  --card-border: 40 20% 78%;\n\n  --sidebar: 44 20% 85%;\n\n  --sidebar-foreground: 24 45% 18%;\n\n  --sidebar-border: 44 22% 76%;\n\n  --sidebar-primary: 42 43% 58%;\n\n  --sidebar-primary-foreground: 40 17% 91%;\n\n  --sidebar-accent: 44 18% 78%;\n\n  --sidebar-accent-foreground: 24 45% 18%;\n\n  --sidebar-ring: 42 43% 58%;\n\n  --popover: 44 18% 82%;\n\n  --popover-foreground: 24 45% 18%;\n\n  --popover-border: 44 20% 74%;\n\n  --primary: 42 43% 32%;\n\n  --primary-foreground: 40 17% 95%;\n\n  --secondary: 44 15% 76%;\n\n  --secondary-foreground: 24 45% 18%;\n\n  --muted: 44 12% 79%;\n\n  --muted-foreground: 24 35% 28%;\n\n  --accent: 44 10% 82%;\n\n  --accent-foreground: 24 45% 18%;\n\n  --destructive: 0 72% 35%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 40 25% 70%;\n  --ring: 42 43% 58%;\n  --chart-1: 262 52% 47%;\n  --chart-2: 197 71% 45%;\n  --chart-3: 142 71% 35%;\n  --chart-4: 30 80% 48%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: 'Crimson Text', serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 30 20% 8%;\n\n  --foreground: 40 17% 91%;\n\n  --border: 30 20% 18%;\n\n  --card: 30 20% 11%;\n\n  --card-foreground: 40 17% 91%;\n\n  --card-border: 30 20% 20%;\n\n  --sidebar: 36 22% 14%;\n\n  --sidebar-foreground: 40 17% 91%;\n\n  --sidebar-border: 36 20% 22%;\n\n  --sidebar-primary: 42 43% 58%;\n\n  --sidebar-primary-foreground: 30 20% 8%;\n\n  --sidebar-accent: 36 18% 22%;\n\n  --sidebar-accent-foreground: 40 17% 91%;\n\n  --sidebar-ring: 42 43% 58%;\n\n  --popover: 36 20% 19%;\n\n  --popover-foreground: 40 17% 91%;\n\n  --popover-border: 36 20% 27%;\n\n  --primary: 42 43% 28%;\n\n  --primary-foreground: 40 17% 95%;\n\n  --secondary: 36 15% 24%;\n\n  --secondary-foreground: 40 17% 91%;\n\n  --muted: 36 12% 21%;\n\n  --muted-foreground: 40 12% 72%;\n\n  --accent: 36 10% 18%;\n\n  --accent-foreground: 40 17% 91%;\n\n  --destructive: 0 72% 32%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 36 20% 30%;\n  --ring: 42 43% 58%;\n  --chart-1: 262 80% 65%;\n  --chart-2: 197 71% 65%;\n  --chart-3: 142 71% 55%;\n  --chart-4: 30 80% 60%;\n  --chart-5: 340 82% 62%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Tile View Grid Sizes */\n  .tile-lg {\n    grid-column: span 2;\n    grid-row: span 2;\n  }\n  .tile-tall {\n    grid-row: span 2;\n  }\n  .tile-wide {\n    grid-column: span 2;\n  }\n  .tile-small {\n    grid-column: span 1;\n    grid-row: span 1;\n  }\n}","size_bytes":11158},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/examples/Window.tsx":{"content":"import Window from '../Window';\n\nexport default function WindowExample() {\n  return (\n    <div className=\"relative h-screen\">\n      <Window \n        appId=\"bible\" \n        title=\"Bible\" \n        onClose={() => console.log('Window closed')}\n        initialPosition={{ x: 50, y: 50 }}\n      >\n        <div className=\"space-y-4\">\n          <h2 className=\"text-xl font-serif font-semibold text-foreground\">John 3:16</h2>\n          <p className=\"font-serif text-foreground leading-relaxed\">\n            For God so loved the world that he gave his one and only Son, that whoever believes in him shall not perish but have eternal life.\n          </p>\n        </div>\n      </Window>\n    </div>\n  );\n}\n","size_bytes":693},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/apps/GuidesWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Send, Loader2, ArrowLeft, History, MessageSquare } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Guide {\n  id: string;\n  name: string;\n  description: string;\n  emoji: string;\n  systemPrompt: string;\n}\n\ninterface Conversation {\n  id: string;\n  userId: string;\n  guideId: string;\n  title: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Message {\n  id: string;\n  conversationId: string;\n  role: 'user' | 'assistant';\n  content: string;\n  createdAt: string;\n}\n\nexport default function GuidesWindow() {\n  const { toast } = useToast();\n  const [selectedGuide, setSelectedGuide] = useState<Guide | null>(null);\n  const [activeConversation, setActiveConversation] = useState<Conversation | null>(null);\n  const [messageInput, setMessageInput] = useState('');\n  const [showHistory, setShowHistory] = useState(false);\n\n  const { data: guidesData, isLoading: guidesLoading, error: guidesError } = useQuery<{ data: Guide[] }>({\n    queryKey: ['/api/guides']\n  });\n\n  const { data: conversationsData } = useQuery<{ data: Conversation[] }>({\n    queryKey: ['/api/conversations'],\n    enabled: !!selectedGuide\n  });\n\n  if (guidesError) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load spiritual guides</p>\n          <p className=\"text-sm text-muted-foreground\">{String(guidesError)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const { data: messagesData, isLoading: messagesLoading } = useQuery<{ data: Message[] }>({\n    queryKey: activeConversation ? [`/api/conversations/${activeConversation.id}/messages`] : ['disabled'],\n    enabled: !!activeConversation\n  });\n\n  const createConversationMutation = useMutation({\n    mutationFn: async ({ guideId, guideName }: { guideId: string; guideName: string }) => {\n      const res = await apiRequest('POST', '/api/conversations', { \n        guideId, \n        title: `Chat with ${guideName}` \n      });\n      return res.json();\n    },\n    onSuccess: (result) => {\n      setActiveConversation(result.data);\n      setShowHistory(false);\n      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n    }\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const res = await apiRequest('POST', `/api/conversations/${activeConversation?.id}/messages`, { content });\n      return res.json();\n    },\n    onSuccess: () => {\n      if (activeConversation) {\n        queryClient.invalidateQueries({ \n          queryKey: [`/api/conversations/${activeConversation.id}/messages`] \n        });\n      }\n      setMessageInput('');\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to send message.', variant: 'destructive' });\n    }\n  });\n\n  const handleGuideSelect = (guide: Guide) => {\n    setSelectedGuide(guide);\n    setShowHistory(false);\n    createConversationMutation.mutate({ guideId: guide.id, guideName: guide.name });\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    setActiveConversation(conversation);\n    setShowHistory(false);\n  };\n\n  const handleNewConversation = () => {\n    if (selectedGuide) {\n      createConversationMutation.mutate({ guideId: selectedGuide.id, guideName: selectedGuide.name });\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (messageInput.trim() && activeConversation) {\n      sendMessageMutation.mutate(messageInput);\n    }\n  };\n\n  const handleBack = () => {\n    setSelectedGuide(null);\n    setActiveConversation(null);\n    setShowHistory(false);\n  };\n\n  if (guidesLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const guides = guidesData?.data || [];\n  const conversations = conversationsData?.data || [];\n\n  // Get conversation counts per guide\n  const getConversationCount = (guideId: string) => {\n    return conversations.filter(c => c.guideId === guideId).length;\n  };\n\n  // Guide selection view\n  if (!selectedGuide) {\n    return (\n      <div className=\"space-y-4\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Spiritual Guides</h2>\n        <p className=\"text-sm text-muted-foreground\">Choose a guide to start a conversation</p>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {guides.map(guide => {\n            const count = getConversationCount(guide.id);\n            return (\n              <button\n                key={guide.id}\n                onClick={() => handleGuideSelect(guide)}\n                data-testid={`button-guide-${guide.id}`}\n                className=\"p-3 rounded-lg border border-border bg-card hover-elevate active-elevate-2 text-left\"\n              >\n                <div className=\"text-2xl mb-1\">{guide.emoji}</div>\n                <div className=\"flex items-center justify-between mb-1\">\n                  <div className=\"text-sm font-medium text-foreground\">{guide.name}</div>\n                  {count > 0 && (\n                    <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                      <MessageSquare className=\"w-3 h-3\" />\n                      <span>{count}</span>\n                    </div>\n                  )}\n                </div>\n                <div className=\"text-xs text-muted-foreground mt-1\">{guide.description}</div>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n\n  // Get conversations for current guide\n  const guideConversations = conversations.filter(c => c.guideId === selectedGuide.id);\n  \n  // Show history view\n  if (showHistory) {\n    return (\n      <div className=\"space-y-4 h-full flex flex-col\">\n        <div className=\"flex items-center gap-3\">\n          <Button size=\"icon\" variant=\"ghost\" onClick={() => setShowHistory(false)} data-testid=\"button-back-to-chat\">\n            <ArrowLeft className=\"h-4 w-4\" />\n          </Button>\n          <div className=\"flex-1\">\n            <h2 className=\"text-lg font-semibold text-foreground\">Conversation History</h2>\n            <p className=\"text-xs text-muted-foreground\">{selectedGuide.emoji} {selectedGuide.name}</p>\n          </div>\n          <Button size=\"sm\" onClick={handleNewConversation} data-testid=\"button-new-conversation\">\n            New Chat\n          </Button>\n        </div>\n        \n        <div className=\"flex-1 overflow-auto space-y-2\">\n          {guideConversations.length === 0 ? (\n            <p className=\"text-sm text-muted-foreground text-center py-8\">No conversations yet</p>\n          ) : (\n            guideConversations.map(conv => (\n              <button\n                key={conv.id}\n                onClick={() => handleSelectConversation(conv)}\n                className={`w-full p-3 rounded-lg border border-border text-left hover-elevate ${\n                  activeConversation?.id === conv.id ? 'bg-primary/10 border-primary' : 'bg-card'\n                }`}\n                data-testid={`history-conversation-${conv.id}`}\n              >\n                <div className=\"text-sm font-medium text-foreground line-clamp-1\">{conv.title}</div>\n                <div className=\"text-xs text-muted-foreground mt-1\">\n                  {new Date(conv.createdAt).toLocaleDateString()}\n                </div>\n              </button>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  }\n  \n  // Chat view\n  const messages = messagesData?.data || [];\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center gap-3\">\n        <Button size=\"icon\" variant=\"ghost\" onClick={handleBack} data-testid=\"button-back-to-guides\">\n          <ArrowLeft className=\"h-4 w-4\" />\n        </Button>\n        <div className=\"flex-1\">\n          <h2 className=\"text-lg font-semibold text-foreground\">{selectedGuide.emoji} {selectedGuide.name}</h2>\n          <p className=\"text-xs text-muted-foreground\">{selectedGuide.description}</p>\n        </div>\n        {guideConversations.length > 0 && (\n          <Button \n            size=\"icon\" \n            variant=\"ghost\" \n            onClick={() => setShowHistory(true)}\n            data-testid=\"button-show-history\"\n          >\n            <History className=\"h-4 w-4\" />\n          </Button>\n        )}\n      </div>\n\n      <div className=\"flex-1 flex flex-col min-h-0\">\n        {messagesLoading || createConversationMutation.isPending ? (\n          <div className=\"flex items-center justify-center flex-1\">\n            <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n          </div>\n        ) : (\n          <>\n            <div className=\"flex-1 overflow-auto space-y-3 mb-3\" data-testid=\"messages-container\">\n              {messages.length === 0 ? (\n                <div className=\"text-center text-muted-foreground text-sm py-8\">\n                  Start a conversation with your spiritual guide\n                </div>\n              ) : (\n                messages.map(msg => (\n                  <div\n                    key={msg.id}\n                    className={`p-3 rounded-lg max-w-[85%] ${\n                      msg.role === 'user'\n                        ? 'ml-auto bg-primary text-primary-foreground'\n                        : 'bg-card border border-border'\n                    }`}\n                    data-testid={`message-${msg.role}-${msg.id}`}\n                  >\n                    <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                  </div>\n                ))\n              )}\n              {sendMessageMutation.isPending && (\n                <div className=\"p-3 rounded-lg bg-card border border-border max-w-[85%]\">\n                  <Loader2 className=\"h-4 w-4 animate-spin text-primary\" />\n                </div>\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={messageInput}\n                onChange={(e) => setMessageInput(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleSendMessage()}\n                placeholder=\"Ask your spiritual guide...\"\n                disabled={sendMessageMutation.isPending}\n                data-testid=\"input-guide-message\"\n                className=\"flex-1 px-3 py-2 rounded-lg border border-input bg-background text-foreground focus:ring-2 focus:ring-ring disabled:opacity-50\"\n              />\n              <Button\n                onClick={handleSendMessage}\n                disabled={!messageInput.trim() || sendMessageMutation.isPending}\n                data-testid=\"button-send-message\"\n              >\n                {sendMessageMutation.isPending ? (\n                  <Loader2 className=\"w-5 h-5 animate-spin\" />\n                ) : (\n                  <Send className=\"w-5 h-5\" />\n                )}\n              </Button>\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11152},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/DesktopBackground.tsx":{"content":"import DesktopBackground from '../DesktopBackground';\n\nexport default function DesktopBackgroundExample() {\n  return (\n    <DesktopBackground>\n      <div className=\"flex items-center justify-center h-full\">\n        <p className=\"text-2xl font-semibold text-foreground\">Desktop Background</p>\n      </div>\n    </DesktopBackground>\n  );\n}\n","size_bytes":337},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/components/examples/DesktopDock.tsx":{"content":"import DesktopDock from '../DesktopDock';\n\nexport default function DesktopDockExample() {\n  return (\n    <div className=\"h-32 flex items-end justify-center\">\n      <DesktopDock onAppClick={(id) => console.log('App clicked:', id)} />\n    </div>\n  );\n}\n","size_bytes":251},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, uuid, timestamp, boolean, integer, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users Table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  email: varchar(\"email\", { length: 255 }).notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: varchar(\"name\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Events Table (Central tracking)\nexport const events = pgTable(\"events\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  eventType: varchar(\"event_type\", { length: 50 }).notNull(),\n  eventData: jsonb(\"event_data\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  userCreatedIdx: index(\"idx_events_user_created\").on(table.userId, table.createdAt),\n}));\n\n// Moods Table\nexport const moods = pgTable(\"moods\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  moodType: varchar(\"mood_type\", { length: 50 }).notNull(),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Prayer Journals Table\nexport const prayerJournals = pgTable(\"prayer_journals\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  content: text(\"content\").notNull(),\n  isAnswered: boolean(\"is_answered\").default(false),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  answeredAt: timestamp(\"answered_at\"),\n});\n\n// Devotionals Table\nexport const devotionals = pgTable(\"devotionals\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }),\n  content: text(\"content\").notNull(),\n  scriptureReference: varchar(\"scripture_reference\", { length: 100 }),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bible Verses Table\nexport const bibleVerses = pgTable(\"bible_verses\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  book: varchar(\"book\", { length: 50 }).notNull(),\n  chapter: integer(\"chapter\").notNull(),\n  verseStart: integer(\"verse_start\").notNull(),\n  verseEnd: integer(\"verse_end\"),\n  translation: varchar(\"translation\", { length: 10 }).default(\"NIV\"),\n  content: text(\"content\"), // The actual verse text\n  notes: text(\"notes\"),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sync Notes Table\nexport const syncNotes = pgTable(\"sync_notes\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  content: text(\"content\").notNull(),\n  aiTags: text(\"ai_tags\").array(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Spiritual Guides Table\nexport const spiritualGuides = pgTable(\"spiritual_guides\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  systemPrompt: text(\"system_prompt\").notNull(),\n  avatarEmoji: varchar(\"avatar_emoji\", { length: 10 }).default(\"🕊️\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Conversations Table\nexport const conversations = pgTable(\"conversations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  guideId: uuid(\"guide_id\").references(() => spiritualGuides.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages Table\nexport const messages = pgTable(\"messages\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  conversationId: uuid(\"conversation_id\").references(() => conversations.id, { onDelete: \"cascade\" }).notNull(),\n  role: varchar(\"role\", { length: 20 }).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Prayer Chains Table\nexport const prayerChains = pgTable(\"prayer_chains\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  content: text(\"content\").notNull(),\n  isAnswered: boolean(\"is_answered\").default(false),\n  followerCount: integer(\"follower_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Prayer Chain Comments Table\nexport const prayerChainComments = pgTable(\"prayer_chain_comments\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  prayerChainId: uuid(\"prayer_chain_id\").references(() => prayerChains.id, { onDelete: \"cascade\" }).notNull(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Videos Table\nexport const videos = pgTable(\"videos\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  youtubeId: varchar(\"youtube_id\", { length: 50 }).notNull(),\n  youtubeUrl: text(\"youtube_url\").notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  channelName: varchar(\"channel_name\", { length: 255 }),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Songs Table\nexport const songs = pgTable(\"songs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  youtubeId: varchar(\"youtube_id\", { length: 50 }).notNull(),\n  youtubeUrl: text(\"youtube_url\").notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  artist: varchar(\"artist\", { length: 255 }),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sermons Table\nexport const sermons = pgTable(\"sermons\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  youtubeId: varchar(\"youtube_id\", { length: 50 }).notNull(),\n  youtubeUrl: text(\"youtube_url\").notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  churchName: varchar(\"church_name\", { length: 255 }),\n  duration: varchar(\"duration\", { length: 20 }),\n  thumbnailUrl: text(\"thumbnail_url\"),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Resources Table\nexport const resources = pgTable(\"resources\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  url: text(\"url\").notNull(),\n  resourceType: varchar(\"resource_type\", { length: 50 }).notNull(),\n  author: varchar(\"author\", { length: 255 }),\n  tags: text(\"tags\").array(),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  typeIdx: index(\"idx_resources_type\").on(table.userId, table.resourceType),\n}));\n\n// Flourishing Scores Table\nexport const flourishingScores = pgTable(\"flourishing_scores\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  healthScore: integer(\"health_score\"),\n  relationshipsScore: integer(\"relationships_score\"),\n  financesScore: integer(\"finances_score\"),\n  meaningScore: integer(\"meaning_score\"),\n  happinessScore: integer(\"happiness_score\"),\n  characterScore: integer(\"character_score\"),\n  faithScore: integer(\"faith_score\"),\n  overallIndex: integer(\"overall_index\"),\n  aiInsight: text(\"ai_insight\"),\n  personalizationRunId: uuid(\"personalization_run_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Personalization Runs Table\nexport const personalizationRuns = pgTable(\"personalization_runs\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  engineType: varchar(\"engine_type\", { length: 50 }).notNull(),\n  inputData: jsonb(\"input_data\"),\n  outputData: jsonb(\"output_data\"),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Faith Circles Table (Community discussion groups/forums)\nexport const faithCircles = pgTable(\"faith_circles\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  creatorId: uuid(\"creator_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { length: 50 }).notNull(),\n  memberCount: integer(\"member_count\").default(0),\n  isPublic: boolean(\"is_public\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  categoryIdx: index(\"idx_faith_circles_category\").on(table.category),\n}));\n\n// Faith Circle Members Table (Track who joined which circles)\nexport const faithCircleMembers = pgTable(\"faith_circle_members\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  circleId: uuid(\"circle_id\").references(() => faithCircles.id, { onDelete: \"cascade\" }).notNull(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  joinedAt: timestamp(\"joined_at\").defaultNow(),\n}, (table) => ({\n  circleMembersIdx: index(\"idx_circle_members\").on(table.circleId, table.userId),\n}));\n\n// Faith Circle Posts Table (Forum-style discussions)\nexport const faithCirclePosts = pgTable(\"faith_circle_posts\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  circleId: uuid(\"circle_id\").references(() => faithCircles.id, { onDelete: \"cascade\" }).notNull(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  circlePostsIdx: index(\"idx_circle_posts\").on(table.circleId, table.createdAt),\n}));\n\n// Financial Tables\n// Transactions Table (All financial activities)\nexport const financialTransactions = pgTable(\"financial_transactions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  transactionType: varchar(\"transaction_type\", { length: 50 }).notNull(), // tithe, generosity, debt_payment, income, expense\n  amount: varchar(\"amount\", { length: 20 }).notNull(), // Stored as string to avoid decimal precision issues\n  category: varchar(\"category\", { length: 100 }), // groceries, rent, mission, offering\n  spiritualTag: varchar(\"spiritual_tag\", { length: 100 }), // mission, blessing, stewardship\n  purpose: text(\"purpose\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  userTypeIdx: index(\"idx_transactions_user_type\").on(table.userId, table.transactionType),\n}));\n\n// Generosity Commitments Table\nexport const generosityCommitments = pgTable(\"generosity_commitments\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  goal: text(\"goal\").notNull(), // Description of the commitment\n  targetAmount: varchar(\"target_amount\", { length: 20 }), // Optional financial target\n  currentAmount: varchar(\"current_amount\", { length: 20 }).default(\"0\"),\n  frequency: varchar(\"frequency\", { length: 50 }), // weekly, monthly, one-time\n  status: varchar(\"status\", { length: 20 }).default(\"active\"), // active, completed, cancelled\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Financial Goals Table\nexport const financialGoals = pgTable(\"financial_goals\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  goalType: varchar(\"goal_type\", { length: 50 }).notNull(), // debt_free, emergency_fund, tithing_increase, sabbath_margin\n  description: text(\"description\"),\n  targetAmount: varchar(\"target_amount\", { length: 20 }),\n  currentProgress: integer(\"current_progress\").default(0), // Percentage 0-100\n  spiritualPurpose: text(\"spiritual_purpose\"), // Why this matters for faith\n  deadline: timestamp(\"deadline\"),\n  isCompleted: boolean(\"is_completed\").default(false),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Stewardship Reflections Table (Prayer/journaling about finances)\nexport const stewardshipReflections = pgTable(\"stewardship_reflections\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  content: text(\"content\").notNull(),\n  reflectionType: varchar(\"reflection_type\", { length: 50 }).notNull(), // gratitude, concern, discernment, commitment\n  relatedTransactionId: uuid(\"related_transaction_id\").references(() => financialTransactions.id, { onDelete: \"set null\" }),\n  aiInsight: text(\"ai_insight\"), // AI-generated spiritual guidance\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Budget Categories Table\nexport const budgetCategories = pgTable(\"budget_categories\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  plannedAmount: varchar(\"planned_amount\", { length: 20 }).notNull(),\n  categoryType: varchar(\"category_type\", { length: 50 }).notNull(), // income, tithe, expense, savings\n  spiritualAlignment: text(\"spiritual_alignment\"), // How this aligns with faith values\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert Schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });\nexport const insertEventSchema = createInsertSchema(events).omit({ id: true, createdAt: true });\nexport const insertMoodSchema = createInsertSchema(moods).omit({ id: true, createdAt: true });\nexport const insertPrayerJournalSchema = createInsertSchema(prayerJournals).omit({ id: true, createdAt: true, answeredAt: true });\nexport const insertDevotionalSchema = createInsertSchema(devotionals).omit({ id: true, createdAt: true });\nexport const insertBibleVerseSchema = createInsertSchema(bibleVerses).omit({ id: true, createdAt: true });\nexport const insertSyncNoteSchema = createInsertSchema(syncNotes).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertConversationSchema = createInsertSchema(conversations).omit({ id: true, createdAt: true, updatedAt: true });\nexport const insertMessageSchema = createInsertSchema(messages).omit({ id: true, createdAt: true });\nexport const insertPrayerChainSchema = createInsertSchema(prayerChains).omit({ id: true, createdAt: true });\nexport const insertPrayerChainCommentSchema = createInsertSchema(prayerChainComments).omit({ id: true, createdAt: true });\nexport const insertVideoSchema = createInsertSchema(videos).omit({ id: true, createdAt: true });\nexport const insertSongSchema = createInsertSchema(songs).omit({ id: true, createdAt: true });\nexport const insertSermonSchema = createInsertSchema(sermons).omit({ id: true, createdAt: true });\nexport const insertResourceSchema = createInsertSchema(resources).omit({ id: true, createdAt: true });\nexport const insertFlourishingScoreSchema = createInsertSchema(flourishingScores).omit({ id: true, createdAt: true });\nexport const insertPersonalizationRunSchema = createInsertSchema(personalizationRuns).omit({ id: true, createdAt: true });\nexport const insertFaithCircleSchema = createInsertSchema(faithCircles).omit({ id: true, createdAt: true, updatedAt: true, memberCount: true });\nexport const insertFaithCircleMemberSchema = createInsertSchema(faithCircleMembers).omit({ id: true, joinedAt: true });\nexport const insertFaithCirclePostSchema = createInsertSchema(faithCirclePosts).omit({ id: true, createdAt: true });\nexport const insertFinancialTransactionSchema = createInsertSchema(financialTransactions).omit({ id: true, createdAt: true });\nexport const insertGenerosityCommitmentSchema = createInsertSchema(generosityCommitments).omit({ id: true, createdAt: true, completedAt: true });\nexport const insertFinancialGoalSchema = createInsertSchema(financialGoals).omit({ id: true, createdAt: true, completedAt: true });\nexport const insertStewardshipReflectionSchema = createInsertSchema(stewardshipReflections).omit({ id: true, createdAt: true });\nexport const insertBudgetCategorySchema = createInsertSchema(budgetCategories).omit({ id: true, createdAt: true });\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\n\nexport type InsertMood = z.infer<typeof insertMoodSchema>;\nexport type Mood = typeof moods.$inferSelect;\n\nexport type InsertPrayerJournal = z.infer<typeof insertPrayerJournalSchema>;\nexport type PrayerJournal = typeof prayerJournals.$inferSelect;\n\nexport type InsertDevotional = z.infer<typeof insertDevotionalSchema>;\nexport type Devotional = typeof devotionals.$inferSelect;\n\nexport type InsertBibleVerse = z.infer<typeof insertBibleVerseSchema>;\nexport type BibleVerse = typeof bibleVerses.$inferSelect;\n\nexport type InsertSyncNote = z.infer<typeof insertSyncNoteSchema>;\nexport type SyncNote = typeof syncNotes.$inferSelect;\n\nexport type SpiritualGuide = typeof spiritualGuides.$inferSelect;\n\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Conversation = typeof conversations.$inferSelect;\n\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\n\nexport type InsertPrayerChain = z.infer<typeof insertPrayerChainSchema>;\nexport type PrayerChain = typeof prayerChains.$inferSelect;\n\nexport type InsertPrayerChainComment = z.infer<typeof insertPrayerChainCommentSchema>;\nexport type PrayerChainComment = typeof prayerChainComments.$inferSelect;\n\nexport type InsertVideo = z.infer<typeof insertVideoSchema>;\nexport type Video = typeof videos.$inferSelect;\n\nexport type InsertSong = z.infer<typeof insertSongSchema>;\nexport type Song = typeof songs.$inferSelect;\n\nexport type InsertSermon = z.infer<typeof insertSermonSchema>;\nexport type Sermon = typeof sermons.$inferSelect;\n\nexport type InsertResource = z.infer<typeof insertResourceSchema>;\nexport type Resource = typeof resources.$inferSelect;\n\nexport type InsertFlourishingScore = z.infer<typeof insertFlourishingScoreSchema>;\nexport type FlourishingScore = typeof flourishingScores.$inferSelect;\n\nexport type InsertPersonalizationRun = z.infer<typeof insertPersonalizationRunSchema>;\nexport type PersonalizationRun = typeof personalizationRuns.$inferSelect;\n\nexport type InsertFaithCircle = z.infer<typeof insertFaithCircleSchema>;\nexport type FaithCircle = typeof faithCircles.$inferSelect;\n\nexport type InsertFaithCircleMember = z.infer<typeof insertFaithCircleMemberSchema>;\nexport type FaithCircleMember = typeof faithCircleMembers.$inferSelect;\n\nexport type InsertFaithCirclePost = z.infer<typeof insertFaithCirclePostSchema>;\nexport type FaithCirclePost = typeof faithCirclePosts.$inferSelect;\n\nexport type InsertFinancialTransaction = z.infer<typeof insertFinancialTransactionSchema>;\nexport type FinancialTransaction = typeof financialTransactions.$inferSelect;\n\nexport type InsertGenerosityCommitment = z.infer<typeof insertGenerosityCommitmentSchema>;\nexport type GenerosityCommitment = typeof generosityCommitments.$inferSelect;\n\nexport type InsertFinancialGoal = z.infer<typeof insertFinancialGoalSchema>;\nexport type FinancialGoal = typeof financialGoals.$inferSelect;\n\nexport type InsertStewardshipReflection = z.infer<typeof insertStewardshipReflectionSchema>;\nexport type StewardshipReflection = typeof stewardshipReflections.$inferSelect;\n\nexport type InsertBudgetCategory = z.infer<typeof insertBudgetCategorySchema>;\nexport type BudgetCategory = typeof budgetCategories.$inferSelect;\n","size_bytes":21076},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/apps/LibraryWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { BookOpen, Headphones, FileText, Loader2, RefreshCw, ExternalLink, Search, Globe, FileDown, GraduationCap, Newspaper, Rss } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Resource {\n  id: string;\n  userId: string;\n  title: string;\n  description: string | null;\n  url: string | null;\n  resourceType: string;\n  author?: string | null;\n  createdAt: string;\n}\n\nconst resourceTypes = [\n  { value: 'all', label: 'All Resources', icon: FileText },\n  { value: 'article', label: 'Articles', icon: Newspaper },\n  { value: 'blog', label: 'Blogs', icon: Rss },\n  { value: 'website', label: 'Websites', icon: Globe },\n  { value: 'pdf', label: 'PDFs', icon: FileDown },\n  { value: 'book', label: 'Books', icon: BookOpen },\n  { value: 'podcast', label: 'Podcasts', icon: Headphones },\n  { value: 'study', label: 'Studies', icon: GraduationCap },\n];\n\nconst getIcon = (type: string) => {\n  const resourceType = resourceTypes.find(rt => rt.value === type);\n  return resourceType?.icon || FileText;\n};\n\nexport default function LibraryWindow() {\n  const { toast } = useToast();\n  const [selectedFilter, setSelectedFilter] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data: resourcesData, isLoading, error } = useQuery<{ data: Resource[] }>({\n    queryKey: ['/api/resources']\n  });\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load resources</p>\n          <p className=\"text-sm text-muted-foreground\">{String(error)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/resources/generate');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/resources'] });\n      toast({ title: 'Library updated!', description: 'New personalized resources added.' });\n    }\n  });\n\n  const readMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('POST', `/api/resources/${id}/read`);\n      return res.json();\n    }\n  });\n\n  const handleOpen = (resource: Resource) => {\n    readMutation.mutate(resource.id);\n    if (resource.url) {\n      window.open(resource.url, '_blank');\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const resources = resourcesData?.data || [];\n\n  // Filter and search logic\n  const filteredResources = resources.filter(resource => {\n    // Filter by type\n    const matchesFilter = selectedFilter === 'all' || resource.resourceType === selectedFilter;\n    \n    // Filter by search query (title, description, author)\n    const matchesSearch = !searchQuery || \n      resource.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (resource.description ?? '').toLowerCase().includes(searchQuery.toLowerCase()) ||\n      (resource.author ?? '').toLowerCase().includes(searchQuery.toLowerCase());\n    \n    return matchesFilter && matchesSearch;\n  });\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Library</h2>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-generate-resources\"\n        >\n          {generateMutation.isPending ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n          )}\n          Refresh\n        </Button>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search title, description, or author...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-resources\"\n        />\n      </div>\n\n      {/* Filter Buttons */}\n      <div className=\"flex flex-wrap gap-2\">\n        {resourceTypes.map(type => {\n          const Icon = type.icon;\n          const isActive = selectedFilter === type.value;\n          return (\n            <Button\n              key={type.value}\n              size=\"sm\"\n              variant={isActive ? \"default\" : \"outline\"}\n              onClick={() => setSelectedFilter(type.value)}\n              data-testid={`filter-${type.value}`}\n              className=\"text-xs\"\n            >\n              <Icon className=\"h-3 w-3 mr-1\" />\n              {type.label}\n            </Button>\n          );\n        })}\n      </div>\n\n      <div className=\"flex-1 overflow-auto space-y-2\">\n        {resources.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">No resources yet</p>\n            <Button onClick={() => generateMutation.mutate()} data-testid=\"button-get-resources\">\n              Get Personalized Resources\n            </Button>\n          </div>\n        ) : filteredResources.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No resources match your filters</p>\n          </div>\n        ) : (\n          filteredResources.map(resource => {\n            const Icon = getIcon(resource.resourceType);\n            return (\n              <div\n                key={resource.id}\n                className=\"flex items-start gap-3 p-3 rounded-lg border border-border bg-card hover-elevate\"\n                data-testid={`resource-item-${resource.id}`}\n              >\n                <div className=\"p-2 rounded-lg bg-muted\">\n                  <Icon className=\"w-5 h-5 text-muted-foreground\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"font-medium text-foreground text-sm\">{resource.title}</h3>\n                  {resource.description && (\n                    <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">{resource.description}</p>\n                  )}\n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <span className=\"inline-block px-2 py-0.5 text-xs rounded-md bg-secondary text-secondary-foreground capitalize\">\n                      {resource.resourceType}\n                    </span>\n                    {resource.author && (\n                      <span className=\"text-xs text-muted-foreground\">by {resource.author}</span>\n                    )}\n                  </div>\n                </div>\n                {resource.url && (\n                  <Button\n                    size=\"icon\"\n                    variant=\"ghost\"\n                    onClick={() => handleOpen(resource)}\n                    data-testid={`button-open-${resource.id}`}\n                  >\n                    <ExternalLink className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":7595},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('harmony-theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('harmony-theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1196},"client/src/components/apps/DevotionalWindow.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, RefreshCw } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Devotional {\n  id: string;\n  title: string;\n  content: string;\n  scriptureReference: string | null;\n  createdAt: string;\n}\n\nexport default function DevotionalWindow() {\n  const { toast } = useToast();\n\n  const { data: devotionalsData, isLoading } = useQuery<{ data: Devotional[] }>({\n    queryKey: ['/api/devotionals']\n  });\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/devotionals/generate');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/devotionals'] });\n      toast({ title: 'New devotional!', description: 'Personalized for your spiritual journey.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to generate devotional.', variant: 'destructive' });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const latest = devotionalsData?.data?.[0];\n\n  if (!latest) {\n    return (\n      <div className=\"space-y-6 text-center\">\n        <div>\n          <h2 className=\"text-2xl font-serif font-semibold text-foreground mb-2\">Daily Devotional</h2>\n          <p className=\"text-sm text-muted-foreground mb-4\">Get your personalized devotional</p>\n        </div>\n        <Button\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-generate-devotional\"\n        >\n          {generateMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Generating...\n            </>\n          ) : (\n            <>\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Generate Devotional\n            </>\n          )}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex-1\">\n          <h2 className=\"text-2xl font-serif font-semibold text-foreground mb-2\" data-testid=\"text-devotional-title\">{latest.title}</h2>\n          <p className=\"text-sm text-muted-foreground\">Daily Devotional</p>\n        </div>\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-refresh-devotional\"\n        >\n          {generateMutation.isPending ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n\n      <div className=\"space-y-4 font-serif text-foreground leading-relaxed\" data-testid=\"text-devotional-content\">\n        {latest.content.split('\\n').map((paragraph, i) => (\n          <p key={i}>{paragraph}</p>\n        ))}\n      </div>\n\n      {latest.scriptureReference && (\n        <div className=\"p-4 rounded-lg bg-amber-50 dark:bg-amber-950/30 border border-amber-200 dark:border-amber-800\">\n          <p className=\"text-sm font-semibold text-amber-900 dark:text-amber-100 mb-1\">Scripture Reference</p>\n          <p className=\"text-sm text-amber-800 dark:text-amber-200 font-serif\" data-testid=\"text-scripture-reference\">{latest.scriptureReference}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3685},"client/src/components/TopMenuBar.tsx":{"content":"import { Bell, Sun, Moon, RefreshCw, Search, BookOpen, MessageCircle, FileText, Lightbulb, Video, Music, Mic, Book, Users } from 'lucide-react';\nimport { useTheme } from './ThemeProvider';\nimport { useEffect, useState, useRef } from 'react';\nimport { queryClient } from '@/lib/queryClient';\nimport { useQuery } from '@tanstack/react-query';\n\ninterface SearchResult {\n  id: string;\n  type: string;\n  title: string;\n  subtitle: string | null;\n  content: string | null;\n}\n\ninterface TopMenuBarProps {\n  viewMode: 'tiles' | 'icons';\n  onViewModeToggle: () => void;\n}\n\nconst getEntityIcon = (type: string) => {\n  switch (type) {\n    case 'bible': return BookOpen;\n    case 'prayer': return MessageCircle;\n    case 'devotional': return Book;\n    case 'note': return FileText;\n    case 'guide': return Lightbulb;\n    case 'video': return Video;\n    case 'song': return Music;\n    case 'sermon': return Mic;\n    case 'resource': return Book;\n    case 'circle': return Users;\n    default: return Search;\n  }\n};\n\nconst getEntityLabel = (type: string) => {\n  switch (type) {\n    case 'bible': return 'Bible Verse';\n    case 'prayer': return 'Prayer';\n    case 'devotional': return 'Devotional';\n    case 'note': return 'Note';\n    case 'guide': return 'Spiritual Guide';\n    case 'video': return 'Video';\n    case 'song': return 'Song';\n    case 'sermon': return 'Sermon';\n    case 'resource': return 'Resource';\n    case 'circle': return 'Faith Circle';\n    default: return 'Result';\n  }\n};\n\nexport default function TopMenuBar({ viewMode, onViewModeToggle }: TopMenuBarProps) {\n  const { theme, toggleTheme } = useTheme();\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isSearchFocused, setIsSearchFocused] = useState(false);\n  const [isNotificationsOpen, setIsNotificationsOpen] = useState(false);\n  const searchRef = useRef<HTMLDivElement>(null);\n  const notificationsRef = useRef<HTMLDivElement>(null);\n  \n  useEffect(() => {\n    // Ensure theme is applied on mount\n  }, [theme]);\n\n  // Click outside to close search results\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (searchRef.current && !searchRef.current.contains(event.target as Node)) {\n        setIsSearchFocused(false);\n      }\n      if (notificationsRef.current && !notificationsRef.current.contains(event.target as Node)) {\n        setIsNotificationsOpen(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  const { data: searchResults } = useQuery<{ data: { results: SearchResult[], query: string } }>({\n    queryKey: [`/api/search?q=${encodeURIComponent(searchQuery)}`],\n    enabled: searchQuery.length >= 2\n  });\n\n  // Fetch recent activity for notifications\n  const { data: devotionalsData } = useQuery<{ data: any[] }>({\n    queryKey: ['/api/devotionals']\n  });\n  \n  const { data: prayersData } = useQuery<{ data: any[] }>({\n    queryKey: ['/api/prayers']\n  });\n  \n  const { data: videosData } = useQuery<{ data: any[] }>({\n    queryKey: ['/api/videos']\n  });\n\n  // Group results by entity type\n  const groupedResults = searchResults?.data?.results.reduce((acc, result) => {\n    if (!acc[result.type]) {\n      acc[result.type] = [];\n    }\n    acc[result.type].push(result);\n    return acc;\n  }, {} as Record<string, SearchResult[]>) || {};\n\n  // Create notifications from recent activity\n  const notifications = [\n    ...(devotionalsData?.data?.slice(0, 1).map(d => ({\n      id: d.id,\n      type: 'devotional',\n      title: 'New Devotional Available',\n      message: d.title,\n      time: 'Just now',\n      icon: '✨'\n    })) || []),\n    ...(prayersData?.data?.filter(p => p.isAnswered).slice(0, 2).map(p => ({\n      id: p.id,\n      type: 'prayer',\n      title: 'Prayer Answered',\n      message: p.content.substring(0, 50) + '...',\n      time: 'Recently',\n      icon: '🙏'\n    })) || []),\n    ...(videosData?.data?.slice(0, 2).map(v => ({\n      id: v.id,\n      type: 'video',\n      title: 'New Video Recommendation',\n      message: v.title,\n      time: 'Today',\n      icon: '📺'\n    })) || [])\n  ];\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    \n    // Invalidate all queries to refresh all data\n    await queryClient.invalidateQueries();\n    \n    // Keep spinning for at least 500ms for visual feedback\n    setTimeout(() => {\n      setIsRefreshing(false);\n    }, 500);\n  };\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-[100] h-14 border-b border-amber-900/20 dark:border-amber-200/20 bg-white/80 dark:bg-slate-900/80 backdrop-blur-md shadow-sm\">\n      <div className=\"h-full w-full px-6\">\n        <div className=\"grid grid-cols-3 items-center h-full gap-4\">\n          <div className=\"flex items-center space-x-3 justify-start\">\n            <svg className=\"h-8 w-8 text-amber-700 dark:text-amber-400\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n              <path d=\"M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5zm0 18c-3.86-.94-7-5.14-7-9V8.3l7-3.11 7 3.11V11c0 3.86-3.14 8.06-7 9zm-2-8h4v2h-4v-2zm0-4h4v2h-4V8z\"/>\n            </svg>\n            <span className=\"font-bold text-lg text-amber-800 dark:text-amber-300 hidden sm:inline\">Harmony</span>\n          </div>\n\n          <div className=\"flex items-center justify-center\">\n            <div ref={searchRef} className=\"relative w-full max-w-2xl\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-amber-600/60\" />\n              <input \n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onFocus={() => setIsSearchFocused(true)}\n                placeholder=\"Search scriptures, devotionals, prayers...\" \n                data-testid=\"input-search\"\n                className=\"w-full rounded-full border border-amber-200 dark:border-amber-800 bg-amber-50/70 dark:bg-slate-800/70 py-2 pl-10 pr-4 text-sm placeholder-amber-600/60 dark:placeholder-amber-400/60 transition-all duration-300 focus:bg-white dark:focus:bg-slate-900 focus:ring-2 focus:ring-amber-500 focus:border-transparent\"\n              />\n              \n              {/* Search Results Dropdown */}\n              {isSearchFocused && searchQuery.length >= 2 && searchResults?.data?.results && searchResults.data.results.length > 0 && (\n                <div className=\"absolute top-full left-0 right-0 mt-2 bg-white dark:bg-slate-900 border border-amber-200 dark:border-amber-800 rounded-lg shadow-lg max-h-96 overflow-y-auto z-50\">\n                  {Object.entries(groupedResults).map(([type, results]) => {\n                    const Icon = getEntityIcon(type);\n                    return (\n                      <div key={type} className=\"border-b border-amber-100 dark:border-amber-900 last:border-0\">\n                        <div className=\"sticky top-0 bg-amber-50/95 dark:bg-slate-800/95 backdrop-blur-sm px-4 py-2 border-b border-amber-200/50 dark:border-amber-800/50\">\n                          <div className=\"flex items-center gap-2\">\n                            <Icon className=\"h-4 w-4 text-amber-600 dark:text-amber-400\" />\n                            <span className=\"text-xs font-semibold text-amber-800 dark:text-amber-300 uppercase tracking-wide\">\n                              {getEntityLabel(type)} ({results.length})\n                            </span>\n                          </div>\n                        </div>\n                        {results.map((result) => (\n                          <button\n                            key={result.id}\n                            data-testid={`search-result-${result.type}-${result.id}`}\n                            className=\"w-full flex items-start gap-3 px-4 py-3 hover-elevate active-elevate-2 border-b border-amber-50 dark:border-amber-950 last:border-0 text-left transition-colors\"\n                            onClick={() => {\n                              setSearchQuery('');\n                              setIsSearchFocused(false);\n                            }}\n                          >\n                            <div className=\"flex-1 min-w-0\">\n                              <p className=\"text-sm font-medium text-foreground truncate\">\n                                {result.title}\n                              </p>\n                              {result.subtitle && (\n                                <p className=\"text-xs text-muted-foreground truncate mt-0.5\">\n                                  {result.subtitle}\n                                </p>\n                              )}\n                              {result.content && (\n                                <p className=\"text-xs text-muted-foreground line-clamp-2 mt-1\">\n                                  {result.content}\n                                </p>\n                              )}\n                            </div>\n                          </button>\n                        ))}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n              \n              {/* No Results */}\n              {isSearchFocused && searchQuery.length >= 2 && searchResults?.data?.results && searchResults.data.results.length === 0 && (\n                <div className=\"absolute top-full left-0 right-0 mt-2 bg-white dark:bg-slate-900 border border-amber-200 dark:border-amber-800 rounded-lg shadow-lg p-4 z-50\">\n                  <p className=\"text-sm text-muted-foreground text-center\">No results found for \"{searchQuery}\"</p>\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4 justify-end\">\n            <label className=\"relative inline-block w-[50px] h-7\">\n              <input \n                type=\"checkbox\" \n                checked={viewMode === 'tiles'} \n                onChange={onViewModeToggle}\n                data-testid=\"toggle-view-mode\"\n                className=\"opacity-0 w-0 h-0 peer\"\n              />\n              <span className=\"absolute cursor-pointer inset-0 bg-gray-300 transition-all duration-400 rounded-full before:absolute before:content-[''] before:h-5 before:w-5 before:left-1 before:bottom-1 before:bg-white before:transition-all before:duration-400 before:rounded-full peer-checked:bg-[#c9a961] peer-checked:before:translate-x-[22px]\" />\n            </label>\n\n            <button \n              onClick={handleRefresh}\n              disabled={isRefreshing}\n              className=\"p-2 rounded-full text-amber-700 dark:text-amber-400 hover-elevate active-elevate-2 transition-colors disabled:opacity-50\"\n              data-testid=\"button-refresh\"\n            >\n              <RefreshCw className={`h-6 w-6 ${isRefreshing ? 'animate-spin' : ''}`} />\n            </button>\n\n            <div ref={notificationsRef} className=\"relative\">\n              <button \n                onClick={() => setIsNotificationsOpen(!isNotificationsOpen)}\n                className=\"relative p-2 rounded-full text-amber-700 dark:text-amber-400 hover-elevate active-elevate-2 transition-colors\"\n                data-testid=\"button-notifications\"\n              >\n                <Bell className=\"h-6 w-6\" />\n                {notifications.length > 0 && (\n                  <span className=\"absolute top-1 right-1 h-2 w-2 bg-red-500 rounded-full\"></span>\n                )}\n              </button>\n\n              {/* Notifications Dropdown */}\n              {isNotificationsOpen && (\n                <div className=\"absolute top-full right-0 mt-2 w-80 bg-white dark:bg-slate-900 border border-amber-200 dark:border-amber-800 rounded-lg shadow-lg max-h-96 overflow-y-auto z-50\">\n                  <div className=\"p-3 border-b border-amber-200 dark:border-amber-800\">\n                    <h3 className=\"font-semibold text-sm text-foreground\">Notifications</h3>\n                  </div>\n                  \n                  {notifications.length > 0 ? (\n                    <div>\n                      {notifications.map((notification) => (\n                        <button\n                          key={notification.id}\n                          data-testid={`notification-${notification.type}-${notification.id}`}\n                          className=\"w-full flex items-start gap-3 px-4 py-3 hover-elevate active-elevate-2 border-b border-amber-100 dark:border-amber-900 last:border-0 text-left transition-colors\"\n                          onClick={() => setIsNotificationsOpen(false)}\n                        >\n                          <div className=\"text-2xl flex-shrink-0\">{notification.icon}</div>\n                          <div className=\"flex-1 min-w-0\">\n                            <p className=\"text-sm font-medium text-foreground\">\n                              {notification.title}\n                            </p>\n                            <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                              {notification.message}\n                            </p>\n                            <p className=\"text-xs text-amber-600 dark:text-amber-400 mt-1\">\n                              {notification.time}\n                            </p>\n                          </div>\n                        </button>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"p-8 text-center\">\n                      <Bell className=\"h-12 w-12 mx-auto text-muted-foreground/50 mb-3\" />\n                      <p className=\"text-sm text-muted-foreground\">No new notifications</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n            \n            <button \n              onClick={toggleTheme}\n              className=\"p-2 rounded-full text-amber-700 dark:text-amber-400 hover-elevate active-elevate-2 transition-colors\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === 'light' ? (\n                <Sun className=\"h-6 w-6\" />\n              ) : (\n                <Moon className=\"h-6 w-6\" />\n              )}\n            </button>\n            \n            <img \n              src=\"https://i.pravatar.cc/150?u=user\" \n              alt=\"Profile\" \n              className=\"h-9 w-9 rounded-full ring-2 ring-amber-400 cursor-pointer\"\n              data-testid=\"img-profile\"\n            />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":14524},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/apps/MoodWindow.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, ArrowLeft } from 'lucide-react';\n\ninterface Mood {\n  id: string;\n  moodType: string;\n  notes: string | null;\n  createdAt: string;\n}\n\nconst moodOptions = [\n  { emoji: '😊', label: 'Joyful', color: 'from-yellow-400 to-orange-400', type: 'joyful' },\n  { emoji: '😌', label: 'Peaceful', color: 'from-blue-400 to-cyan-400', type: 'peaceful' },\n  { emoji: '🙏', label: 'Grateful', color: 'from-green-400 to-emerald-400', type: 'grateful' },\n  { emoji: '😢', label: 'Sad', color: 'from-gray-400 to-slate-400', type: 'sad' },\n  { emoji: '😰', label: 'Anxious', color: 'from-purple-400 to-violet-400', type: 'anxious' },\n  { emoji: '😤', label: 'Angry', color: 'from-red-400 to-pink-400', type: 'angry' },\n];\n\nexport default function MoodWindow() {\n  const { toast } = useToast();\n  const [selectedMood, setSelectedMood] = useState<typeof moodOptions[0] | null>(null);\n  const [notes, setNotes] = useState('');\n\n  const { data: moodsData, isLoading } = useQuery<{ data: Mood[] }>({\n    queryKey: ['/api/moods']\n  });\n\n  const moodMutation = useMutation({\n    mutationFn: async ({ moodType, notes }: { moodType: string; notes: string }) => {\n      // Post mood\n      const moodRes = await apiRequest('POST', '/api/moods', { moodType, notes });\n      await moodRes.json();\n      \n      // Immediately trigger flourishing recalculation\n      const flourishingRes = await apiRequest('POST', '/api/flourishing/generate');\n      await flourishingRes.json();\n      \n      return { success: true };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/moods'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      setSelectedMood(null);\n      setNotes('');\n      toast({ title: 'Mood tracked!', description: 'Your flourishing score has been updated.' });\n    }\n  });\n\n  const handleMoodClick = (mood: typeof moodOptions[0]) => {\n    setSelectedMood(mood);\n  };\n\n  const handleSaveMood = () => {\n    if (selectedMood) {\n      moodMutation.mutate({ moodType: selectedMood.type, notes });\n    }\n  };\n\n  const handleBack = () => {\n    setSelectedMood(null);\n    setNotes('');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const recentMoods = moodsData?.data?.slice(0, 3) || [];\n\n  // Step 2: Selected mood - ask why they feel this way\n  if (selectedMood) {\n    return (\n      <div className=\"space-y-6\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleBack}\n          data-testid=\"button-back\"\n          className=\"mb-2\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Back\n        </Button>\n\n        <div className=\"text-center\">\n          <div className={`inline-flex p-6 rounded-2xl bg-gradient-to-br ${selectedMood.color} text-white mb-4`}>\n            <div className=\"text-6xl\">{selectedMood.emoji}</div>\n          </div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">You're feeling {selectedMood.label}</h2>\n          <p className=\"text-sm text-muted-foreground\">Tell us more about what's on your heart...</p>\n        </div>\n\n        <div>\n          <label className=\"text-sm font-medium text-foreground block mb-2\">Why do you feel this way?</label>\n          <textarea \n            className=\"w-full h-32 p-3 rounded-lg border border-input bg-background text-foreground resize-none focus:ring-2 focus:ring-ring\"\n            placeholder=\"What's on your heart today...\"\n            value={notes}\n            onChange={(e) => setNotes(e.target.value)}\n            data-testid=\"textarea-mood-notes\"\n            autoFocus\n          />\n        </div>\n\n        <Button\n          onClick={handleSaveMood}\n          disabled={moodMutation.isPending}\n          data-testid=\"button-save-mood\"\n          className=\"w-full\"\n        >\n          {moodMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Saving...\n            </>\n          ) : (\n            'Save Mood'\n          )}\n        </Button>\n      </div>\n    );\n  }\n\n  // Step 1: Select mood\n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-xl font-semibold text-foreground\">How are you feeling today?</h2>\n      <div className=\"grid grid-cols-3 gap-3\">\n        {moodOptions.map(mood => (\n          <button\n            key={mood.label}\n            onClick={() => handleMoodClick(mood)}\n            data-testid={`button-mood-${mood.label.toLowerCase()}`}\n            className={`p-4 rounded-xl bg-gradient-to-br ${mood.color} text-white hover:-translate-y-1 transition-all duration-200 active-elevate-2`}\n          >\n            <div className=\"text-3xl mb-2\">{mood.emoji}</div>\n            <div className=\"text-sm font-medium\">{mood.label}</div>\n          </button>\n        ))}\n      </div>\n\n      {recentMoods.length > 0 && (\n        <div className=\"pt-4 border-t border-border\">\n          <h3 className=\"text-sm font-semibold text-foreground mb-2\">Recent Moods</h3>\n          <div className=\"space-y-2\">\n            {recentMoods.map(mood => (\n              <div key={mood.id} className=\"text-sm\">\n                <span className=\"font-medium capitalize\">{mood.moodType}</span>\n                {' • '}\n                <span className=\"text-muted-foreground\">\n                  {new Date(mood.createdAt).toLocaleDateString()}\n                </span>\n                {mood.notes && <p className=\"text-muted-foreground text-xs mt-1\">{mood.notes}</p>}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5936},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/DesktopIcon.tsx":{"content":"interface DesktopIconProps {\n  icon: React.ReactNode;\n  label: string;\n  onClick: () => void;\n}\n\nexport default function DesktopIcon({ icon, label, onClick }: DesktopIconProps) {\n  return (\n    <button\n      onClick={onClick}\n      data-testid={`desktop-icon-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n      className=\"flex flex-col items-center w-24 p-2 rounded-lg transition-all duration-200 hover:bg-amber-500/15 hover:-translate-y-0.5 active-elevate-2\"\n    >\n      <div className=\"text-5xl mb-2\">{icon}</div>\n      <span className=\"text-sm text-[#3d2817] dark:text-[#f5f1e8] font-medium text-center text-shadow-sm\">\n        {label}\n      </span>\n    </button>\n  );\n}\n","size_bytes":674},"client/src/components/apps/NotesWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Plus, Loader2, Trash2, Edit, Save, X, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { Badge } from '@/components/ui/badge';\n\ninterface Note {\n  id: string;\n  userId: string;\n  content: string;\n  aiTags: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport default function NotesWindow() {\n  const { toast } = useToast();\n  const [newNoteContent, setNewNoteContent] = useState('');\n  const [editingNoteId, setEditingNoteId] = useState<string | null>(null);\n  const [editContent, setEditContent] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data: notesData, isLoading, error } = useQuery<{ data: Note[] }>({\n    queryKey: ['/api/notes']\n  });\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load notes</p>\n          <p className=\"text-sm text-muted-foreground\">{String(error)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const createMutation = useMutation({\n    mutationFn: async (content: string) => {\n      const res = await apiRequest('POST', '/api/notes', { content });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setNewNoteContent('');\n      toast({ title: 'Note created!', description: 'AI tags have been generated for your note.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to create note.', variant: 'destructive' });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, content }: { id: string; content: string }) => {\n      const res = await apiRequest('PATCH', `/api/notes/${id}`, { content });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      setEditingNoteId(null);\n      setEditContent('');\n      toast({ title: 'Note updated!', description: 'Your changes have been saved.' });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('DELETE', `/api/notes/${id}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notes'] });\n      toast({ title: 'Note deleted!', description: 'The note has been removed.' });\n    }\n  });\n\n  const handleCreateNote = () => {\n    if (newNoteContent.trim()) {\n      createMutation.mutate(newNoteContent);\n    }\n  };\n\n  const handleStartEdit = (note: Note) => {\n    setEditingNoteId(note.id);\n    setEditContent(note.content);\n  };\n\n  const handleSaveEdit = (id: string) => {\n    if (editContent.trim()) {\n      updateMutation.mutate({ id, content: editContent });\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingNoteId(null);\n    setEditContent('');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const notes = notesData?.data || [];\n\n  // Filter notes by search query (content or AI tags)\n  const filteredNotes = notes.filter(note => \n    !searchQuery || \n    note.content.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    note.aiTags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Sync Notes</h2>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search notes or tags...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-notes\"\n        />\n      </div>\n\n      <div className=\"space-y-2\">\n        <textarea\n          value={newNoteContent}\n          onChange={(e) => setNewNoteContent(e.target.value)}\n          placeholder=\"Write a new note... (AI will auto-generate tags)\"\n          className=\"w-full h-20 p-3 rounded-lg border border-input bg-background text-foreground resize-none focus:ring-2 focus:ring-ring\"\n          data-testid=\"textarea-new-note\"\n        />\n        <Button\n          onClick={handleCreateNote}\n          disabled={!newNoteContent.trim() || createMutation.isPending}\n          className=\"w-full\"\n          data-testid=\"button-create-note\"\n        >\n          {createMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Creating & Tagging...\n            </>\n          ) : (\n            <>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Note\n            </>\n          )}\n        </Button>\n      </div>\n\n      <div className=\"flex-1 overflow-auto space-y-3\">\n        {notes.length === 0 ? (\n          <div className=\"text-center text-muted-foreground text-sm py-8\">\n            No notes yet. Create your first note above!\n          </div>\n        ) : filteredNotes.length === 0 ? (\n          <div className=\"text-center text-muted-foreground text-sm py-8\">\n            No notes match your search\n          </div>\n        ) : (\n          filteredNotes.map(note => (\n            <div\n              key={note.id}\n              className=\"p-4 rounded-lg border border-border bg-card\"\n              data-testid={`note-item-${note.id}`}\n            >\n              {editingNoteId === note.id ? (\n                <div className=\"space-y-3\">\n                  <textarea\n                    value={editContent}\n                    onChange={(e) => setEditContent(e.target.value)}\n                    className=\"w-full h-24 p-2 rounded-lg border border-input bg-background text-foreground resize-none focus:ring-2 focus:ring-ring\"\n                    data-testid={`textarea-edit-note-${note.id}`}\n                  />\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleSaveEdit(note.id)}\n                      disabled={updateMutation.isPending}\n                      data-testid={`button-save-note-${note.id}`}\n                    >\n                      {updateMutation.isPending ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <>\n                          <Save className=\"h-4 w-4 mr-1\" />\n                          Save\n                        </>\n                      )}\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={handleCancelEdit}\n                      data-testid={`button-cancel-edit-${note.id}`}\n                    >\n                      <X className=\"h-4 w-4 mr-1\" />\n                      Cancel\n                    </Button>\n                  </div>\n                </div>\n              ) : (\n                <>\n                  <div className=\"flex items-start justify-between gap-3 mb-3\">\n                    <p className=\"text-foreground flex-1 whitespace-pre-wrap\">{note.content}</p>\n                    <div className=\"flex gap-1\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => handleStartEdit(note)}\n                        data-testid={`button-edit-note-${note.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        onClick={() => deleteMutation.mutate(note.id)}\n                        disabled={deleteMutation.isPending}\n                        data-testid={`button-delete-note-${note.id}`}\n                      >\n                        <Trash2 className=\"h-4 w-4 text-destructive\" />\n                      </Button>\n                    </div>\n                  </div>\n                  {note.aiTags && note.aiTags.length > 0 && (\n                    <div className=\"flex gap-2 flex-wrap\">\n                      {note.aiTags.map((tag, i) => (\n                        <Badge key={i} variant=\"secondary\" data-testid={`tag-${tag}`}>\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":9025},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/Desktop.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { X, ChevronLeft } from 'lucide-react';\nimport DesktopBackground from './DesktopBackground';\nimport TopMenuBar from './TopMenuBar';\nimport DesktopDock, { apps } from './DesktopDock';\nimport DesktopIcon from './DesktopIcon';\nimport TileView from './TileView';\nimport Window from './Window';\nimport Launchpad from './Launchpad';\nimport RightSidebar from './RightSidebar';\nimport FlourishingWidget from './FlourishingWidget';\nimport { Button } from '@/components/ui/button';\n\nimport BibleWindow from './apps/BibleWindow';\nimport DevotionalWindow from './apps/DevotionalWindow';\nimport PrayerWindow from './apps/PrayerWindow';\nimport MoodWindow from './apps/MoodWindow';\nimport GuidesWindow from './apps/GuidesWindow';\nimport NotesWindow from './apps/NotesWindow';\nimport PrayerChainWindow from './apps/PrayerChainWindow';\nimport VideosWindow from './apps/VideosWindow';\nimport SongsWindow from './apps/SongsWindow';\nimport SermonsWindow from './apps/SermonsWindow';\nimport LibraryWindow from './apps/LibraryWindow';\nimport FlourishingWindow from './apps/FlourishingWindow';\nimport CalendarWindow from './apps/CalendarWindow';\nimport SettingsWindow from './apps/SettingsWindow';\nimport FaithCirclesWindow from './apps/FaithCirclesWindow';\n\nconst appComponents: Record<string, { component: React.ReactNode; title: string; icon: string }> = {\n  bible: { component: <BibleWindow />, title: 'Bible', icon: '📖' },\n  devotional: { component: <DevotionalWindow />, title: 'Devotional', icon: '💫' },\n  prayer: { component: <PrayerWindow />, title: 'Prayer Journal', icon: '🙏' },\n  mood: { component: <MoodWindow />, title: 'Mood Tracker', icon: '😊' },\n  guides: { component: <GuidesWindow />, title: 'Spiritual Guides', icon: '👥' },\n  notes: { component: <NotesWindow />, title: 'Sync Notes', icon: '📝' },\n  'prayer-chain': { component: <PrayerChainWindow />, title: 'Prayer Chain', icon: '🔗' },\n  'faith-circles': { component: <FaithCirclesWindow />, title: 'Faith Circles', icon: '⭕' },\n  videos: { component: <VideosWindow />, title: 'Videos', icon: '📺' },\n  songs: { component: <SongsWindow />, title: 'Songs', icon: '🎵' },\n  sermons: { component: <SermonsWindow />, title: 'Sermons', icon: '🎤' },\n  library: { component: <LibraryWindow />, title: 'Library', icon: '📚' },\n  flourishing: { component: <FlourishingWindow />, title: 'Flourishing Index', icon: '📊' },\n  calendar: { component: <CalendarWindow />, title: 'Calendar', icon: '📅' },\n  settings: { component: <SettingsWindow />, title: 'Settings', icon: '⚙️' },\n};\n\nexport default function Desktop() {\n  const [viewMode, setViewMode] = useState<'tiles' | 'icons'>('tiles');\n  const [openWindows, setOpenWindows] = useState<string[]>([]);\n  const [launchedApps, setLaunchedApps] = useState<string[]>([]);\n  const [isLaunchpadOpen, setIsLaunchpadOpen] = useState(false);\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [isWidgetVisible, setIsWidgetVisible] = useState(true);\n\n  // Check if flourishing data exists for widget\n  const { data: flourishingData } = useQuery<{ data: any | null }>({\n    queryKey: ['/api/flourishing']\n  });\n\n  const handleAppClick = (appId: string) => {\n    // Track launched apps\n    if (!launchedApps.includes(appId)) {\n      setLaunchedApps([...launchedApps, appId]);\n    }\n    \n    // Open window if not already open\n    if (!openWindows.includes(appId)) {\n      setOpenWindows([...openWindows, appId]);\n    }\n  };\n\n  const handleCloseWindow = (appId: string) => {\n    setOpenWindows(openWindows.filter(id => id !== appId));\n    \n    // Remove non-default apps from dock when closed\n    const defaultDockApps = ['bible', 'prayer', 'notes', 'calendar'];\n    if (!defaultDockApps.includes(appId)) {\n      setLaunchedApps(launchedApps.filter(id => id !== appId));\n    }\n  };\n\n  return (\n    <DesktopBackground>\n      <TopMenuBar \n        viewMode={viewMode} \n        onViewModeToggle={() => setViewMode(prev => prev === 'tiles' ? 'icons' : 'tiles')} \n      />\n\n      <main className=\"relative h-screen w-screen pt-14 pb-24 overflow-hidden\">\n        {viewMode === 'icons' ? (\n          <div className=\"flex h-full relative\">\n            {/* Left side: Desktop Icons */}\n            <div className={`flex-1 p-4 grid grid-flow-col auto-cols-max gap-x-4 gap-y-1 grid-rows-5 transition-all duration-300 ${\n              isSidebarOpen ? 'mr-80' : 'mr-0'\n            }`}>\n              {apps.map(app => (\n                <DesktopIcon\n                  key={app.id}\n                  icon={appComponents[app.id]?.icon || '📄'}\n                  label={app.name}\n                  onClick={() => handleAppClick(app.id)}\n                />\n              ))}\n            </div>\n            \n            {/* Middle: Flourishing Widget (only if data exists) */}\n            {flourishingData?.data && (\n              <>\n                {isWidgetVisible ? (\n                  <div className=\"absolute left-8 top-8 z-10\" data-testid=\"flourishing-widget-container\">\n                    <div className=\"relative\">\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full bg-white/80 dark:bg-slate-800/80 hover:bg-white dark:hover:bg-slate-800 z-10\"\n                        onClick={() => setIsWidgetVisible(false)}\n                        data-testid=\"button-close-widget\"\n                        aria-label=\"Close flourishing widget\"\n                        title=\"Close flourishing widget\"\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                      <FlourishingWidget />\n                    </div>\n                  </div>\n                ) : (\n                  <button\n                    onClick={() => setIsWidgetVisible(true)}\n                    className=\"absolute bottom-4 left-1/2 -translate-x-1/2 bg-amber-500 hover:bg-amber-600 text-white px-4 py-2 rounded-lg shadow-lg transition-all z-10 text-sm font-medium\"\n                    data-testid=\"button-show-widget\"\n                    aria-label=\"Show flourishing widget\"\n                    title=\"Show flourishing widget\"\n                  >\n                    Show Flourishing Widget\n                  </button>\n                )}\n              </>\n            )}\n          </div>\n        ) : (\n          <TileView onAppClick={handleAppClick} />\n        )}\n\n        {openWindows.map((appId, index) => {\n          const appConfig = appComponents[appId];\n          if (!appConfig) return null;\n\n          return (\n            <Window\n              key={appId}\n              appId={appId}\n              title={appConfig.title}\n              onClose={() => handleCloseWindow(appId)}\n              initialPosition={{ \n                x: 100 + (index * 40), \n                y: 100 + (index * 40) \n              }}\n            >\n              {appConfig.component}\n            </Window>\n          );\n        })}\n      </main>\n\n      {/* Right Sidebar - Outside main to avoid bottom padding */}\n      {viewMode === 'icons' && (\n        <div \n          className={`fixed top-14 right-0 bottom-0 w-80 border-l border-amber-200/30 dark:border-amber-800/30 bg-white/40 dark:bg-slate-900/40 backdrop-blur-sm transition-transform duration-300 ease-in-out z-20 ${\n            isSidebarOpen ? 'translate-x-0' : 'translate-x-full'\n          }`}\n        >\n          <div className=\"relative h-full\">\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"absolute top-2 left-2 h-6 w-6 z-10\"\n              onClick={() => setIsSidebarOpen(false)}\n              data-testid=\"button-close-sidebar\"\n              aria-label=\"Close sidebar\"\n              title=\"Close sidebar\"\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n            <RightSidebar />\n          </div>\n        </div>\n      )}\n\n      {/* Floating Reopen Button - Outside main */}\n      {viewMode === 'icons' && !isSidebarOpen && (\n        <button\n          onClick={() => setIsSidebarOpen(true)}\n          className=\"fixed top-1/2 right-0 -translate-y-1/2 bg-amber-500 hover:bg-amber-600 text-white p-3 rounded-l-lg shadow-lg transition-all z-30\"\n          data-testid=\"button-open-sidebar\"\n          aria-label=\"Open sidebar\"\n          title=\"Open sidebar\"\n        >\n          <ChevronLeft className=\"h-5 w-5\" />\n        </button>\n      )}\n\n      <DesktopDock \n        onAppClick={handleAppClick}\n        onLaunchpadClick={() => setIsLaunchpadOpen(true)}\n        activeApps={openWindows}\n        launchedApps={launchedApps}\n      />\n\n      <Launchpad\n        isOpen={isLaunchpadOpen}\n        onClose={() => setIsLaunchpadOpen(false)}\n        onAppClick={handleAppClick}\n      />\n    </DesktopBackground>\n  );\n}\n","size_bytes":8912},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/examples/Desktop.tsx":{"content":"import { ThemeProvider } from '../ThemeProvider';\nimport Desktop from '../Desktop';\n\nexport default function DesktopExample() {\n  return (\n    <ThemeProvider>\n      <Desktop />\n    </ThemeProvider>\n  );\n}\n","size_bytes":205},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/DesktopDock.tsx":{"content":"import { Book, Heart, MessageSquare, Smile, Users, FileText, Radio, Music, Video, BookOpen, BarChart3, Calendar, Settings, Grid3x3 } from 'lucide-react';\n\nexport interface AppConfig {\n  id: string;\n  name: string;\n  icon: React.ReactNode;\n  color: string;\n}\n\nexport const apps: AppConfig[] = [\n  { id: 'bible', name: 'Bible', icon: <Book className=\"w-8 h-8\" />, color: 'from-purple-500 to-indigo-600' },\n  { id: 'devotional', name: 'Devotional', icon: <Heart className=\"w-8 h-8\" />, color: 'from-green-500 to-emerald-600' },\n  { id: 'prayer', name: 'Prayer', icon: <MessageSquare className=\"w-8 h-8\" />, color: 'from-blue-500 to-cyan-600' },\n  { id: 'mood', name: 'Mood', icon: <Smile className=\"w-8 h-8\" />, color: 'from-yellow-500 to-orange-600' },\n  { id: 'guides', name: 'Guides', icon: <Users className=\"w-8 h-8\" />, color: 'from-amber-500 to-yellow-600' },\n  { id: 'notes', name: 'Notes', icon: <FileText className=\"w-8 h-8\" />, color: 'from-gray-500 to-slate-600' },\n  { id: 'prayer-chain', name: 'Prayer Chain', icon: <Radio className=\"w-8 h-8\" />, color: 'from-pink-500 to-rose-600' },\n  { id: 'videos', name: 'Videos', icon: <Video className=\"w-8 h-8\" />, color: 'from-red-500 to-pink-600' },\n  { id: 'songs', name: 'Songs', icon: <Music className=\"w-8 h-8\" />, color: 'from-indigo-500 to-purple-600' },\n  { id: 'sermons', name: 'Sermons', icon: <BookOpen className=\"w-8 h-8\" />, color: 'from-teal-500 to-cyan-600' },\n  { id: 'library', name: 'Library', icon: <BookOpen className=\"w-8 h-8\" />, color: 'from-violet-500 to-purple-600' },\n  { id: 'flourishing', name: 'Flourishing', icon: <BarChart3 className=\"w-8 h-8\" />, color: 'from-emerald-500 to-green-600' },\n  { id: 'calendar', name: 'Calendar', icon: <Calendar className=\"w-8 h-8\" />, color: 'from-sky-500 to-blue-600' },\n  { id: 'settings', name: 'Settings', icon: <Settings className=\"w-8 h-8\" />, color: 'from-stone-500 to-gray-600' },\n];\n\n// Default apps to show in dock (first 4 apps)\nconst defaultDockApps = ['bible', 'prayer', 'notes', 'calendar'];\n\ninterface DesktopDockProps {\n  onAppClick: (appId: string) => void;\n  onLaunchpadClick: () => void;\n  activeApps: string[];\n  launchedApps: string[];\n}\n\nexport default function DesktopDock({ onAppClick, onLaunchpadClick, activeApps = [], launchedApps = [] }: DesktopDockProps) {\n  // Combine default apps with launched apps (avoiding duplicates)\n  const dockApps = [...defaultDockApps];\n  \n  launchedApps.forEach(appId => {\n    if (!dockApps.includes(appId)) {\n      dockApps.push(appId);\n    }\n  });\n\n  const dockAppConfigs = dockApps\n    .map(appId => apps.find(app => app.id === appId))\n    .filter(Boolean) as AppConfig[];\n\n  return (\n    <div className=\"fixed bottom-4 left-1/2 -translate-x-1/2 z-[90] px-3 py-2 rounded-2xl bg-white/80 dark:bg-slate-900/80 backdrop-blur-md border border-amber-900/20 dark:border-amber-200/20 shadow-2xl\">\n      <div className=\"flex items-center gap-2\">\n        {/* Launchpad Icon - Always First */}\n        <button\n          onClick={onLaunchpadClick}\n          data-testid=\"dock-icon-launchpad\"\n          className=\"w-14 h-14 flex items-center justify-center rounded-xl bg-gradient-to-br from-amber-400 to-orange-500 text-white transition-all duration-200 hover:-translate-y-2 hover:scale-110 active-elevate-2\"\n        >\n          <Grid3x3 className=\"w-8 h-8\" />\n        </button>\n\n        {/* Separator */}\n        <div className=\"w-px h-10 bg-amber-900/20 dark:bg-amber-200/20 mx-1\" />\n\n        {/* App Icons */}\n        {dockAppConfigs.map((app) => {\n          const isActive = activeApps.includes(app.id);\n          \n          return (\n            <div key={app.id} className=\"flex flex-col items-center gap-1\">\n              <button\n                onClick={() => onAppClick(app.id)}\n                data-testid={`dock-icon-${app.id}`}\n                className=\"w-14 h-14 flex items-center justify-center rounded-xl bg-gradient-to-br text-white transition-all duration-200 hover:-translate-y-2 hover:scale-110 active-elevate-2\"\n                style={{ backgroundImage: `linear-gradient(to bottom right, var(--tw-gradient-stops))` }}\n              >\n                <div className={`bg-gradient-to-br ${app.color} w-full h-full rounded-xl flex items-center justify-center`}>\n                  {app.icon}\n                </div>\n              </button>\n              {/* Active Indicator Dot */}\n              {isActive && (\n                <div \n                  className=\"w-1.5 h-1.5 rounded-full bg-amber-600 dark:bg-amber-400\"\n                  data-testid={`dock-indicator-${app.id}`}\n                />\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4670},"design_guidelines.md":{"content":"# Harmony - Faith-Based Desktop Workspace Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: This is a unique desktop operating system metaphor for a faith-based productivity app. Draw inspiration from:\n- **macOS/Windows Desktop Paradigms**: Window management, dock navigation, desktop icons\n- **Microsoft Windows 11 Tiles**: Grid-based tile view with varied sizes\n- **Notion/Linear**: Clean, modern productivity interfaces with warm aesthetics\n- **Faith-Based Aesthetic**: Warm, reverent, stained-glass inspired translucency\n\n## Core Design Philosophy\nA **desktop workspace environment** for spiritual productivity combining traditional window management with modern tile views. The interface should feel sacred yet functional, with warm, welcoming tones that encourage daily spiritual practice.\n\n## Color Palette\n\n### Light Mode\n- **Background Base**: 245 17% 91% (warm beige #f5f1e8)\n- **Background Gradient**: Linear gradient to 44 35% 84% (#e8dcc4)\n- **Dot Pattern**: 40 31% 73% (#d4c5a9)\n- **Primary (Gold)**: 42 43% 58% (#c9a961)\n- **Accent (Sky)**: 197 71% 73% (#87ceeb)\n- **Text Dark**: 24 45% 18% (#3d2817)\n- **Border**: Amber-900 at 20% opacity\n\n### Dark Mode\n- **Background Base**: 30 20% 8% (#1a1410)\n- **Background Gradient**: Linear gradient to 36 22% 14% (#2d2419)\n- **Dot Pattern**: 36 20% 19% (#3d3427)\n- **Primary (Gold)**: 42 43% 58% (same #c9a961)\n- **Text Light**: 40 17% 91% (#f5f1e8)\n- **Border**: Amber-200 at 20% opacity\n\n### Stained Glass Effect\n- **Light**: rgba(245, 241, 232, 0.7) with backdrop-blur(16px) saturate(150%)\n- **Dark**: rgba(26, 20, 16, 0.7) with backdrop-blur(16px) saturate(150%)\n- **Border**: 1px solid gold at 25% opacity (light) or 20% opacity (dark)\n\n## Typography\n- **Primary Font**: Inter (400, 500, 600, 700) - All UI elements\n- **Scripture Font**: Crimson Text (400, 600) - Bible verses, devotionals\n- **Header Bar**: 18px bold for \"Harmony\" logo\n- **Search Placeholder**: 14px regular\n- **Window Titles**: 14px medium\n- **Body Text**: 14-16px regular\n- **Tile Names**: 18px semibold\n\n## Layout System\n\n### Spacing Units\nTailwind units: **2, 3, 4, 6, 8, 12, 16, 20, 24** for consistent rhythm\n- Icon spacing: p-2, p-3, p-4\n- Section padding: p-4, p-6, p-8\n- Gap between elements: gap-2, gap-3, gap-4, gap-6\n\n### Desktop Layout Structure\n1. **Top Menu Bar**: Fixed height 56px (h-14), backdrop-blur, 3-column grid\n   - Left: Logo + \"Harmony\" text\n   - Center: Search bar (max-width 2xl)\n   - Right: View toggle + notifications + theme + profile\n2. **Desktop Area**: Full viewport minus header (pt-14) and dock (pb-24)\n3. **Bottom Dock**: Fixed height 80px, centered icons with hover effects\n\n### Window System\n- **Minimum Size**: 320px × 200px\n- **Default Sizes**: 500px × 550px (varies by app)\n- **Stained Glass Windows**: Rounded-2xl, translucent with backdrop blur\n- **Window Header**: 44px height, draggable, amber background 80% opacity\n- **Window Controls**: Minimize (gold), maximize (sky), close (red) - 12px circles\n- **Resize Handle**: 20px × 20px bottom-right corner\n\n### Tile View Grid\n- **Mobile**: 2 columns, 150px rows\n- **Tablet (768px+)**: Auto-fill minmax(150px, 1fr)\n- **Desktop (1280px+)**: 6-column grid\n- **Tile Sizes**:\n  - Small: 1 column × 1 row\n  - Wide: 2 columns × 1 row\n  - Tall: 1 column × 2 rows\n  - Large: 2 columns × 2 rows\n- **Gap**: 1.5rem between tiles\n- **Container**: Max-width 1400px, centered, 2rem padding\n\n## Component Library\n\n### Navigation\n- **Top Bar**: Translucent white/dark with backdrop blur, subtle border\n- **Search**: Rounded-full with amber tones, left icon, focus ring\n- **Dock**: Centered horizontal row, 64px icon size, translateY hover\n\n### Desktop Icons (Traditional View)\n- **Size**: 96px wide containers\n- **Icon**: 48px emoji/svg\n- **Label**: 13px medium, text-shadow for legibility\n- **Hover**: Amber background 15% opacity, translateY(-2px)\n- **Grid**: Flow-col, auto-cols-max, 5 rows\n\n### Tiles (Modern View)\n- **Background**: Vibrant gradients per app category\n- **Content**: Icon (40px) + name + preview content\n- **Hover**: TranslateY(-4px) + enhanced shadow\n- **Colors**: \n  - Bible: Purple/indigo gradient\n  - Prayer: Blue gradient\n  - Devotional: Green gradient\n  - Guides: Amber/orange gradient\n  - Community: Pink/rose gradient\n\n### Windows (All 14 Apps)\n- **Bible, Prayer, Devotional, Mood, Notes**: Standard 500×550px\n- **Spiritual Guides**: Chat interface, message bubbles\n- **Prayer Chains**: Feed layout with cards\n- **Flourishing**: Dashboard with score cards\n- **Media (Videos, Songs, Sermons)**: Grid thumbnails\n- **Library**: Resource cards with tags\n\n### Buttons & Controls\n- **Primary**: Gold background, white text, rounded-lg\n- **Secondary**: Transparent with gold border\n- **Icon Buttons**: Rounded-full, hover background\n- **Toggle Switch**: 50px × 28px, gold when active\n\n### Forms & Inputs\n- **Text Fields**: Amber-50 background (light), slate-800 (dark), rounded borders\n- **Textareas**: Same styling, scrollbar styled gold\n- **Scrollbars**: 6px width, gold thumb, transparent track\n\n## Background Pattern\n**Dotted Grid**: Radial-gradient dots, 1px circles, 24px spacing\n- Light: #d4c5a9 dots on beige gradient\n- Dark: #3d3427 dots on dark brown gradient\n\n## Interaction States\n- **Hover**: Subtle translateY, scale, or background color change\n- **Active Windows**: Higher z-index, slightly enhanced shadow\n- **Focus**: Gold ring (ring-2 ring-amber-500)\n- **Disabled**: 50% opacity, no pointer events\n\n## Animations\n**Minimal & Purposeful**:\n- Window open: fadeIn 0.2s (scale 0.95→1, opacity 0→1)\n- Tile hover: transform 0.2s ease\n- Dock icon hover: translateY(-8px) scale(1.1)\n- Toggle switch: 0.4s ease transitions\n\n## Dark Mode Implementation\n- Toggle via theme-toggle button in header\n- Apply `.dark` class to root element\n- All colors transition smoothly (0.3s ease)\n- Maintain same layout and spacing in both modes\n\n## Accessibility\n- Semantic HTML throughout\n- ARIA labels for icon-only buttons\n- Keyboard navigation for window focus\n- High contrast in both light/dark modes\n- Focus indicators on all interactive elements\n\n## Images\n**None required** - This is an icon-based desktop interface using emojis and SVG icons. The visual richness comes from the stained-glass translucency, warm color palette, and dotted background pattern.","size_bytes":6314},"client/src/components/apps/FlourishingWindow.tsx":{"content":"import { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Loader2, RefreshCw } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface FlourishingScore {\n  id: string;\n  userId: string;\n  overallIndex: number;\n  healthScore: number;\n  relationshipsScore: number;\n  financesScore: number;\n  meaningScore: number;\n  happinessScore: number;\n  characterScore: number;\n  faithScore: number;\n  aiInsight: string;\n  createdAt: string;\n}\n\nconst domainColors = [\n  { domain: 'Health', key: 'healthScore' },\n  { domain: 'Relationships', key: 'relationshipsScore' },\n  { domain: 'Finances', key: 'financesScore' },\n  { domain: 'Meaning', key: 'meaningScore' },\n  { domain: 'Happiness', key: 'happinessScore' },\n  { domain: 'Character', key: 'characterScore' },\n  { domain: 'Faith', key: 'faithScore' },\n];\n\n// Get color based on score range\nconst getScoreColor = (score: number): { gradient: string; text: string; label: string } => {\n  if (score >= 80) {\n    return { \n      gradient: 'from-emerald-500 to-green-600', \n      text: 'text-emerald-600 dark:text-emerald-400',\n      label: 'Thriving 🌟' \n    };\n  } else if (score >= 60) {\n    return { \n      gradient: 'from-blue-500 to-cyan-600', \n      text: 'text-blue-600 dark:text-blue-400',\n      label: 'Stable ✅' \n    };\n  } else if (score >= 40) {\n    return { \n      gradient: 'from-amber-500 to-orange-600', \n      text: 'text-amber-600 dark:text-amber-400',\n      label: 'Struggling ⚠️' \n    };\n  } else {\n    return { \n      gradient: 'from-red-500 to-rose-600', \n      text: 'text-red-600 dark:text-red-400',\n      label: 'Crisis 🆘' \n    };\n  }\n};\n\nexport default function FlourishingWindow() {\n  const { toast } = useToast();\n\n  const { data: scoreData, isLoading } = useQuery<{ data: FlourishingScore | null }>({\n    queryKey: ['/api/flourishing']\n  });\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/flourishing/generate');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/flourishing'] });\n      toast({ title: 'Flourishing scores updated!', description: 'Your personalized insights are ready.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to generate scores. Please try again.', variant: 'destructive' });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const score = scoreData?.data;\n\n  if (!score) {\n    return (\n      <div className=\"space-y-6 text-center\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Flourishing Index</h2>\n          <p className=\"text-sm text-muted-foreground mb-4\">Discover your personalized wellbeing score</p>\n        </div>\n        <Button\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-generate-flourishing\"\n        >\n          {generateMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Calculating...\n            </>\n          ) : (\n            <>\n              <RefreshCw className=\"mr-2 h-4 w-4\" />\n              Calculate Scores\n            </>\n          )}\n        </Button>\n      </div>\n    );\n  }\n\n  const overallColor = getScoreColor(score.overallIndex || 0);\n  \n  const scores = domainColors.map(({ domain, key }) => {\n    const scoreValue = score[key as keyof FlourishingScore] as number;\n    return {\n      domain,\n      score: scoreValue,\n      ...getScoreColor(scoreValue)\n    };\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"text-center flex-1\">\n          <h2 className=\"text-xl font-semibold text-foreground mb-2\">Flourishing Index</h2>\n          <div className={`text-5xl font-bold ${overallColor.text} mb-1`} data-testid=\"text-overall-score\">{score.overallIndex}</div>\n          <p className={`text-sm font-medium ${overallColor.text}`}>{overallColor.label}</p>\n        </div>\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-refresh-flourishing\"\n        >\n          {generateMutation.isPending ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n\n      <div className=\"space-y-3\">\n        {scores.map(scoreItem => (\n          <div key={scoreItem.domain} data-testid={`flourishing-${scoreItem.domain.toLowerCase()}`}>\n            <div className=\"flex justify-between items-center mb-1\">\n              <span className=\"text-sm font-medium text-foreground\">{scoreItem.domain}</span>\n              <span className=\"text-sm text-muted-foreground\">{scoreItem.score}/100</span>\n            </div>\n            <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n              <div \n                className={`h-full bg-gradient-to-r ${scoreItem.gradient}`}\n                style={{ width: `${scoreItem.score}%` }}\n              />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {score.aiInsight && (\n        <div className=\"pt-4 border-t border-border\">\n          <h3 className=\"text-sm font-semibold text-foreground mb-2\">💡 AI Insight</h3>\n          <p className=\"text-sm text-muted-foreground leading-relaxed\" data-testid=\"text-ai-insight\">{score.aiInsight}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5850},"client/src/components/apps/PrayerChainWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Heart, MessageCircle, Loader2, Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\n\ninterface PrayerChain {\n  id: string;\n  userId: string;\n  title: string;\n  content: string;\n  createdAt: string;\n}\n\ninterface Comment {\n  id: string;\n  prayerChainId: string;\n  userId: string;\n  content: string;\n  createdAt: string;\n}\n\nexport default function PrayerChainWindow() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [selectedChainId, setSelectedChainId] = useState<string | null>(null);\n  const [commentText, setCommentText] = useState('');\n\n  const { data: chainsData, isLoading, error } = useQuery<{ data: PrayerChain[] }>({\n    queryKey: ['/api/prayer-chains']\n  });\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load prayer chains</p>\n          <p className=\"text-sm text-muted-foreground\">{String(error)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const { data: commentsData } = useQuery<{ data: Comment[] }>({\n    queryKey: selectedChainId ? [`/api/prayer-chains/${selectedChainId}/comments`] : ['disabled'],\n    enabled: !!selectedChainId\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async ({ title, content }: { title: string; content: string }) => {\n      const res = await apiRequest('POST', '/api/prayer-chains', { title, content });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/prayer-chains'] });\n      setIsDialogOpen(false);\n      setTitle('');\n      setContent('');\n      toast({ title: 'Prayer request shared!', description: 'Others can now pray for you.' });\n    }\n  });\n\n  const commentMutation = useMutation({\n    mutationFn: async ({ chainId, content }: { chainId: string; content: string }) => {\n      const res = await apiRequest('POST', `/api/prayer-chains/${chainId}/comments`, { content });\n      return res.json();\n    },\n    onSuccess: () => {\n      if (selectedChainId) {\n        queryClient.invalidateQueries({ queryKey: [`/api/prayer-chains/${selectedChainId}/comments`] });\n      }\n      setCommentText('');\n    }\n  });\n\n  const handleCreate = () => {\n    if (title.trim() && content.trim()) {\n      createMutation.mutate({ title, content });\n    }\n  };\n\n  const handleAddComment = (chainId: string) => {\n    if (commentText.trim()) {\n      commentMutation.mutate({ chainId, content: commentText });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const chains = chainsData?.data || [];\n  const comments = commentsData?.data || [];\n\n  if (selectedChainId) {\n    const chain = chains.find(c => c.id === selectedChainId);\n    if (!chain) return null;\n\n    return (\n      <div className=\"space-y-4 h-full flex flex-col\">\n        <div className=\"flex items-center gap-3\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={() => setSelectedChainId(null)} data-testid=\"button-back\">\n            ← Back\n          </Button>\n          <h2 className=\"text-lg font-semibold text-foreground flex-1\">{chain.title}</h2>\n        </div>\n        \n        <div className=\"p-4 rounded-lg bg-muted\">\n          <p className=\"text-foreground\">{chain.content}</p>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {new Date(chain.createdAt).toLocaleDateString()}\n          </p>\n        </div>\n\n        <div className=\"flex-1 overflow-auto space-y-3\">\n          <h3 className=\"text-sm font-semibold text-foreground\">Prayers & Support</h3>\n          {comments.map(comment => (\n            <div key={comment.id} className=\"p-3 rounded-lg bg-card border border-border\" data-testid={`comment-${comment.id}`}>\n              <p className=\"text-sm text-foreground\">{comment.content}</p>\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                {new Date(comment.createdAt).toLocaleDateString()}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"flex gap-2\">\n          <input\n            type=\"text\"\n            value={commentText}\n            onChange={(e) => setCommentText(e.target.value)}\n            placeholder=\"Add your prayer or support...\"\n            className=\"flex-1 px-3 py-2 rounded-lg border border-input bg-background text-foreground\"\n            data-testid=\"input-comment\"\n          />\n          <Button\n            onClick={() => handleAddComment(chain.id)}\n            disabled={!commentText.trim() || commentMutation.isPending}\n            data-testid=\"button-add-comment\"\n          >\n            {commentMutation.isPending ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : 'Send'}\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Prayer Chain</h2>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button size=\"sm\" data-testid=\"button-new-prayer-chain\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Share Request\n            </Button>\n          </DialogTrigger>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Share Prayer Request</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-sm font-medium text-foreground block mb-2\">Title</label>\n                <input\n                  type=\"text\"\n                  value={title}\n                  onChange={(e) => setTitle(e.target.value)}\n                  placeholder=\"Brief title for your request\"\n                  className=\"w-full px-3 py-2 rounded-lg border border-input bg-background text-foreground\"\n                  data-testid=\"input-chain-title\"\n                />\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-foreground block mb-2\">Request</label>\n                <textarea\n                  value={content}\n                  onChange={(e) => setContent(e.target.value)}\n                  placeholder=\"Share what you'd like prayer for...\"\n                  className=\"w-full h-24 px-3 py-2 rounded-lg border border-input bg-background text-foreground resize-none\"\n                  data-testid=\"textarea-chain-content\"\n                />\n              </div>\n              <Button\n                onClick={handleCreate}\n                disabled={!title.trim() || !content.trim() || createMutation.isPending}\n                className=\"w-full\"\n                data-testid=\"button-create-chain\"\n              >\n                {createMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Sharing...\n                  </>\n                ) : (\n                  'Share Prayer Request'\n                )}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex-1 overflow-auto space-y-3\">\n        {chains.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">No prayer requests yet</p>\n            <Button onClick={() => setIsDialogOpen(true)}>Share a Prayer Request</Button>\n          </div>\n        ) : (\n          chains.map(chain => (\n            <div\n              key={chain.id}\n              onClick={() => setSelectedChainId(chain.id)}\n              className=\"p-4 rounded-lg border border-border bg-card hover-elevate cursor-pointer\"\n              data-testid={`prayer-chain-${chain.id}`}\n            >\n              <h3 className=\"font-medium text-foreground mb-1\">{chain.title}</h3>\n              <p className=\"text-sm text-muted-foreground line-clamp-2 mb-2\">{chain.content}</p>\n              <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                <MessageCircle className=\"w-4 h-4\" />\n                <span>View prayers</span>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8771},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/apps/SermonsWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Loader2, RefreshCw, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Sermon {\n  id: string;\n  userId: string;\n  youtubeId: string;\n  youtubeUrl: string;\n  title: string;\n  churchName: string | null;\n  duration: string | null;\n  thumbnailUrl: string | null;\n  createdAt: string;\n}\n\nexport default function SermonsWindow() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data: sermonsData, isLoading, error } = useQuery<{ data: Sermon[] }>({\n    queryKey: ['/api/sermons']\n  });\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load sermons</p>\n          <p className=\"text-sm text-muted-foreground\">{String(error)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/sermons/generate');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/sermons'] });\n      toast({ title: 'Sermons updated!', description: 'New personalized sermon recommendations.' });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const sermons = sermonsData?.data || [];\n\n  // Filter sermons by search query (title or church name)\n  const filteredSermons = sermons.filter(sermon => \n    !searchQuery || \n    sermon.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (sermon.churchName ?? '').toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Sermons</h2>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-generate-sermons\"\n        >\n          {generateMutation.isPending ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n          )}\n          Refresh\n        </Button>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search sermons or churches...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-sermons\"\n        />\n      </div>\n\n      <div className=\"flex-1 overflow-auto space-y-3\">\n        {sermons.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">No sermons yet</p>\n            <Button onClick={() => generateMutation.mutate()} data-testid=\"button-get-sermons\">\n              Get Sermon Recommendations\n            </Button>\n          </div>\n        ) : filteredSermons.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No sermons match your search</p>\n          </div>\n        ) : (\n          filteredSermons.map(sermon => (\n            <a\n              key={sermon.id}\n              href={sermon.youtubeUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"block p-4 rounded-lg border border-border bg-card hover-elevate\"\n              data-testid={`sermon-item-${sermon.id}`}\n            >\n              <h3 className=\"font-semibold text-foreground mb-1\">{sermon.title}</h3>\n              <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-2\">\n                <span>{sermon.churchName || 'AI-Generated Recommendation'}</span>\n                {sermon.duration && <span>⏱️ {sermon.duration}</span>}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                🎬 Click to watch on YouTube\n              </div>\n            </a>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4623},"client/src/components/TileView.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Book, Heart, MessageSquare, FileText, Users, TrendingUp } from 'lucide-react';\n\ninterface TileViewProps {\n  onAppClick: (appId: string) => void;\n}\n\nexport default function TileView({ onAppClick }: TileViewProps) {\n  // Fetch live data for previews\n  const { data: flourishingData } = useQuery<{ data: any }>({ queryKey: ['/api/flourishing'] });\n  const { data: bibleData } = useQuery<{ data: any[] }>({ queryKey: ['/api/bible-verses'] });\n  const { data: prayersData } = useQuery<{ data: any[] }>({ queryKey: ['/api/prayers'] });\n  const { data: devotionalsData } = useQuery<{ data: any[] }>({ queryKey: ['/api/devotionals'] });\n  const { data: notesData } = useQuery<{ data: any[] }>({ queryKey: ['/api/notes'] });\n  const { data: chainsData } = useQuery<{ data: any[] }>({ queryKey: ['/api/prayer-chains'] });\n  const { data: guidesData } = useQuery<{ data: any[] }>({ queryKey: ['/api/guides'] });\n  const { data: videosData } = useQuery<{ data: any[] }>({ queryKey: ['/api/videos'] });\n  const { data: songsData } = useQuery<{ data: any[] }>({ queryKey: ['/api/songs'] });\n  const { data: sermonsData } = useQuery<{ data: any[] }>({ queryKey: ['/api/sermons'] });\n  const { data: resourcesData } = useQuery<{ data: any[] }>({ queryKey: ['/api/resources'] });\n  const { data: moodsData } = useQuery<{ data: any[] }>({ queryKey: ['/api/moods'] });\n  const { data: circlesData } = useQuery<{ data: any[] }>({ queryKey: ['/api/faith-circles'] });\n\n  const flourishing = flourishingData?.data;\n  const latestBible = bibleData?.data?.[0];\n  const activePrayers = prayersData?.data?.filter(p => !p.isAnswered) || [];\n  const latestDevotional = devotionalsData?.data?.[0];\n  const latestNote = notesData?.data?.[0];\n  const prayerChains = chainsData?.data || [];\n  const guides = guidesData?.data || [];\n  const videos = videosData?.data || [];\n  const songs = songsData?.data || [];\n  const latestSermon = sermonsData?.data?.[0];\n  const latestResource = resourcesData?.data?.[0];\n  const latestMood = moodsData?.data?.[0];\n\n  return (\n    <div className=\"absolute top-14 bottom-24 left-0 right-0 overflow-y-auto p-8\">\n      <h2 className=\"text-2xl font-semibold text-foreground mb-6 max-w-7xl mx-auto\">Your Faith Workspace</h2>\n      <div className=\"max-w-7xl mx-auto grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4 auto-rows-[150px]\">\n        \n        {/* Flourishing Index - Always First, Large */}\n        <button\n          onClick={() => onAppClick('flourishing')}\n          data-testid=\"tile-flourishing\"\n          className=\"tile-lg cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-6 bg-gradient-to-br from-purple-500 to-indigo-600 text-white relative overflow-hidden\"\n        >\n          <div className=\"absolute top-3 left-3 text-xs font-medium opacity-80\">PRIMARY METRIC: HUMAN FLOURISHING</div>\n          <div className=\"flex flex-col h-full justify-center\">\n            <div className=\"text-6xl font-bold mb-1\">\n              {flourishing?.overallIndex || 0} <span className=\"text-3xl opacity-80\">/100</span>\n            </div>\n            <div className=\"text-lg font-semibold mb-4\">Flourishing Index (FI)</div>\n            <div className=\"space-y-1 text-sm\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"flex items-center gap-1\">💖 Spiritual</span>\n                <span className=\"font-semibold\">{flourishing?.faithScore || 0}%</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"flex items-center gap-1\">🤝 Emotional</span>\n                <span className=\"font-semibold\">{flourishing?.happinessScore || 0}%</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"flex items-center gap-1\">👥 Relational</span>\n                <span className=\"font-semibold\">{flourishing?.relationshipsScore || 0}%</span>\n              </div>\n            </div>\n            {flourishing?.aiInsight && (\n              <div className=\"mt-3 pt-3 border-t border-white/20\">\n                <div className=\"text-xs font-semibold mb-1 opacity-90\">💡 AI Insight</div>\n                <div className=\"text-xs opacity-80 leading-relaxed\">{flourishing.aiInsight}</div>\n              </div>\n            )}\n            {!flourishing?.aiInsight && (\n              <div className=\"mt-3 text-xs opacity-75 italic\">Tap to see personalized AI analysis</div>\n            )}\n          </div>\n        </button>\n\n        {/* Holy Bible */}\n        <button\n          onClick={() => onAppClick('bible')}\n          data-testid=\"tile-bible\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-cyan-400 to-blue-500 text-white\"\n        >\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Book className=\"w-5 h-5\" />\n            <span className=\"font-semibold\">Holy Bible</span>\n          </div>\n          {latestBible ? (\n            <>\n              <div className=\"text-xs opacity-90 mb-1\">\n                {latestBible.book} {latestBible.chapter}:{latestBible.verseStart}\n                {latestBible.verseEnd && latestBible.verseEnd !== latestBible.verseStart ? `-${latestBible.verseEnd}` : ''}\n              </div>\n              <div className=\"text-sm font-serif italic line-clamp-2\">\n                {latestBible.content || latestBible.notes || 'Tap to read'}\n              </div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Tap to get personalized verses</div>\n          )}\n        </button>\n\n        {/* Daily Devotional */}\n        <button\n          onClick={() => onAppClick('devotional')}\n          data-testid=\"tile-devotional\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-green-400 to-emerald-500 text-white\"\n        >\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Heart className=\"w-5 h-5\" />\n            <span className=\"font-semibold\">Devotional</span>\n          </div>\n          {latestDevotional ? (\n            <>\n              <div className=\"text-xs opacity-90 mb-1\">{latestDevotional.title}:</div>\n              <div className=\"text-sm line-clamp-2\">{latestDevotional.content.slice(0, 50)}...</div>\n              <div className=\"text-xs opacity-75 mt-1\">{latestDevotional.scriptureReference}</div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Tap to get devotional</div>\n          )}\n        </button>\n\n        {/* Prayer Journal */}\n        <button\n          onClick={() => onAppClick('prayer')}\n          data-testid=\"tile-prayer\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-red-400 to-pink-500 text-white\"\n        >\n          <div className=\"flex items-center gap-2 mb-2\">\n            <MessageSquare className=\"w-5 h-5\" />\n            <span className=\"font-semibold\">Prayer Journal</span>\n          </div>\n          <div className=\"text-4xl font-bold my-2\">{activePrayers.length}</div>\n          <div className=\"text-sm\">Active Requests</div>\n          {prayersData?.data?.some(p => p.isAnswered) && (\n            <div className=\"text-xs opacity-90 mt-1\">🙏 Answered prayers</div>\n          )}\n        </button>\n\n        {/* SyncNote */}\n        <button\n          onClick={() => onAppClick('notes')}\n          data-testid=\"tile-notes\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-yellow-400 to-orange-500 text-white\"\n        >\n          <div className=\"flex items-center gap-2 mb-2\">\n            <FileText className=\"w-5 h-5\" />\n            <span className=\"font-semibold\">SyncNote</span>\n          </div>\n          <div className=\"text-xs opacity-90 mb-2\">AI-Tags your thoughts</div>\n          {latestNote ? (\n            <>\n              <div className=\"text-sm\">Last Note:</div>\n              <div className=\"text-sm font-medium line-clamp-1\">{latestNote.aiTags?.[0] || 'No tags'}</div>\n            </>\n          ) : (\n            <div className=\"text-xs\">Create your first note</div>\n          )}\n        </button>\n\n        {/* Prayer Chain */}\n        <button\n          onClick={() => onAppClick('prayer-chain')}\n          data-testid=\"tile-prayer-chain\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-purple-400 to-violet-500 text-white\"\n        >\n          <div className=\"flex items-center gap-2 mb-2\">\n            <Users className=\"w-5 h-5\" />\n            <span className=\"font-semibold\">Prayer Chain</span>\n          </div>\n          <div className=\"text-4xl font-bold my-2\">{prayerChains.length}</div>\n          <div className=\"text-sm\">Prayer Requests</div>\n          <div className=\"text-xs opacity-90 mt-1\">Community support</div>\n        </button>\n\n        {/* Mood Tracker */}\n        <button\n          onClick={() => onAppClick('mood')}\n          data-testid=\"tile-mood\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-orange-400 to-amber-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">\n            {latestMood?.moodType === 'joyful' && '😊'}\n            {latestMood?.moodType === 'peaceful' && '😌'}\n            {latestMood?.moodType === 'grateful' && '🙏'}\n            {latestMood?.moodType === 'anxious' && '😰'}\n            {latestMood?.moodType === 'sad' && '😔'}\n            {latestMood?.moodType === 'angry' && '😤'}\n            {!latestMood && '😊'}\n          </div>\n          <div className=\"font-semibold mb-1\">Mood Tracker</div>\n          {latestMood ? (\n            <>\n              <div className=\"text-xs opacity-90 capitalize\">{latestMood.moodType}</div>\n              <div className=\"text-xs opacity-75 mt-1\">{new Date(latestMood.createdAt).toLocaleDateString()}</div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Track your emotions</div>\n          )}\n        </button>\n\n        {/* Spiritual Guides */}\n        <button\n          onClick={() => onAppClick('guides')}\n          data-testid=\"tile-guides\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-amber-400 to-orange-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">👥</div>\n          <div className=\"font-semibold mb-1\">Spiritual Guides</div>\n          <div className=\"text-xs opacity-90\">{guides.length} AI companions</div>\n          <div className=\"text-xs opacity-75 mt-1\">Ask about faith</div>\n        </button>\n\n        {/* Videos */}\n        <button\n          onClick={() => onAppClick('videos')}\n          data-testid=\"tile-videos\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-rose-400 to-red-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">📺</div>\n          <div className=\"font-semibold mb-1\">Videos</div>\n          <div className=\"text-xs opacity-90\">{videos.length} recommendations</div>\n          <div className=\"text-xs opacity-75 mt-1\">Personalized for you</div>\n        </button>\n\n        {/* Songs */}\n        <button\n          onClick={() => onAppClick('songs')}\n          data-testid=\"tile-songs\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-indigo-400 to-purple-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">🎵</div>\n          <div className=\"font-semibold mb-1\">Worship Songs</div>\n          {songs.length > 0 ? (\n            <>\n              <div className=\"text-xs opacity-90 line-clamp-1\">{songs[0]?.title}</div>\n              <div className=\"text-xs opacity-75 mt-1\">{songs.length} songs</div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Get worship music</div>\n          )}\n        </button>\n\n        {/* Sermons */}\n        <button\n          onClick={() => onAppClick('sermons')}\n          data-testid=\"tile-sermons\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-cyan-400 to-teal-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">🎤</div>\n          <div className=\"font-semibold mb-1\">Sermons</div>\n          {latestSermon ? (\n            <>\n              <div className=\"text-xs opacity-90 line-clamp-1\">{latestSermon.title}</div>\n              <div className=\"text-xs opacity-75 mt-1\">{latestSermon.preacher}</div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Get sermon recommendations</div>\n          )}\n        </button>\n\n        {/* Library */}\n        <button\n          onClick={() => onAppClick('library')}\n          data-testid=\"tile-library\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-violet-400 to-purple-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">📚</div>\n          <div className=\"font-semibold mb-1\">Library</div>\n          {latestResource ? (\n            <>\n              <div className=\"text-xs opacity-90 line-clamp-1\">{latestResource.title}</div>\n              <div className=\"text-xs opacity-75 mt-1 capitalize\">{latestResource.resourceType}</div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Get resources</div>\n          )}\n        </button>\n\n        {/* Faith Circles */}\n        <button\n          onClick={() => onAppClick('faith-circles')}\n          data-testid=\"tile-faith-circles\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-pink-400 to-rose-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">⭕</div>\n          <div className=\"font-semibold mb-1\">Faith Circles</div>\n          {circlesData?.data && circlesData.data.length > 0 ? (\n            <>\n              <div className=\"text-xs opacity-90\">{circlesData.data.length} circles available</div>\n              <div className=\"text-xs opacity-75 mt-1\">{circlesData.data.filter((c: any) => c.isMember).length} joined</div>\n            </>\n          ) : (\n            <div className=\"text-xs opacity-90\">Join community circles</div>\n          )}\n        </button>\n\n        {/* Calendar */}\n        <button\n          onClick={() => onAppClick('calendar')}\n          data-testid=\"tile-calendar\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-sky-400 to-blue-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">📅</div>\n          <div className=\"font-semibold mb-1\">Calendar</div>\n          <div className=\"text-xs opacity-90\">Plan your schedule</div>\n          <div className=\"text-xs opacity-75 mt-1\">Track events</div>\n        </button>\n\n        {/* Settings */}\n        <button\n          onClick={() => onAppClick('settings')}\n          data-testid=\"tile-settings\"\n          className=\"tile-small cursor-pointer transition-all duration-200 hover:-translate-y-1 hover:shadow-2xl rounded-xl p-4 bg-gradient-to-br from-slate-400 to-gray-500 text-white\"\n        >\n          <div className=\"text-2xl mb-2\">⚙️</div>\n          <div className=\"font-semibold mb-1\">Settings</div>\n          <div className=\"text-xs opacity-90\">Customize workspace</div>\n          <div className=\"text-xs opacity-75 mt-1\">Preferences & more</div>\n        </button>\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":16175},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/apps/CalendarWindow.tsx":{"content":"export default function CalendarWindow() {\n  //todo: remove mock functionality\n  const events = [\n    { id: 1, time: '9:00 AM', title: 'Morning Prayer', color: 'bg-blue-500' },\n    { id: 2, time: '12:00 PM', title: 'Bible Study Group', color: 'bg-purple-500' },\n    { id: 3, time: '7:00 PM', title: 'Evening Devotional', color: 'bg-green-500' },\n  ];\n\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = 15;\n\n  return (\n    <div className=\"space-y-4\">\n      <h2 className=\"text-xl font-semibold text-foreground\">Calendar</h2>\n      <div className=\"grid grid-cols-7 gap-2 mb-4\">\n        {days.map(day => (\n          <div key={day} className=\"text-center text-xs font-medium text-muted-foreground\">\n            {day}\n          </div>\n        ))}\n        {Array.from({ length: 35 }).map((_, i) => {\n          const dayNum = i - 5;\n          const isToday = dayNum === today;\n          return (\n            <div \n              key={i}\n              data-testid={`calendar-day-${i}`}\n              className={`aspect-square flex items-center justify-center text-sm rounded-lg ${\n                dayNum > 0 && dayNum <= 30\n                  ? isToday\n                    ? 'bg-sidebar-primary text-sidebar-primary-foreground font-semibold'\n                    : 'text-foreground hover-elevate cursor-pointer'\n                  : 'text-muted-foreground/30'\n              }`}\n            >\n              {dayNum > 0 && dayNum <= 30 ? dayNum : ''}\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"space-y-2\">\n        <h3 className=\"text-sm font-medium text-foreground\">Today's Schedule</h3>\n        {events.map(event => (\n          <div \n            key={event.id}\n            className=\"flex items-center gap-3 p-2 rounded-lg border border-border bg-card\"\n            data-testid={`event-${event.id}`}\n          >\n            <div className={`w-1 h-8 rounded-full ${event.color}`} />\n            <div className=\"flex-1\">\n              <p className=\"text-sm font-medium text-foreground\">{event.title}</p>\n              <p className=\"text-xs text-muted-foreground\">{event.time}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2211},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/apps/VideosWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Loader2, RefreshCw, ExternalLink, Search } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface Video {\n  id: string;\n  userId: string;\n  title: string;\n  youtubeId: string;\n  description: string | null;\n  createdAt: string;\n}\n\nexport default function VideosWindow() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data: videosData, isLoading, error } = useQuery<{ data: Video[] }>({\n    queryKey: ['/api/videos']\n  });\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-full text-center p-4\">\n        <div>\n          <p className=\"text-destructive mb-2\">Failed to load videos</p>\n          <p className=\"text-sm text-muted-foreground\">{String(error)}</p>\n        </div>\n      </div>\n    );\n  }\n\n  const generateMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest('POST', '/api/videos/generate');\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/videos'] });\n      toast({ title: 'Videos updated!', description: 'New personalized videos recommended.' });\n    }\n  });\n\n  const watchMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest('POST', `/api/videos/${id}/watch`);\n      return res.json();\n    }\n  });\n\n  const handleWatch = (video: Video) => {\n    watchMutation.mutate(video.id);\n    window.open(`https://www.youtube.com/watch?v=${video.youtubeId}`, '_blank');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  const videos = videosData?.data || [];\n\n  // Filter videos by search query (title or description)\n  const filteredVideos = videos.filter(video => \n    !searchQuery || \n    video.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (video.description ?? '').toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-4 h-full flex flex-col\">\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-xl font-semibold text-foreground\">Faith Videos</h2>\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => generateMutation.mutate()}\n          disabled={generateMutation.isPending}\n          data-testid=\"button-generate-videos\"\n        >\n          {generateMutation.isPending ? (\n            <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n          )}\n          Refresh\n        </Button>\n      </div>\n\n      {/* Search Bar */}\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search videos...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-9\"\n          data-testid=\"input-search-videos\"\n        />\n      </div>\n\n      <div className=\"flex-1 overflow-auto space-y-3\">\n        {videos.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground mb-4\">No videos yet</p>\n            <Button onClick={() => generateMutation.mutate()} data-testid=\"button-get-videos\">\n              Get Personalized Videos\n            </Button>\n          </div>\n        ) : filteredVideos.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">No videos match your search</p>\n          </div>\n        ) : (\n          filteredVideos.map(video => (\n            <div\n              key={video.id}\n              className=\"p-4 rounded-lg border border-border bg-card hover-elevate\"\n              data-testid={`video-item-${video.id}`}\n            >\n              <div className=\"flex items-start justify-between gap-3\">\n                <div className=\"flex-1\">\n                  <h3 className=\"font-semibold text-foreground mb-1\">{video.title}</h3>\n                  {video.description && (\n                    <p className=\"text-sm text-muted-foreground mb-2\">{video.description}</p>\n                  )}\n                </div>\n                <Button\n                  size=\"sm\"\n                  onClick={() => handleWatch(video)}\n                  data-testid={`button-watch-${video.id}`}\n                >\n                  <ExternalLink className=\"mr-2 h-4 w-4\" />\n                  Watch\n                </Button>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":4955},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { AuthProvider, useAuth } from \"@/lib/auth\";\nimport Desktop from \"@/components/Desktop\";\nimport Landing from \"@/pages/landing\";\nimport AuthPage from \"@/pages/auth\";\nimport NotFound from \"@/pages/not-found\";\nimport { Loader2 } from \"lucide-react\";\n\nfunction ProtectedRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen w-screen flex items-center justify-center bg-background\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <Component />;\n}\n\nfunction PublicRoute({ component: Component }: { component: () => JSX.Element }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"h-screen w-screen flex items-center justify-center bg-background\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (user) {\n    return <Redirect to=\"/desktop\" />;\n  }\n\n  return <Component />;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <PublicRoute component={Landing} />} />\n      <Route path=\"/login\" component={() => <PublicRoute component={AuthPage} />} />\n      <Route path=\"/register\" component={() => <PublicRoute component={AuthPage} />} />\n      <Route path=\"/desktop\" component={() => <ProtectedRoute component={Desktop} />} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <ThemeProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </ThemeProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2201},"server/seed.ts":{"content":"import { db } from './db';\nimport { spiritualGuides } from '@shared/schema';\n\nasync function seedSpiritualGuides() {\n  console.log('Seeding spiritual guides...');\n  \n  const guides = [\n    {\n      name: 'Biblical Scholar',\n      description: 'Deep theological knowledge and scripture interpretation',\n      systemPrompt: 'You are a Biblical Scholar with deep knowledge of theology, church history, and biblical languages. Provide scholarly yet accessible explanations of scripture. Always cite specific verses. Keep responses under 200 words. NEVER include any preamble or post-text. Respond ONLY with the direct answer in plain text.',\n      avatarEmoji: '📖'\n    },\n    {\n      name: 'Relationship Guide',\n      description: 'Wisdom for relationships, marriage, and family',\n      systemPrompt: 'You are a Relationship Guide specializing in Christian perspectives on marriage, family, friendships, and community. Provide practical, biblically-grounded advice. Be warm and empathetic. Keep responses under 200 words. NEVER include any preamble or post-text. Respond ONLY with the direct answer in plain text.',\n      avatarEmoji: '💑'\n    },\n    {\n      name: 'Prayer Counselor',\n      description: 'Guidance on prayer life and spiritual disciplines',\n      systemPrompt: 'You are a Prayer Counselor helping people deepen their prayer life and spiritual disciplines. Offer practical steps and encouragement. Be gentle and supportive. Keep responses under 200 words. NEVER include any preamble or post-text. Respond ONLY with the direct answer in plain text.',\n      avatarEmoji: '🙏'\n    },\n    {\n      name: 'Career & Purpose Coach',\n      description: \"Finding God's calling in work and life purpose\",\n      systemPrompt: \"You are a Career & Purpose Coach helping people discover God's calling in their professional life. Blend spiritual wisdom with practical career advice. Be encouraging and action-oriented. Keep responses under 200 words. NEVER include any preamble or post-text. Respond ONLY with the direct answer in plain text.\",\n      avatarEmoji: '💼'\n    },\n    {\n      name: 'Mental Wellness Guide',\n      description: 'Faith-based support for anxiety, stress, and emotions',\n      systemPrompt: 'You are a Mental Wellness Guide offering faith-based support for anxiety, stress, depression, and emotional struggles. Be compassionate and non-judgmental. Always encourage professional help when needed. Keep responses under 200 words. NEVER include any preamble or post-text. Respond ONLY with the direct answer in plain text.',\n      avatarEmoji: '🧠'\n    },\n    {\n      name: 'Worship & Creativity',\n      description: 'Exploring faith through art, music, and creative expression',\n      systemPrompt: 'You are a Worship & Creativity guide helping people express faith through music, art, and creativity. Inspire and encourage creative spiritual practices. Be enthusiastic and affirming. Keep responses under 200 words. NEVER include any preamble or post-text. Respond ONLY with the direct answer in plain text.',\n      avatarEmoji: '🎨'\n    }\n  ];\n\n  // Check if guides already exist\n  const existingGuides = await db.select().from(spiritualGuides);\n  \n  if (existingGuides.length === 0) {\n    await db.insert(spiritualGuides).values(guides);\n    console.log(`✅ Successfully seeded ${guides.length} spiritual guides`);\n  } else {\n    console.log('ℹ️  Spiritual guides already exist, skipping seed');\n  }\n}\n\nseedSpiritualGuides()\n  .then(() => {\n    console.log('Seed completed successfully');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('Seed failed:', error);\n    process.exit(1);\n  });\n","size_bytes":3643},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, type ReactNode } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from './queryClient';\n\ninterface User {\n  id: string;\n  email: string;\n  name: string | null;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string, name?: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n\n  const { data, isLoading } = useQuery<{ data: User }>({\n    queryKey: ['/api/auth/me'],\n    retry: false,\n    staleTime: Infinity\n  });\n\n  useEffect(() => {\n    if (data?.data) {\n      setUser(data.data);\n    }\n  }, [data]);\n\n  const loginMutation = useMutation({\n    mutationFn: async ({ email, password }: { email: string; password: string }) => {\n      const res = await apiRequest('POST', '/api/auth/login', { email, password });\n      const result = await res.json() as { data: User };\n      return result.data;\n    },\n    onSuccess: (userData) => {\n      setUser(userData);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    }\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async ({ email, password, name }: { email: string; password: string; name?: string }) => {\n      const res = await apiRequest('POST', '/api/auth/register', { email, password, name });\n      const result = await res.json() as { data: User };\n      return result.data;\n    },\n    onSuccess: (userData) => {\n      setUser(userData);\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/me'] });\n    }\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/auth/logout');\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.clear();\n    }\n  });\n\n  const login = async (email: string, password: string) => {\n    await loginMutation.mutateAsync({ email, password });\n  };\n\n  const register = async (email: string, password: string, name?: string) => {\n    await registerMutation.mutateAsync({ email, password, name });\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within AuthProvider');\n  }\n  return context;\n}\n","size_bytes":2740},"client/src/pages/auth.tsx":{"content":"import { useState } from 'react';\nimport { useAuth } from '@/lib/auth';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\n\nexport default function AuthPage() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      if (isLogin) {\n        await login(email, password);\n        toast({ title: 'Welcome back!', description: 'You have successfully logged in.' });\n      } else {\n        await register(email, password, name);\n        toast({ title: 'Account created!', description: 'Welcome to Harmony.' });\n      }\n    } catch (error: any) {\n      toast({\n        title: 'Error',\n        description: error.message || 'Authentication failed. Please try again.',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/20 via-background to-secondary/20 p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold text-center\">\n            {isLogin ? 'Welcome Back' : 'Create Account'}\n          </CardTitle>\n          <CardDescription className=\"text-center\">\n            {isLogin ? 'Sign in to your Harmony workspace' : 'Start your spiritual journey with Harmony'}\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {!isLogin && (\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"name\" data-testid=\"label-name\">Name (Optional)</Label>\n                <Input\n                  id=\"name\"\n                  type=\"text\"\n                  value={name}\n                  onChange={(e) => setName(e.target.value)}\n                  placeholder=\"Your name\"\n                  data-testid=\"input-name\"\n                />\n              </div>\n            )}\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\" data-testid=\"label-email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"you@example.com\"\n                required\n                data-testid=\"input-email\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" data-testid=\"label-password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"••••••••\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"button-submit\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  {isLogin ? 'Signing in...' : 'Creating account...'}\n                </>\n              ) : (\n                isLogin ? 'Sign In' : 'Create Account'\n              )}\n            </Button>\n          </form>\n          \n          <div className=\"mt-4 text-center text-sm text-muted-foreground\">\n            {isLogin ? \"Don't have an account?\" : 'Already have an account?'}\n            {' '}\n            <button\n              type=\"button\"\n              className=\"text-primary hover:underline\"\n              onClick={() => {\n                setIsLogin(!isLogin);\n                setEmail('');\n                setPassword('');\n                setName('');\n              }}\n              data-testid=\"button-toggle-mode\"\n            >\n              {isLogin ? 'Create one' : 'Sign in'}\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4638},"server/background-jobs.ts":{"content":"import { db } from './db';\nimport { users } from '@shared/schema';\nimport { runFlourishingEngine } from './personalization';\n\n// Background job: Recalculate flourishing scores every 30 minutes for all users\nexport function startBackgroundJobs() {\n  console.log('🔄 Starting background jobs...');\n\n  // Run flourishing calculation every 30 minutes\n  const THIRTY_MINUTES = 30 * 60 * 1000;\n  \n  setInterval(async () => {\n    try {\n      console.log('🔄 Running scheduled flourishing calculation...');\n      \n      // Get all users\n      const allUsers = await db.select({ id: users.id }).from(users);\n      \n      // Calculate for each user\n      for (const user of allUsers) {\n        try {\n          await runFlourishingEngine(user.id);\n          console.log(`✨ Calculated flourishing for user ${user.id}`);\n        } catch (error) {\n          console.error(`Failed to calculate flourishing for user ${user.id}:`, error);\n        }\n      }\n      \n      console.log(`✅ Completed flourishing calculation for ${allUsers.length} users`);\n    } catch (error) {\n      console.error('Background job error:', error);\n    }\n  }, THIRTY_MINUTES);\n\n  console.log(`✅ Background jobs started (flourishing recalculation every 30 minutes)`);\n}\n","size_bytes":1239},"server/auth.ts":{"content":"import { Request, Response, NextFunction } from 'express';\nimport bcrypt from 'bcrypt';\nimport { db } from './db';\nimport { users } from '@shared/schema';\nimport { eq } from 'drizzle-orm';\n\nconst SALT_ROUNDS = 10;\n\n// Extend Express Session to include userId\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n  }\n}\n\n// Extend Express Request to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: {\n        id: string;\n        email: string;\n        name: string | null;\n      };\n    }\n  }\n}\n\n// Hash password\nexport async function hashPassword(password: string): Promise<string> {\n  return bcrypt.hash(password, SALT_ROUNDS);\n}\n\n// Verify password\nexport async function verifyPassword(password: string, hash: string): Promise<boolean> {\n  return bcrypt.compare(password, hash);\n}\n\n// Authentication middleware\nexport async function requireAuth(req: Request, res: Response, next: NextFunction) {\n  const userId = req.session?.userId;\n\n  if (!userId) {\n    return res.status(401).json({\n      success: false,\n      error: {\n        code: 'AUTH_REQUIRED',\n        message: 'Authentication required'\n      }\n    });\n  }\n\n  try {\n    const user = await db.select({\n      id: users.id,\n      email: users.email,\n      name: users.name\n    }).from(users).where(eq(users.id, userId)).limit(1);\n\n    if (!user[0]) {\n      req.session.destroy(() => {});\n      return res.status(401).json({\n        success: false,\n        error: {\n          code: 'AUTH_REQUIRED',\n          message: 'Invalid session'\n        }\n      });\n    }\n\n    req.user = user[0];\n    next();\n  } catch (error) {\n    console.error('Auth middleware error:', error);\n    return res.status(500).json({\n      success: false,\n      error: {\n        code: 'DATABASE_ERROR',\n        message: 'Authentication failed'\n      }\n    });\n  }\n}\n","size_bytes":1862},"server/personalization.ts":{"content":"import { db } from './db';\nimport { \n  personalizationRuns, \n  events, \n  bibleVerses, \n  devotionals,\n  videos,\n  songs,\n  sermons,\n  resources,\n  flourishingScores\n} from '@shared/schema';\nimport { desc, eq } from 'drizzle-orm';\nimport { llmClient } from './llm-client';\n\n// Safe JSON parsing with error handling\nfunction safeJsonParse<T>(jsonString: string, context: string): T {\n  // Check if response is plain text instead of JSON\n  const trimmed = jsonString.trim();\n  if (!trimmed.startsWith('{') && !trimmed.startsWith('[')) {\n    console.warn(`⚠️ AI returned plain text in ${context}:`, trimmed.substring(0, 200));\n    \n    // Return empty array for list contexts, empty object otherwise\n    if (context.includes('Video') || context.includes('Song') || context.includes('Sermon') || context.includes('Resource')) {\n      console.log(`  → Returning empty array for ${context}`);\n      return [] as T;\n    } else {\n      throw new Error(`AI returned plain text instead of JSON in ${context}: ${trimmed.substring(0, 100)}`);\n    }\n  }\n  \n  try {\n    return JSON.parse(jsonString) as T;\n  } catch (error) {\n    console.error(`❌ JSON parse error in ${context}:`, error);\n    console.error(`Raw response:`, jsonString.substring(0, 500));\n    throw new Error(`Failed to parse AI response in ${context}: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\n// Get events summary for AI with recency weighting\nasync function getEventsSummary(userId: string): Promise<string> {\n  const recentEvents = await db.select()\n    .from(events)\n    .where(eq(events.userId, userId))\n    .orderBy(desc(events.createdAt))\n    .limit(50);\n\n  // Format with recency indicators (most recent first)\n  return recentEvents.map((e, index) => {\n    const recencyLabel = index < 10 ? '[RECENT]' : index < 25 ? '[MODERATE]' : '[OLDER]';\n    return `${recencyLabel} ${e.eventType}: ${JSON.stringify(e.eventData)}`;\n  }).join('\\n');\n}\n\n// Bible Verse Engine\nexport async function runBibleVerseEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'bible_verse',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are a Bible recommendation AI. Based on user's recent spiritual activities, recommend ONE Bible verse.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON. NO explanatory text before or after.\n2. Use this EXACT structure:\n{\n  \"book\": \"John\",\n  \"chapter\": 3,\n  \"verse_start\": 16,\n  \"verse_end\": 17,\n  \"translation\": \"NIV\",\n  \"reason\": \"Brief explanation of why this verse fits their journey\"\n}\n\n3. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities)\n   - [MODERATE] = Important (activities 11-25)\n   - [OLDER] = Context (activities 26-50)\n   \n   Weight [RECENT] activities HEAVILY in your recommendation.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nRespond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Generate a Bible verse recommendation based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 300\n    });\n\n    const aiResponse = response.content || '';\n    const verse = safeJsonParse<any>(aiResponse, 'Bible Verse Engine');\n\n    // Fetch actual verse content from Bible API\n    // bible-api.com only supports: KJV, WEB (default), and a few others\n    // Map any translation to a supported one\n    const supportedTranslation = 'kjv'; // King James Version is widely supported\n    \n    const verseRef = verse.verse_end \n      ? `${verse.book}+${verse.chapter}:${verse.verse_start}-${verse.verse_end}`\n      : `${verse.book}+${verse.chapter}:${verse.verse_start}`;\n    \n    let verseContent = '';\n    try {\n      const bibleResponse = await fetch(`https://bible-api.com/${verseRef}?translation=${supportedTranslation}`);\n      \n      if (!bibleResponse.ok) {\n        throw new Error(`Bible API returned ${bibleResponse.status}`);\n      }\n      \n      const bibleData = await bibleResponse.json();\n      verseContent = bibleData.text?.trim() || '';\n      \n      if (!verseContent) {\n        // Fallback if text is missing\n        verseContent = `For the verse ${verse.book} ${verse.chapter}:${verse.verse_start}, please open your Bible.`;\n      }\n    } catch (error) {\n      console.error('Failed to fetch verse content:', error);\n      verseContent = `For the verse ${verse.book} ${verse.chapter}:${verse.verse_start}, please open your Bible.`;\n    }\n\n    await db.update(personalizationRuns)\n      .set({ outputData: verse, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const result = await db.insert(bibleVerses).values({\n      userId,\n      book: verse.book,\n      chapter: verse.chapter,\n      verseStart: verse.verse_start,\n      verseEnd: verse.verse_end,\n      translation: 'KJV', // Store the actual translation used\n      content: verseContent,\n      notes: verse.reason,\n      personalizationRunId: runId\n    }).returning();\n\n    return { success: true, verse: result[0] };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n\n// Devotional Engine\nexport async function runDevotionalEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'devotional',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are a devotional content creator. Based on user's spiritual journey, create ONE personalized devotional.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON. NO explanatory text before or after.\n2. Use this EXACT structure:\n{\n  \"title\": \"Short, inspiring title\",\n  \"content\": \"2-3 paragraph devotional reflection (max 300 words)\",\n  \"scripture_reference\": \"Book Chapter:Verse (choose a relevant scripture based on user's activities)\"\n}\n\n3. IMPORTANT: Choose a scripture reference that matches the devotional theme and user's spiritual journey. Examples: \"Romans 8:28\", \"Philippians 4:6-7\", \"Psalm 23:1\", etc.\n\n4. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities)\n   - [MODERATE] = Important (activities 11-25)\n   - [OLDER] = Context (activities 26-50)\n   \n   Focus PRIMARILY on [RECENT] activities when creating the devotional.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nRespond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Generate a devotional based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 500\n    });\n\n    const aiResponse = response.content || '';\n    const devotional = safeJsonParse<any>(aiResponse, 'Devotional Engine');\n\n    await db.update(personalizationRuns)\n      .set({ outputData: devotional, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const result = await db.insert(devotionals).values({\n      userId,\n      title: devotional.title,\n      content: devotional.content,\n      scriptureReference: devotional.scripture_reference,\n      personalizationRunId: runId\n    }).returning();\n\n    return { success: true, devotional: result[0] };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n\n// Video Engine\nexport async function runVideoEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'video',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are a Christian content curator. Based on user's interests, recommend 3-5 relevant YouTube videos.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON array. NO explanatory text before or after.\n2. Use this EXACT structure:\n[\n  {\n    \"youtube_id\": \"dQw4w9WgXcQ\",\n    \"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n    \"title\": \"Video title\",\n    \"description\": \"Brief description of content and relevance\",\n    \"channel_name\": \"Channel name\",\n    \"thumbnail_url\": \"https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\"\n  }\n]\n\nIMPORTANT: \n- Provide REAL YouTube video IDs that you know exist\n- Use the format: https://www.youtube.com/watch?v={VIDEO_ID}\n- Thumbnail URL format: https://img.youtube.com/vi/{VIDEO_ID}/maxresdefault.jpg\n- Only recommend videos you are confident exist on YouTube\n\n3. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities)\n   - [MODERATE] = Important (activities 11-25)\n   - [OLDER] = Context (activities 26-50)\n   \n   Match videos PRIMARILY to [RECENT] activities and current spiritual state.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nRecommend videos about sermons, teachings, worship, testimonies, or Christian living. Respond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Generate video recommendations based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 1500\n    });\n\n    const aiResponse = response.content || '';\n    const videoList = safeJsonParse<any[]>(aiResponse, 'Video Engine');\n\n    await db.update(personalizationRuns)\n      .set({ outputData: videoList, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const results = [];\n    for (const video of videoList) {\n      const result = await db.insert(videos).values({\n        userId,\n        youtubeId: video.youtube_id,\n        youtubeUrl: video.youtube_url,\n        title: video.title,\n        description: video.description,\n        channelName: video.channel_name,\n        thumbnailUrl: video.thumbnail_url,\n        personalizationRunId: runId\n      }).returning();\n      results.push(result[0]);\n    }\n\n    return { success: true, videos: results };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n\n// Song Engine\nexport async function runSongEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'song',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are a worship music curator. Based on user's mood and spiritual state, recommend 3-5 worship songs.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON array. NO explanatory text before or after.\n2. Use this EXACT structure:\n[\n  {\n    \"youtube_id\": \"dQw4w9WgXcQ\",\n    \"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n    \"title\": \"Song title\",\n    \"artist\": \"Artist name\",\n    \"thumbnail_url\": \"https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\"\n  }\n]\n\n3. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities)\n   - [MODERATE] = Important (activities 11-25)\n   - [OLDER] = Context (activities 26-50)\n   \n   Choose songs that match the user's CURRENT mood/state from [RECENT] activities.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nRespond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Generate song recommendations based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 1000\n    });\n\n    const aiResponse = response.content || '';\n    const songList = safeJsonParse<any[]>(aiResponse, 'Song Engine');\n\n    await db.update(personalizationRuns)\n      .set({ outputData: songList, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const results = [];\n    for (const song of songList) {\n      const result = await db.insert(songs).values({\n        userId,\n        youtubeId: song.youtube_id,\n        youtubeUrl: song.youtube_url,\n        title: song.title,\n        artist: song.artist,\n        thumbnailUrl: song.thumbnail_url,\n        personalizationRunId: runId\n      }).returning();\n      results.push(result[0]);\n    }\n\n    return { success: true, songs: results };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n\n// Sermon Engine\nexport async function runSermonEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'sermon',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are an AI sermon curator. Based on user's spiritual needs, recommend 3 relevant sermon topics.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON array. NO explanatory text before or after.\n2. Use this EXACT structure:\n[\n  {\n    \"youtube_id\": \"dQw4w9WgXcQ\",\n    \"youtube_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n    \"title\": \"Sermon title\",\n    \"church_name\": \"Church name\",\n    \"duration\": \"45:30\",\n    \"thumbnail_url\": \"https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg\"\n  }\n]\n\n3. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities)\n   - [MODERATE] = Important (activities 11-25)\n   - [OLDER] = Context (activities 26-50)\n   \n   Address the user's CURRENT spiritual needs from [RECENT] activities.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nGenerate AI-powered sermon recommendations that will encourage spiritual growth. Respond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Generate sermon recommendations based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 1500\n    });\n\n    const aiResponse = response.content || '';\n    const sermonList = safeJsonParse<any[]>(aiResponse, 'Sermon Engine');\n\n    await db.update(personalizationRuns)\n      .set({ outputData: sermonList, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const results = [];\n    for (const sermon of sermonList) {\n      const result = await db.insert(sermons).values({\n        userId,\n        youtubeId: sermon.youtube_id,\n        youtubeUrl: sermon.youtube_url,\n        title: sermon.title,\n        churchName: sermon.church_name,\n        duration: sermon.duration,\n        thumbnailUrl: sermon.thumbnail_url,\n        personalizationRunId: runId\n      }).returning();\n      results.push(result[0]);\n    }\n\n    return { success: true, sermons: results };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n\n// Resource Engine\nexport async function runResourceEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'resource',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are a Christian resource curator. Based on user's spiritual journey and interests, recommend 5-8 diverse resources for spiritual growth.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON array. NO explanatory text before or after.\n2. Use this EXACT structure:\n[\n  {\n    \"title\": \"Resource title\",\n    \"description\": \"Brief description of content and why it's relevant (max 100 words)\",\n    \"url\": \"https://example.com/resource\",\n    \"resource_type\": \"article\",\n    \"author\": \"Author name (if applicable)\",\n    \"tags\": [\"theology\", \"prayer\", \"discipleship\"]\n  }\n]\n\nResource types: article, blog, website, pdf, book, podcast, study\n\n3. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities)\n   - [MODERATE] = Important (activities 11-25)\n   - [OLDER] = Context (activities 26-50)\n   \n   Recommend resources that address topics from [RECENT] activities first.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nProvide diverse resource types. Include reputable Christian publishers, ministries, and authors. Ensure URLs are real and accessible. Respond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Generate resource recommendations based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 2000\n    });\n\n    const aiResponse = response.content || '';\n    const resourceList = safeJsonParse<any[]>(aiResponse, 'Resource Engine');\n\n    await db.update(personalizationRuns)\n      .set({ outputData: resourceList, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const results = [];\n    for (const resource of resourceList) {\n      const result = await db.insert(resources).values({\n        userId,\n        title: resource.title,\n        description: resource.description,\n        url: resource.url,\n        resourceType: resource.resource_type,\n        author: resource.author,\n        tags: resource.tags,\n        personalizationRunId: runId\n      }).returning();\n      results.push(result[0]);\n    }\n\n    return { success: true, resources: results };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n\n// Flourishing Score Engine\nexport async function runFlourishingEngine(userId: string) {\n  const eventsSummary = await getEventsSummary(userId);\n  \n  const run = await db.insert(personalizationRuns).values({\n    userId,\n    engineType: 'flourishing',\n    inputData: { events_count: 50 },\n    status: 'pending'\n  }).returning();\n  \n  const runId = run[0].id;\n\n  try {\n    const systemPrompt = `You are a human flourishing analyst. Based on user's recent activities, assign scores (0-100) for each flourishing dimension and provide an actionable AI insight.\n\nCRITICAL RULES:\n1. Return ONLY valid JSON. NO explanatory text before or after.\n2. Use this EXACT structure:\n{\n  \"health_score\": 85,\n  \"relationships_score\": 72,\n  \"finances_score\": 68,\n  \"meaning_score\": 82,\n  \"happiness_score\": 76,\n  \"character_score\": 79,\n  \"faith_score\": 84,\n  \"overall_index\": 78,\n  \"ai_insight\": \"Your 'Faith' score is slightly lower this week. Consider spending more time in the Prayer Journal or reading Scripture.\"\n}\n\nScoring guidelines:\n- 80-100: Thriving\n- 60-79: Stable\n- 40-59: Struggling\n- 0-39: Crisis\n\nAI Insight guidelines:\n- Make it personal and actionable\n- Reference specific scores that need attention\n- Suggest ONLY these valid Harmony apps: Prayer Journal, Bible, Devotional, Spiritual Guides, Mood Tracker, SyncNote (notes), Videos, Songs, Sermons, Library (resources), Faith Circles\n- NEVER suggest apps not in the list above\n- Keep it under 120 characters for tile display\n\n3. PRIORITIZATION: Activities are labeled by recency:\n   - [RECENT] = Most important (last 10 activities) - WEIGHT HEAVILY in scoring\n   - [MODERATE] = Important (activities 11-25) - Consider for trends\n   - [OLDER] = Context (activities 26-50) - Background only\n   \n   Score based PRIMARILY on [RECENT] activities to reflect current state.\n\nUser's recent activities (50 total, most recent first):\n${eventsSummary}\n\nRespond with JSON only.`;\n\n    const response = await llmClient.chatCompletion({\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: 'Calculate my flourishing scores based on my recent activities.' }\n      ],\n      temperature: 0.7,\n      maxTokens: 500\n    });\n\n    const aiResponse = response.content || '';\n    const scores = safeJsonParse<any>(aiResponse, 'Flourishing Engine');\n\n    await db.update(personalizationRuns)\n      .set({ outputData: scores, status: 'completed' })\n      .where(eq(personalizationRuns.id, runId));\n\n    const result = await db.insert(flourishingScores).values({\n      userId,\n      healthScore: scores.health_score,\n      relationshipsScore: scores.relationships_score,\n      financesScore: scores.finances_score,\n      meaningScore: scores.meaning_score,\n      happinessScore: scores.happiness_score,\n      characterScore: scores.character_score,\n      faithScore: scores.faith_score,\n      overallIndex: scores.overall_index,\n      aiInsight: scores.ai_insight,\n      personalizationRunId: runId\n    }).returning();\n\n    return { success: true, scores: result[0] };\n  } catch (error) {\n    await db.update(personalizationRuns)\n      .set({ status: 'failed' })\n      .where(eq(personalizationRuns.id, runId));\n    throw error;\n  }\n}\n","size_bytes":21573},"server/events.ts":{"content":"import { db } from './db';\nimport { events } from '@shared/schema';\n\nexport type EventType = \n  | 'mood' \n  | 'prayer' \n  | 'bible_read' \n  | 'bible_verse_saved'\n  | 'devotional_read' \n  | 'note_created' \n  | 'guide_chat' \n  | 'video_watched' \n  | 'song_listened' \n  | 'resource_read'\n  | 'circle_joined'\n  | 'circle_post'\n  | 'tithe'\n  | 'generosity'\n  | 'debt_payment'\n  | 'income'\n  | 'expense'\n  | 'generosity_commitment'\n  | 'financial_goal_set'\n  | 'stewardship_reflection';\n\n// Track pending flourishing calculations per user to avoid duplicate calls\nconst pendingCalculations = new Map<string, NodeJS.Timeout>();\n\n// Auto-trigger flourishing calculation after event\nasync function autoCalculateFlourishing(userId: string) {\n  // Clear any existing pending calculation for this user\n  const existing = pendingCalculations.get(userId);\n  if (existing) {\n    clearTimeout(existing);\n  }\n\n  // Debounce: wait 5 seconds before calculating to batch multiple events\n  const timeout = setTimeout(async () => {\n    try {\n      const { runFlourishingEngine } = await import('./personalization');\n      await runFlourishingEngine(userId);\n      console.log(`✨ Auto-calculated flourishing scores for user ${userId}`);\n    } catch (error) {\n      console.error('Failed to auto-calculate flourishing:', error);\n    } finally {\n      pendingCalculations.delete(userId);\n    }\n  }, 5000); // 5 second debounce\n\n  pendingCalculations.set(userId, timeout);\n}\n\n// Auto-trigger personalization engines based on event type\nasync function autoGeneratePersonalizations(userId: string, eventType: EventType) {\n  try {\n    const { \n      runBibleVerseEngine, runDevotionalEngine, runVideoEngine,\n      runSongEngine, runSermonEngine, runResourceEngine\n    } = await import('./personalization');\n\n    // Events that trigger spiritual content personalization\n    const spiritualEvents: EventType[] = ['mood', 'prayer', 'note_created', 'guide_chat', 'tithe', 'generosity', 'debt_payment', 'stewardship_reflection'];\n    \n    // Events that refine existing recommendations\n    const engagementEvents: EventType[] = ['video_watched', 'song_listened', 'resource_read', 'bible_verse_saved'];\n    \n    // Community events trigger broader personalization\n    const communityEvents: EventType[] = ['circle_joined', 'circle_post'];\n    \n    // Financial tracking events (update flourishing but don't trigger all personalizations)\n    const financialTrackingEvents: EventType[] = ['income', 'expense', 'generosity_commitment', 'financial_goal_set'];\n\n    if (spiritualEvents.includes(eventType)) {\n      // Generate ALL personalized content for spiritual events\n      console.log(`🎯 Triggering real-time personalization for ${eventType}...`);\n      \n      await Promise.allSettled([\n        runBibleVerseEngine(userId),\n        runDevotionalEngine(userId),\n        runVideoEngine(userId),\n        runSongEngine(userId),\n        runSermonEngine(userId),\n        runResourceEngine(userId)\n      ]);\n      \n      console.log(`✨ Real-time personalization complete for user ${userId}`);\n    } else if (engagementEvents.includes(eventType)) {\n      // Refine recommendations based on engagement\n      console.log(`🔄 Refining recommendations based on ${eventType}...`);\n      \n      if (eventType === 'video_watched') {\n        await runVideoEngine(userId);\n      } else if (eventType === 'song_listened') {\n        await runSongEngine(userId);\n      } else if (eventType === 'resource_read') {\n        await runResourceEngine(userId);\n      } else if (eventType === 'bible_verse_saved') {\n        await runBibleVerseEngine(userId);\n      }\n    } else if (communityEvents.includes(eventType)) {\n      // Community engagement triggers devotional and resource updates\n      await Promise.allSettled([\n        runDevotionalEngine(userId),\n        runResourceEngine(userId)\n      ]);\n      console.log(`👥 Updated community-based recommendations for user ${userId}`);\n    }\n  } catch (error) {\n    console.error('Failed to auto-generate personalizations:', error);\n  }\n}\n\nexport async function createEvent(\n  userId: string,\n  eventType: EventType,\n  eventData: Record<string, any>,\n  immediate: boolean = false\n): Promise<void> {\n  try {\n    await db.insert(events).values({\n      userId,\n      eventType,\n      eventData\n    });\n\n    // Fire-and-forget: trigger personalization engines in background without blocking\n    autoGeneratePersonalizations(userId, eventType).catch(err => \n      console.error('Background personalization failed:', err)\n    );\n\n    // Fire-and-forget: trigger flourishing calculation in background\n    if (immediate) {\n      // Immediate calculation for user-triggered actions (no debounce, but still non-blocking)\n      (async () => {\n        try {\n          const { runFlourishingEngine } = await import('./personalization');\n          await runFlourishingEngine(userId);\n          console.log(`✨ Immediately calculated flourishing scores for user ${userId}`);\n        } catch (err) {\n          console.error('Immediate flourishing calculation failed:', err);\n        }\n      })();\n    } else {\n      // Debounced calculation for background events (also fire-and-forget)\n      autoCalculateFlourishing(userId).catch(err =>\n        console.error('Background flourishing calculation failed:', err)\n      );\n    }\n  } catch (error) {\n    console.error('Failed to create event:', error);\n  }\n}\n\nexport async function getRecentEvents(userId: string, limit: number = 20) {\n  const { eq: eqOp } = await import('drizzle-orm');\n  return db.select()\n    .from(events)\n    .where(eqOp(events.userId, userId))\n    .orderBy(events.createdAt)\n    .limit(limit);\n}\n","size_bytes":5654},"client/src/pages/landing.tsx":{"content":"import { Link } from 'wouter';\nimport { Book, Heart, MessageSquare, TrendingUp, Users, Sparkles, CheckCircle2, ArrowRight, Zap, Target, BarChart3 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\nexport default function Landing() {\n  const features = [\n    {\n      icon: <TrendingUp className=\"w-6 h-6\" />,\n      title: \"Flourishing Index\",\n      description: \"AI-powered spiritual wellness tracking with personalized insights for your faith journey\",\n      color: \"from-purple-500 to-indigo-600\"\n    },\n    {\n      icon: <Book className=\"w-6 h-6\" />,\n      title: \"Holy Bible\",\n      description: \"Daily personalized scripture with AI recommendations based on your spiritual growth\",\n      color: \"from-cyan-400 to-blue-500\"\n    },\n    {\n      icon: <MessageSquare className=\"w-6 h-6\" />,\n      title: \"Prayer Journal\",\n      description: \"Track your prayers, mark answered prayers, and witness God's faithfulness\",\n      color: \"from-pink-400 to-rose-500\"\n    },\n    {\n      icon: <Heart className=\"w-6 h-6\" />,\n      title: \"Daily Devotionals\",\n      description: \"AI-generated devotional content personalized to your spiritual journey\",\n      color: \"from-green-400 to-emerald-500\"\n    },\n    {\n      icon: <Sparkles className=\"w-6 h-6\" />,\n      title: \"Spiritual Guides\",\n      description: \"AI companions for prayer support, biblical wisdom, and spiritual encouragement\",\n      color: \"from-amber-400 to-orange-500\"\n    },\n    {\n      icon: <Users className=\"w-6 h-6\" />,\n      title: \"Faith Circles\",\n      description: \"Join communities for Bible study, prayer, fellowship, and spiritual growth\",\n      color: \"from-violet-400 to-purple-500\"\n    }\n  ];\n\n  const benefits = [\n    \"Desktop-inspired workspace with windows, dock, and tile views\",\n    \"14+ faith-based productivity apps in one platform\",\n    \"AI-powered personalization for spiritual growth\",\n    \"Prayer tracking with answered prayer celebration\",\n    \"Community forums for fellowship and support\",\n    \"Beautiful stained-glass aesthetic design\"\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#f5f1e8] via-[#f5f1e8] to-amber-50 dark:from-[#1a1410] dark:via-[#1a1410] dark:to-slate-900\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        {/* Animated dot pattern background */}\n        <div className=\"absolute inset-0 bg-[radial-gradient(#c9a961_1px,transparent_1px)] [background-size:16px_16px] opacity-20 animate-pulse\"></div>\n        \n        {/* Gradient overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-[#f5f1e8]/50 to-[#f5f1e8] dark:via-[#1a1410]/50 dark:to-[#1a1410]\"></div>\n\n        {/* Floating gradient orbs for vibrancy */}\n        <div className=\"absolute top-20 left-10 w-72 h-72 bg-purple-500/20 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute top-40 right-20 w-96 h-96 bg-amber-500/20 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n\n        <div className=\"relative\">\n          {/* Navigation */}\n          <nav className=\"container mx-auto px-6 py-6 flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n                <Heart className=\"w-6 h-6 text-white\" />\n              </div>\n              <span className=\"text-2xl font-bold text-foreground\">Harmony</span>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/login\">\n                <Button variant=\"ghost\" data-testid=\"button-nav-login\">\n                  Sign In\n                </Button>\n              </Link>\n              <Link href=\"/register\">\n                <Button className=\"bg-amber-600 text-white shadow-lg\" data-testid=\"button-nav-register\">\n                  Get Started\n                </Button>\n              </Link>\n            </div>\n          </nav>\n\n          {/* Hero Content - Split Layout */}\n          <div className=\"container mx-auto px-6 py-16 md:py-24\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              {/* Left Side - Value Proposition */}\n              <div className=\"text-center lg:text-left\">\n                <div className=\"inline-flex items-center gap-2 bg-amber-100 dark:bg-amber-900/30 px-4 py-2 rounded-full mb-6\">\n                  <Zap className=\"w-4 h-4 text-amber-600\" />\n                  <span className=\"text-sm font-medium text-amber-700 dark:text-amber-400\">AI-Powered Faith Growth Platform</span>\n                </div>\n                \n                <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-bold text-foreground mb-6 leading-tight\">\n                  Measure Your\n                  <span className=\"block bg-gradient-to-r from-purple-600 via-amber-600 to-amber-500 bg-clip-text text-transparent\">\n                    Spiritual Flourishing\n                  </span>\n                </h1>\n                \n                <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-xl\">\n                  Track your faith journey with the <span className=\"font-semibold text-amber-600\">Flourishing Index</span> - \n                  a comprehensive score across 7 spiritual dimensions powered by AI insights.\n                </p>\n\n                {/* Key Value Points */}\n                <div className=\"grid sm:grid-cols-2 gap-4 mb-8\">\n                  <div className=\"flex items-center gap-3 bg-white/60 dark:bg-slate-800/60 backdrop-blur-sm rounded-xl p-3 border border-amber-200/30 dark:border-amber-800/30\">\n                    <div className=\"p-2 rounded-lg bg-purple-100 dark:bg-purple-900/30\">\n                      <BarChart3 className=\"w-5 h-5 text-purple-600\" />\n                    </div>\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold text-foreground\">Real-Time Tracking</div>\n                      <div className=\"text-xs text-muted-foreground\">7 spiritual dimensions</div>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 bg-white/60 dark:bg-slate-800/60 backdrop-blur-sm rounded-xl p-3 border border-amber-200/30 dark:border-amber-800/30\">\n                    <div className=\"p-2 rounded-lg bg-amber-100 dark:bg-amber-900/30\">\n                      <Target className=\"w-5 h-5 text-amber-600\" />\n                    </div>\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold text-foreground\">AI Insights</div>\n                      <div className=\"text-xs text-muted-foreground\">Personalized guidance</div>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-col sm:flex-row items-center lg:items-start gap-4\">\n                  <Link href=\"/register\">\n                    <Button \n                      size=\"lg\" \n                      className=\"bg-gradient-to-r from-amber-600 to-amber-500 text-white text-lg px-8 py-6 shadow-xl shadow-amber-500/25\"\n                      data-testid=\"button-hero-get-started\"\n                    >\n                      Start Measuring Today\n                      <ArrowRight className=\"w-5 h-5 ml-2\" />\n                    </Button>\n                  </Link>\n                  <Link href=\"/login\">\n                    <Button \n                      size=\"lg\" \n                      variant=\"outline\" \n                      className=\"text-lg px-8 py-6 border-2 border-amber-300 dark:border-amber-700\"\n                      data-testid=\"button-hero-sign-in\"\n                    >\n                      Sign In\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n\n              {/* Right Side - Flourishing Index Visualization */}\n              <div className=\"relative\">\n                {/* Animated background glow */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/20 via-amber-500/20 to-pink-500/20 rounded-3xl blur-3xl animate-pulse\"></div>\n                \n                {/* Main visualization card */}\n                <div className=\"relative bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl rounded-3xl p-8 border-2 border-amber-200/50 dark:border-amber-800/50 shadow-2xl\">\n                  <div className=\"text-center mb-6\">\n                    <div className=\"inline-flex items-center gap-2 mb-2\">\n                      <TrendingUp className=\"w-5 h-5 text-amber-600\" />\n                      <span className=\"text-sm font-medium text-muted-foreground\">Your Flourishing Index</span>\n                    </div>\n                    <div className=\"text-7xl font-bold bg-gradient-to-br from-purple-600 via-amber-600 to-amber-500 bg-clip-text text-transparent mb-2\" data-testid=\"demo-fi-score\">\n                      85\n                    </div>\n                    <div className=\"flex items-center justify-center gap-2 text-lg font-semibold text-emerald-600 dark:text-emerald-400\" data-testid=\"demo-fi-status\">\n                      <span>Thriving</span>\n                      <Sparkles className=\"w-4 h-4\" />\n                    </div>\n                  </div>\n\n                  {/* 7 Dimensions with animated bars */}\n                  <div className=\"space-y-3\">\n                    {[\n                      { label: 'Health', score: 85, color: 'from-red-500 to-pink-600' },\n                      { label: 'Relationships', score: 78, color: 'from-blue-500 to-cyan-600' },\n                      { label: 'Finances', score: 82, color: 'from-green-500 to-emerald-600' },\n                      { label: 'Meaning', score: 90, color: 'from-purple-500 to-violet-600' },\n                      { label: 'Happiness', score: 88, color: 'from-yellow-500 to-amber-600' },\n                      { label: 'Character', score: 92, color: 'from-indigo-500 to-purple-600' },\n                      { label: 'Faith', score: 95, color: 'from-amber-500 to-orange-600' },\n                    ].map((dim, idx) => (\n                      <div key={idx} className=\"group\">\n                        <div className=\"flex items-center justify-between text-sm mb-1\">\n                          <span className=\"font-medium text-foreground\">{dim.label}</span>\n                          <span className=\"text-muted-foreground\">{dim.score}/100</span>\n                        </div>\n                        <div className=\"h-2 bg-muted rounded-full overflow-hidden\">\n                          <div \n                            className={`h-full bg-gradient-to-r ${dim.color} transition-all duration-1000 ease-out`}\n                            style={{ \n                              width: `${dim.score}%`,\n                              animation: `slideIn 0.8s ease-out ${idx * 0.1}s both`\n                            }}\n                          />\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* AI Insight Preview */}\n                  <div className=\"mt-6 p-4 bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-950/50 dark:to-orange-950/50 rounded-xl border border-amber-200 dark:border-amber-800\">\n                    <div className=\"flex items-start gap-2\">\n                      <Sparkles className=\"w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0\" />\n                      <p className=\"text-sm text-foreground\" data-testid=\"demo-ai-insight\">\n                        <span className=\"font-semibold\">AI Insight:</span> Your faith score is exceptional! \n                        Consider mentoring others in their spiritual journey.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* How It Works - Quick Explainer */}\n      <div className=\"bg-gradient-to-br from-purple-50 to-amber-50 dark:from-purple-950/30 dark:to-amber-950/30 py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n              How Your Flourishing Index Works\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n              Our AI analyzes your spiritual activities to give you a comprehensive view of your faith journey\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8 max-w-5xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 mx-auto mb-4 rounded-2xl bg-gradient-to-br from-purple-500 to-purple-600 flex items-center justify-center shadow-lg\">\n                <Heart className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-2\">Track Your Activities</h3>\n              <p className=\"text-muted-foreground\">Prayer, Bible reading, mood, community engagement - we analyze it all</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 mx-auto mb-4 rounded-2xl bg-gradient-to-br from-amber-500 to-amber-600 flex items-center justify-center shadow-lg\">\n                <BarChart3 className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-2\">Get Your Score</h3>\n              <p className=\"text-muted-foreground\">See how you're doing across 7 key spiritual dimensions in real-time</p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-20 h-20 mx-auto mb-4 rounded-2xl bg-gradient-to-br from-emerald-500 to-emerald-600 flex items-center justify-center shadow-lg\">\n                <Sparkles className=\"w-10 h-10 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-foreground mb-2\">Grow with AI Insights</h3>\n              <p className=\"text-muted-foreground\">Receive personalized recommendations to deepen your faith journey</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Features Section */}\n      <div className=\"container mx-auto px-6 py-20\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\">\n            Complete Faith Workspace\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            14+ powerful apps designed to nurture every aspect of your spiritual growth\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {features.map((feature, index) => (\n            <div\n              key={index}\n              className=\"bg-white/60 dark:bg-slate-800/60 backdrop-blur-xl rounded-2xl p-6 border border-amber-900/10 dark:border-amber-200/10 hover:-translate-y-1 transition-all duration-200 hover:shadow-xl\"\n              data-testid={`feature-card-${index}`}\n            >\n              <div className={`w-14 h-14 rounded-xl bg-gradient-to-br ${feature.color} flex items-center justify-center text-white mb-4 shadow-lg`}>\n                {feature.icon}\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n                {feature.title}\n              </h3>\n              <p className=\"text-muted-foreground\">\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Benefits Section */}\n      <div className=\"bg-gradient-to-br from-amber-50 to-amber-100/50 dark:from-slate-800/50 dark:to-slate-900/50 py-20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h2 className=\"text-4xl font-bold text-foreground mb-4\">\n                Why Choose Harmony?\n              </h2>\n              <p className=\"text-xl text-muted-foreground\">\n                A complete spiritual growth platform designed for modern believers\n              </p>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {benefits.map((benefit, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-start gap-3 bg-white/60 dark:bg-slate-800/60 backdrop-blur-xl rounded-xl p-4 border border-amber-900/10 dark:border-amber-200/10\"\n                  data-testid={`benefit-item-${index}`}\n                >\n                  <CheckCircle2 className=\"w-6 h-6 text-amber-600 flex-shrink-0 mt-0.5\" />\n                  <span className=\"text-foreground\">{benefit}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* CTA Section */}\n      <div className=\"container mx-auto px-6 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center bg-gradient-to-br from-purple-600 via-amber-600 to-amber-500 rounded-3xl p-12 md:p-16 text-white relative overflow-hidden shadow-2xl\">\n          {/* Decorative background */}\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_top_right,rgba(255,255,255,0.2),transparent)]\"></div>\n          <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_bottom_left,rgba(255,255,255,0.1),transparent)]\"></div>\n          \n          <div className=\"relative\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              Start Measuring Your Spiritual Growth\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Join believers worldwide tracking their faith journey with AI-powered insights\n            </p>\n            <Link href=\"/register\">\n              <Button \n                size=\"lg\" \n                className=\"bg-white text-amber-600 text-lg px-10 py-6 shadow-xl\"\n                data-testid=\"button-cta-get-started\"\n              >\n                Get Your Flourishing Score\n                <ArrowRight className=\"w-5 h-5 ml-2\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-amber-900/10 dark:border-amber-200/10 py-12\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-6\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-8 h-8 rounded-lg bg-gradient-to-br from-amber-400 to-amber-600 flex items-center justify-center shadow-lg\">\n                <Heart className=\"w-5 h-5 text-white\" />\n              </div>\n              <span className=\"text-xl font-bold text-foreground\">Harmony</span>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              © 2025 Harmony. Faith-based productivity workspace.\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      {/* Add animation keyframes */}\n      <style>{`\n        @keyframes slideIn {\n          from {\n            width: 0%;\n            opacity: 0;\n          }\n          to {\n            opacity: 1;\n          }\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n          * {\n            animation-duration: 0.01ms !important;\n            animation-iteration-count: 1 !important;\n            transition-duration: 0.01ms !important;\n          }\n        }\n      `}</style>\n    </div>\n  );\n}\n","size_bytes":19554},"client/src/components/apps/FaithCirclesWindow.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Users, Loader2, Search, ArrowLeft, Send, Plus } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { formatDistanceToNow } from 'date-fns';\n\ninterface FaithCircle {\n  id: string;\n  creatorId: string;\n  title: string;\n  description: string;\n  category: string;\n  memberCount: number;\n  isPublic: boolean;\n  createdAt: string;\n  updatedAt: string;\n  creatorName: string | null;\n  isMember: boolean;\n}\n\ninterface CirclePost {\n  id: string;\n  circleId: string;\n  userId: string;\n  content: string;\n  createdAt: string;\n  userName: string | null;\n  userEmail: string;\n}\n\nconst categories = [\n  { value: 'all', label: 'All Circles' },\n  { value: 'bible_study', label: 'Bible Study' },\n  { value: 'prayer', label: 'Prayer' },\n  { value: 'fellowship', label: 'Fellowship' },\n  { value: 'youth', label: 'Youth' },\n  { value: 'marriage', label: 'Marriage' },\n  { value: 'general', label: 'General' },\n];\n\nconst getCategoryColor = (category: string) => {\n  const colors: Record<string, string> = {\n    bible_study: 'bg-blue-100 text-blue-700 dark:bg-blue-950/30 dark:text-blue-400',\n    prayer: 'bg-purple-100 text-purple-700 dark:bg-purple-950/30 dark:text-purple-400',\n    fellowship: 'bg-green-100 text-green-700 dark:bg-green-950/30 dark:text-green-400',\n    youth: 'bg-orange-100 text-orange-700 dark:bg-orange-950/30 dark:text-orange-400',\n    marriage: 'bg-pink-100 text-pink-700 dark:bg-pink-950/30 dark:text-pink-400',\n    general: 'bg-gray-100 text-gray-700 dark:bg-gray-950/30 dark:text-gray-400',\n  };\n  return colors[category] || colors.general;\n};\n\nexport default function FaithCirclesWindow() {\n  const { toast } = useToast();\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCircle, setSelectedCircle] = useState<FaithCircle | null>(null);\n  const [newPostContent, setNewPostContent] = useState('');\n  const [showCreateForm, setShowCreateForm] = useState(false);\n  const [newCircleTitle, setNewCircleTitle] = useState('');\n  const [newCircleDescription, setNewCircleDescription] = useState('');\n  const [newCircleCategory, setNewCircleCategory] = useState('general');\n\n  const { data: circlesData, isLoading } = useQuery<{ data: FaithCircle[] }>({\n    queryKey: ['/api/faith-circles', { category: selectedCategory, search: searchQuery }],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedCategory !== 'all') params.append('category', selectedCategory);\n      if (searchQuery) params.append('search', searchQuery);\n      const url = `/api/faith-circles${params.toString() ? '?' + params.toString() : ''}`;\n      const res = await fetch(url, { credentials: 'include' });\n      return res.json();\n    }\n  });\n\n  const { data: postsData, isLoading: postsLoading } = useQuery<{ data: CirclePost[] }>({\n    queryKey: selectedCircle ? [`/api/faith-circles/${selectedCircle.id}/posts`] : ['disabled'],\n    enabled: !!selectedCircle\n  });\n\n  const createCircleMutation = useMutation({\n    mutationFn: async (data: { title: string; description: string; category: string }) => {\n      const res = await apiRequest('POST', '/api/faith-circles', data);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faith-circles'] });\n      setShowCreateForm(false);\n      setNewCircleTitle('');\n      setNewCircleDescription('');\n      setNewCircleCategory('general');\n      toast({ title: 'Circle created!', description: 'Your new Faith Circle is ready.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to create circle.', variant: 'destructive' });\n    }\n  });\n\n  const joinMutation = useMutation({\n    mutationFn: async (circleId: string) => {\n      const res = await apiRequest('POST', `/api/faith-circles/${circleId}/join`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faith-circles'] });\n      if (selectedCircle) {\n        setSelectedCircle({ ...selectedCircle, isMember: true, memberCount: selectedCircle.memberCount + 1 });\n      }\n      toast({ title: 'Joined!', description: 'You are now a member of this circle.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to join circle.', variant: 'destructive' });\n    }\n  });\n\n  const leaveMutation = useMutation({\n    mutationFn: async (circleId: string) => {\n      const res = await apiRequest('POST', `/api/faith-circles/${circleId}/leave`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/faith-circles'] });\n      if (selectedCircle) {\n        setSelectedCircle({ ...selectedCircle, isMember: false, memberCount: Math.max(0, selectedCircle.memberCount - 1) });\n      }\n      toast({ title: 'Left circle', description: 'You are no longer a member.' });\n    },\n    onError: () => {\n      toast({ title: 'Error', description: 'Failed to leave circle.', variant: 'destructive' });\n    }\n  });\n\n  const postMutation = useMutation({\n    mutationFn: async ({ circleId, content }: { circleId: string; content: string }) => {\n      const res = await apiRequest('POST', `/api/faith-circles/${circleId}/posts`, { content });\n      return res.json();\n    },\n    onSuccess: () => {\n      if (selectedCircle) {\n        queryClient.invalidateQueries({ queryKey: [`/api/faith-circles/${selectedCircle.id}/posts`] });\n      }\n      setNewPostContent('');\n      toast({ title: 'Posted!', description: 'Your message has been shared.' });\n    },\n    onError: (error: any) => {\n      const message = error?.message?.includes('NOT_MEMBER') \n        ? 'You must be a member to post.' \n        : 'Failed to post message.';\n      toast({ title: 'Error', description: message, variant: 'destructive' });\n    }\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-full\">\n        <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  // Create Circle Form\n  if (showCreateForm) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowCreateForm(false)}\n            data-testid=\"button-back-to-circles\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n          <h2 className=\"text-lg font-semibold text-foreground\">Create New Circle</h2>\n        </div>\n\n        <Input\n          placeholder=\"Circle Title\"\n          value={newCircleTitle}\n          onChange={(e) => setNewCircleTitle(e.target.value)}\n          data-testid=\"input-circle-title\"\n        />\n\n        <Textarea\n          placeholder=\"Circle Description\"\n          value={newCircleDescription}\n          onChange={(e) => setNewCircleDescription(e.target.value)}\n          rows={4}\n          data-testid=\"input-circle-description\"\n        />\n\n        <div>\n          <label className=\"text-sm font-medium text-foreground mb-2 block\">Category</label>\n          <div className=\"flex flex-wrap gap-2\">\n            {categories.slice(1).map((cat) => (\n              <Button\n                key={cat.value}\n                variant={newCircleCategory === cat.value ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setNewCircleCategory(cat.value)}\n                data-testid={`button-category-${cat.value}`}\n              >\n                {cat.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        <Button\n          onClick={() => createCircleMutation.mutate({\n            title: newCircleTitle,\n            description: newCircleDescription,\n            category: newCircleCategory\n          })}\n          disabled={!newCircleTitle.trim() || !newCircleDescription.trim() || createCircleMutation.isPending}\n          data-testid=\"button-create-circle\"\n        >\n          {createCircleMutation.isPending ? (\n            <>\n              <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              Creating...\n            </>\n          ) : (\n            <>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Circle\n            </>\n          )}\n        </Button>\n      </div>\n    );\n  }\n\n  // Circle Detail View\n  if (selectedCircle) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setSelectedCircle(null)}\n            data-testid=\"button-back-to-list\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n\n        <div className=\"p-4 rounded-lg bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-950/30 dark:to-blue-950/30 border border-border\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex-1\">\n              <h2 className=\"text-lg font-semibold text-foreground mb-1\" data-testid=\"text-circle-title\">{selectedCircle.title}</h2>\n              <p className=\"text-sm text-muted-foreground mb-3\" data-testid=\"text-circle-description\">{selectedCircle.description}</p>\n              <div className=\"flex items-center gap-3 text-sm\">\n                <span className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(selectedCircle.category)}`}>\n                  {categories.find(c => c.value === selectedCircle.category)?.label}\n                </span>\n                <span className=\"text-muted-foreground flex items-center gap-1\">\n                  <Users className=\"h-3 w-3\" />\n                  {selectedCircle.memberCount} members\n                </span>\n              </div>\n            </div>\n            {selectedCircle.isMember ? (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => leaveMutation.mutate(selectedCircle.id)}\n                disabled={leaveMutation.isPending}\n                data-testid=\"button-leave-circle\"\n              >\n                {leaveMutation.isPending ? 'Leaving...' : 'Leave Circle'}\n              </Button>\n            ) : (\n              <Button\n                size=\"sm\"\n                onClick={() => joinMutation.mutate(selectedCircle.id)}\n                disabled={joinMutation.isPending}\n                data-testid=\"button-join-circle\"\n              >\n                {joinMutation.isPending ? 'Joining...' : 'Join Circle'}\n              </Button>\n            )}\n          </div>\n        </div>\n\n        {selectedCircle.isMember && (\n          <div className=\"p-4 bg-card border border-border rounded-lg\">\n            <Textarea\n              placeholder=\"Share your thoughts with the circle...\"\n              value={newPostContent}\n              onChange={(e) => setNewPostContent(e.target.value)}\n              rows={3}\n              data-testid=\"input-new-post\"\n            />\n            <div className=\"flex justify-end mt-2\">\n              <Button\n                onClick={() => postMutation.mutate({ circleId: selectedCircle.id, content: newPostContent })}\n                disabled={!newPostContent.trim() || postMutation.isPending}\n                size=\"sm\"\n                data-testid=\"button-post-message\"\n              >\n                {postMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Posting...\n                  </>\n                ) : (\n                  <>\n                    <Send className=\"mr-2 h-4 w-4\" />\n                    Post\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-foreground\">Discussion</h3>\n          {postsLoading ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <Loader2 className=\"h-5 w-5 animate-spin text-primary\" />\n            </div>\n          ) : postsData?.data && postsData.data.length > 0 ? (\n            <div className=\"space-y-3\">\n              {postsData.data.map((post) => (\n                <div\n                  key={post.id}\n                  className=\"p-3 bg-card border border-border rounded-lg\"\n                  data-testid={`post-${post.id}`}\n                >\n                  <div className=\"flex items-start gap-3\">\n                    <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                      <span className=\"text-sm font-medium text-primary\">\n                        {(post.userName || post.userEmail)?.[0]?.toUpperCase()}\n                      </span>\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <span className=\"text-sm font-medium text-foreground\" data-testid={`text-post-author-${post.id}`}>\n                          {post.userName || post.userEmail.split('@')[0]}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\" data-testid={`text-post-time-${post.id}`}>\n                          {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-foreground break-words\" data-testid={`text-post-content-${post.id}`}>\n                        {post.content}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-sm text-muted-foreground text-center py-8\">\n              No posts yet. {selectedCircle.isMember ? 'Be the first to share!' : 'Join to participate.'}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  // Main Grid View\n  const circles = circlesData?.data || [];\n  const filteredCircles = circles;\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex items-center justify-between gap-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search circles...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-9\"\n            data-testid=\"input-search-circles\"\n          />\n        </div>\n        <Button\n          onClick={() => setShowCreateForm(true)}\n          size=\"sm\"\n          data-testid=\"button-create-new-circle\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Create\n        </Button>\n      </div>\n\n      <div className=\"flex flex-wrap gap-2\">\n        {categories.map((cat) => (\n          <Button\n            key={cat.value}\n            variant={selectedCategory === cat.value ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSelectedCategory(cat.value)}\n            data-testid={`button-filter-${cat.value}`}\n          >\n            {cat.label}\n          </Button>\n        ))}\n      </div>\n\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {filteredCircles.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-sm text-muted-foreground\">No circles found</p>\n          </div>\n        ) : (\n          filteredCircles.map((circle) => (\n            <div\n              key={circle.id}\n              className=\"p-3 bg-card border border-border rounded-lg hover-elevate cursor-pointer\"\n              onClick={() => setSelectedCircle(circle)}\n              data-testid={`circle-card-${circle.id}`}\n            >\n              <div className=\"flex items-start justify-between gap-3\">\n                <div className=\"flex-1 min-w-0\">\n                  <h3 className=\"text-sm font-semibold text-foreground mb-1\" data-testid={`text-circle-title-${circle.id}`}>\n                    {circle.title}\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\" data-testid={`text-circle-desc-${circle.id}`}>\n                    {circle.description}\n                  </p>\n                  <div className=\"flex items-center gap-2 flex-wrap\">\n                    <span className={`px-2 py-0.5 rounded-full text-xs font-medium ${getCategoryColor(circle.category)}`}>\n                      {categories.find(c => c.value === circle.category)?.label}\n                    </span>\n                    <span className=\"text-xs text-muted-foreground flex items-center gap-1\">\n                      <Users className=\"h-3 w-3\" />\n                      {circle.memberCount}\n                    </span>\n                  </div>\n                </div>\n                {circle.isMember && (\n                  <span className=\"px-2 py-1 bg-green-100 text-green-700 dark:bg-green-950/30 dark:text-green-400 text-xs rounded-full flex-shrink-0\">\n                    Joined\n                  </span>\n                )}\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":17588},"server/llm-client.ts":{"content":"import OpenAI from 'openai';\nimport { GoogleGenAI } from '@google/genai';\n\n// Multi-model LLM client supporting OpenAI and Gemini\n// Uses DEFAULT_MODEL env variable (defaults to 'gemini')\n\ntype LLMModel = 'openai' | 'gemini';\n\ninterface ChatMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\ninterface ChatCompletionParams {\n  messages: ChatMessage[];\n  temperature?: number;\n  maxTokens?: number;\n}\n\ninterface ChatCompletionResponse {\n  content: string;\n}\n\nclass LLMClient {\n  private model: LLMModel;\n  private openai: OpenAI | null = null;\n  private gemini: GoogleGenAI | null = null;\n\n  constructor() {\n    // Get model from environment variable, default to gemini\n    const defaultModel = (process.env.DEFAULT_MODEL || 'gemini').toLowerCase();\n    this.model = defaultModel === 'openai' ? 'openai' : 'gemini';\n\n    console.log(`🤖 LLM Client initialized with model: ${this.model}`);\n\n    // Initialize the selected model\n    if (this.model === 'openai') {\n      if (!process.env.OPENAI_API_KEY) {\n        throw new Error('OPENAI_API_KEY not found in environment');\n      }\n      this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n    } else {\n      if (!process.env.GEMINI_API_KEY) {\n        throw new Error('GEMINI_API_KEY not found in environment');\n      }\n      this.gemini = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });\n    }\n  }\n\n  async chatCompletion(params: ChatCompletionParams): Promise<ChatCompletionResponse> {\n    if (this.model === 'openai') {\n      return this.openaiChatCompletion(params);\n    } else {\n      // Try Gemini first, fallback to OpenAI if it fails\n      try {\n        return await this.geminiChatCompletion(params);\n      } catch (error: any) {\n        // Check if it's a quota/rate limit error\n        if (error?.status === 429 || error?.message?.includes('quota') || error?.message?.includes('RESOURCE_EXHAUSTED')) {\n          console.warn('⚠️ Gemini quota exceeded, falling back to OpenAI...');\n          \n          // Initialize OpenAI if not already done\n          if (!this.openai && process.env.OPENAI_API_KEY) {\n            this.openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n          }\n          \n          if (this.openai) {\n            return await this.openaiChatCompletion(params);\n          }\n        }\n        \n        // Re-throw if not a quota error or no fallback available\n        throw error;\n      }\n    }\n  }\n\n  private async openaiChatCompletion(params: ChatCompletionParams): Promise<ChatCompletionResponse> {\n    if (!this.openai) {\n      throw new Error('OpenAI client not initialized');\n    }\n\n    const response = await this.openai.chat.completions.create({\n      model: 'gpt-4o-mini',\n      messages: params.messages.map(m => ({\n        role: m.role,\n        content: m.content\n      })),\n      temperature: params.temperature ?? 0.7,\n      max_tokens: params.maxTokens ?? 500\n    });\n\n    return {\n      content: response.choices[0].message.content || ''\n    };\n  }\n\n  private async geminiChatCompletion(params: ChatCompletionParams): Promise<ChatCompletionResponse> {\n    if (!this.gemini) {\n      throw new Error('Gemini client not initialized');\n    }\n\n    // Combine system and user messages for Gemini\n    // Gemini uses a single prompt with system instructions\n    const systemMessage = params.messages.find(m => m.role === 'system');\n    const userMessages = params.messages.filter(m => m.role === 'user');\n    \n    const userPrompt = userMessages.map(m => m.content).join('\\n\\n');\n    \n    const response = await this.gemini.models.generateContent({\n      model: 'gemini-2.0-flash-exp', // Using latest Gemini model\n      config: {\n        systemInstruction: systemMessage?.content,\n        temperature: params.temperature ?? 0.7,\n        maxOutputTokens: params.maxTokens ?? 500\n      },\n      contents: userPrompt\n    });\n\n    // Sanitize response: strip markdown code fences that LLMs often add\n    let content = response.text || '';\n    const originalContent = content;\n    content = this.sanitizeJsonResponse(content);\n    \n    // Log sanitization for debugging\n    if (originalContent !== content) {\n      console.log('🧹 Sanitized Gemini response');\n      console.log('  Original length:', originalContent.length);\n      console.log('  Sanitized length:', content.length);\n      console.log('  First 200 chars:', content.substring(0, 200));\n    }\n\n    return {\n      content\n    };\n  }\n\n  // Remove markdown code fences and other formatting from JSON responses\n  private sanitizeJsonResponse(text: string): string {\n    let sanitized = text.trim();\n    \n    // Step 1: Remove all markdown code fences\n    sanitized = sanitized.replace(/^```(?:json|javascript)?\\s*/gi, '');\n    sanitized = sanitized.replace(/```\\s*$/g, '');\n    sanitized = sanitized.replace(/```(?:json|javascript)?\\s*/gi, '');\n    sanitized = sanitized.replace(/```/g, '');\n    sanitized = sanitized.trim();\n    \n    // Step 2: Collect ALL top-level JSON entities\n    const entities: string[] = [];\n    let i = 0;\n    \n    while (i < sanitized.length) {\n      // Skip whitespace\n      while (i < sanitized.length && /\\s/.test(sanitized[i])) {\n        i++;\n      }\n      \n      if (i >= sanitized.length) break;\n      \n      // Check if we're at the start of a JSON entity\n      if (sanitized[i] !== '[' && sanitized[i] !== '{') {\n        // Not JSON, skip this character\n        i++;\n        continue;\n      }\n      \n      const startChar = sanitized[i];\n      let depth = 0;\n      let jsonEnd = -1;\n      let inString = false;\n      let escapeNext = false;\n      \n      // Find the matching closing bracket/brace\n      for (let j = i; j < sanitized.length; j++) {\n        const char = sanitized[j];\n        \n        if (escapeNext) {\n          escapeNext = false;\n          continue;\n        }\n        \n        if (char === '\\\\') {\n          escapeNext = true;\n          continue;\n        }\n        \n        if (char === '\"') {\n          inString = !inString;\n          continue;\n        }\n        \n        if (inString) continue;\n        \n        if (char === '[' || char === '{') {\n          depth++;\n        } else if (char === ']' || char === '}') {\n          depth--;\n          if (depth === 0) {\n            jsonEnd = j;\n            break;\n          }\n        }\n      }\n      \n      if (jsonEnd > i) {\n        // Extract this JSON entity\n        entities.push(sanitized.substring(i, jsonEnd + 1));\n        i = jsonEnd + 1;\n        \n        // Skip comma if present\n        while (i < sanitized.length && /[\\s,]/.test(sanitized[i])) {\n          i++;\n        }\n      } else {\n        // Couldn't find matching brace, skip\n        i++;\n      }\n    }\n    \n    // Step 3: Combine entities\n    if (entities.length === 0) {\n      return sanitized; // No valid JSON found\n    } else if (entities.length === 1) {\n      sanitized = entities[0];\n    } else {\n      // Multiple entities: wrap in array\n      sanitized = '[' + entities.join(', ') + ']';\n    }\n    \n    // Step 4: Remove trailing commas\n    sanitized = sanitized.replace(/,\\s*([}\\]])/g, '$1');\n    \n    return sanitized.trim();\n  }\n\n  getModelName(): string {\n    return this.model;\n  }\n}\n\n// Export singleton instance\nexport const llmClient = new LLMClient();\n","size_bytes":7241},"client/src/components/RightSidebar.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Card } from '@/components/ui/card';\nimport { BookOpen, Heart, Calendar, TrendingUp, Sparkles } from 'lucide-react';\nimport { format } from 'date-fns';\n\ninterface BibleVerse {\n  id: string;\n  book: string;\n  chapter: number;\n  verseStart: number;\n  translation: string;\n  content: string;\n}\n\ninterface Devotional {\n  id: string;\n  title: string;\n  content: string;\n  scriptureReference: string | null;\n}\n\ninterface FlourishingScore {\n  overallIndex: number;\n  spiritualScore: number;\n  emotionalScore: number;\n  relationalScore: number;\n}\n\ninterface PrayerJournal {\n  id: string;\n  content: string;\n  isAnswered: boolean;\n}\n\nexport default function RightSidebar() {\n  const { data: versesData } = useQuery<{ data: BibleVerse[] }>({\n    queryKey: ['/api/bible-verses']\n  });\n\n  const { data: devotionalsData } = useQuery<{ data: Devotional[] }>({\n    queryKey: ['/api/devotionals']\n  });\n\n  const { data: flourishingData } = useQuery<{ data: FlourishingScore }>({\n    queryKey: ['/api/flourishing']\n  });\n\n  const { data: prayersData } = useQuery<{ data: PrayerJournal[] }>({\n    queryKey: ['/api/prayers']\n  });\n\n  const latestVerse = versesData?.data?.[0];\n  const latestDevotional = devotionalsData?.data?.[0];\n  const flourishing = flourishingData?.data;\n  const activePrayers = prayersData?.data?.filter(p => !p.isAnswered).length || 0;\n\n  return (\n    <div className=\"h-full w-80 p-4 space-y-4 overflow-y-auto\">\n      {/* Daily Verse Widget */}\n      <Card className=\"p-4 bg-gradient-to-br from-amber-50 to-orange-50 dark:from-amber-950/30 dark:to-orange-950/30 border-amber-200 dark:border-amber-800\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <BookOpen className=\"h-5 w-5 text-amber-600 dark:text-amber-400\" />\n          <h3 className=\"font-semibold text-sm text-amber-900 dark:text-amber-100\">Verse of the Day</h3>\n        </div>\n        {latestVerse ? (\n          <div className=\"space-y-2\">\n            <p className=\"text-xs font-medium text-amber-800 dark:text-amber-300\">\n              {latestVerse.book} {latestVerse.chapter}:{latestVerse.verseStart}\n            </p>\n            <p className=\"text-sm text-amber-900 dark:text-amber-200 font-serif leading-relaxed line-clamp-4\">\n              \"{latestVerse.content}\"\n            </p>\n            <p className=\"text-xs text-amber-700 dark:text-amber-400 italic\">\n              — {latestVerse.translation}\n            </p>\n          </div>\n        ) : (\n          <p className=\"text-sm text-amber-600 dark:text-amber-400\">No verse saved yet</p>\n        )}\n      </Card>\n\n      {/* Quick Stats Widget */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <TrendingUp className=\"h-5 w-5 text-primary\" />\n          <h3 className=\"font-semibold text-sm\">Your Journey</h3>\n        </div>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-2 w-2 rounded-full bg-purple-500\"></div>\n              <span className=\"text-sm text-muted-foreground\">Flourishing Index</span>\n            </div>\n            <span className=\"text-sm font-semibold text-foreground\">\n              {flourishing?.overallIndex || 0}/100\n            </span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-2 w-2 rounded-full bg-pink-500\"></div>\n              <span className=\"text-sm text-muted-foreground\">Active Prayers</span>\n            </div>\n            <span className=\"text-sm font-semibold text-foreground\">{activePrayers}</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n              <span className=\"text-sm text-muted-foreground\">Saved Verses</span>\n            </div>\n            <span className=\"text-sm font-semibold text-foreground\">\n              {versesData?.data?.length || 0}\n            </span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Today's Devotional Preview */}\n      {latestDevotional && (\n        <Card className=\"p-4 bg-gradient-to-br from-violet-50 to-purple-50 dark:from-violet-950/30 dark:to-purple-950/30 border-violet-200 dark:border-violet-800\">\n          <div className=\"flex items-center gap-2 mb-3\">\n            <Sparkles className=\"h-5 w-5 text-violet-600 dark:text-violet-400\" />\n            <h3 className=\"font-semibold text-sm text-violet-900 dark:text-violet-100\">Today's Devotional</h3>\n          </div>\n          <div className=\"space-y-2\">\n            <p className=\"text-sm font-semibold text-violet-900 dark:text-violet-200 line-clamp-2\">\n              {latestDevotional.title}\n            </p>\n            <p className=\"text-xs text-violet-700 dark:text-violet-300 line-clamp-3\">\n              {latestDevotional.content}\n            </p>\n            {latestDevotional.scriptureReference && (\n              <p className=\"text-xs font-medium text-violet-600 dark:text-violet-400 italic\">\n                📖 {latestDevotional.scriptureReference}\n              </p>\n            )}\n          </div>\n        </Card>\n      )}\n\n      {/* Calendar Widget */}\n      <Card className=\"p-4\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <Calendar className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n          <h3 className=\"font-semibold text-sm\">Today</h3>\n        </div>\n        <div className=\"space-y-2\">\n          <p className=\"text-sm font-medium text-foreground\">\n            {format(new Date(), 'EEEE, MMMM d')}\n          </p>\n          <p className=\"text-xs text-muted-foreground\">\n            No events scheduled\n          </p>\n        </div>\n      </Card>\n\n      {/* Spiritual Growth Tip */}\n      <Card className=\"p-4 bg-gradient-to-br from-teal-50 to-cyan-50 dark:from-teal-950/30 dark:to-cyan-950/30 border-teal-200 dark:border-teal-800\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <Heart className=\"h-5 w-5 text-teal-600 dark:text-teal-400\" />\n          <h3 className=\"font-semibold text-sm text-teal-900 dark:text-teal-100\">Daily Reminder</h3>\n        </div>\n        <p className=\"text-sm text-teal-700 dark:text-teal-300 italic\">\n          \"Set aside 10 minutes today for quiet reflection and prayer.\"\n        </p>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6528},"client/src/components/FlourishingWidget.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { TrendingUp, GripVertical, Heart, Cross, Smile } from 'lucide-react';\nimport { useState, useRef, useEffect } from 'react';\n\ninterface FlourishingScore {\n  id: string;\n  userId: string;\n  overallIndex: number;\n  healthScore: number;\n  relationshipsScore: number;\n  financesScore: number;\n  meaningScore: number;\n  happinessScore: number;\n  characterScore: number;\n  faithScore: number;\n  aiInsight: string;\n  createdAt: string;\n}\n\n// Get color based on score range\nconst getScoreColor = (score: number): { gradient: string; text: string; label: string; ring: string } => {\n  if (score >= 80) {\n    return { \n      gradient: 'from-emerald-500 to-green-600', \n      text: 'text-emerald-600 dark:text-emerald-400',\n      ring: 'ring-emerald-500/20',\n      label: 'Thriving 🌟' \n    };\n  } else if (score >= 60) {\n    return { \n      gradient: 'from-blue-500 to-cyan-600', \n      text: 'text-blue-600 dark:text-blue-400',\n      ring: 'ring-blue-500/20',\n      label: 'Stable ✅' \n    };\n  } else if (score >= 40) {\n    return { \n      gradient: 'from-amber-500 to-orange-600', \n      text: 'text-amber-600 dark:text-amber-400',\n      ring: 'ring-amber-500/20',\n      label: 'Struggling ⚠️' \n    };\n  } else {\n    return { \n      gradient: 'from-red-500 to-rose-600', \n      text: 'text-red-600 dark:text-red-400',\n      ring: 'ring-red-500/20',\n      label: 'Crisis 🆘' \n    };\n  }\n};\n\nexport default function FlourishingWidget() {\n  const { data: scoreData } = useQuery<{ data: FlourishingScore | null }>({\n    queryKey: ['/api/flourishing']\n  });\n\n  // Dragging state\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isDragging, setIsDragging] = useState(false);\n  const dragStartRef = useRef({ x: 0, y: 0 });\n  const widgetRef = useRef<HTMLDivElement>(null);\n\n  const score = scoreData?.data;\n\n  if (!score) {\n    return null;\n  }\n\n  const overallColor = getScoreColor(score.overallIndex || 0);\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    // Only drag if clicking on the drag handle area (top section)\n    const target = e.target as HTMLElement;\n    if (target.closest('[data-drag-handle]')) {\n      setIsDragging(true);\n      dragStartRef.current = {\n        x: e.clientX - position.x,\n        y: e.clientY - position.y,\n      };\n    }\n  };\n\n  // Effect to handle global mouse events during dragging\n  useEffect(() => {\n    if (!isDragging) return;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      setPosition({\n        x: e.clientX - dragStartRef.current.x,\n        y: e.clientY - dragStartRef.current.y,\n      });\n    };\n\n    const handleMouseUp = () => {\n      setIsDragging(false);\n    };\n\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('mouseup', handleMouseUp);\n\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, position.x, position.y]);\n\n  return (\n    <div \n      ref={widgetRef}\n      className=\"bg-white/40 dark:bg-slate-900/40 backdrop-blur-sm border border-amber-200 dark:border-amber-800 rounded-lg shadow-lg\"\n      style={{\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        width: '200px',\n        userSelect: isDragging ? 'none' : 'auto',\n        cursor: isDragging ? 'grabbing' : 'auto'\n      }}\n      onMouseDown={handleMouseDown}\n      data-testid=\"draggable-widget\"\n    >\n      {/* Drag Handle Header */}\n      <div \n        className=\"flex items-center gap-2 px-3 py-2 border-b border-amber-200 dark:border-amber-800 cursor-grab active:cursor-grabbing\"\n        data-drag-handle=\"true\"\n      >\n        <GripVertical className=\"h-3 w-3 text-muted-foreground\" />\n        <div className={`p-1.5 rounded-full bg-gradient-to-br ${overallColor.gradient} ring-2 ${overallColor.ring}`}>\n          <TrendingUp className=\"h-3 w-3 text-white\" />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-baseline gap-1.5\">\n            <span className={`text-xl font-bold ${overallColor.text}`} data-testid=\"widget-overall-score\">\n              {score.overallIndex}\n            </span>\n            <span className=\"text-[10px] font-medium text-muted-foreground\">FI</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Compact Scores */}\n      <div className=\"p-2 space-y-1.5\">\n        {[\n          { key: 'healthScore', icon: Heart, color: 'text-red-500' },\n          { key: 'faithScore', icon: Cross, color: 'text-amber-600' },\n          { key: 'happinessScore', icon: Smile, color: 'text-yellow-500' },\n        ].map(({ key, icon: Icon, color }) => {\n          const scoreValue = score[key as keyof FlourishingScore] as number;\n          const scoreColor = getScoreColor(scoreValue);\n          return (\n            <div key={key} className=\"flex items-center gap-2\">\n              <Icon className={`h-3 w-3 ${color}`} />\n              <div className=\"flex-1 h-1 bg-muted rounded-full overflow-hidden\">\n                <div \n                  className={`h-full bg-gradient-to-r ${scoreColor.gradient}`}\n                  style={{ width: `${scoreValue}%` }}\n                />\n              </div>\n              <span className=\"text-[10px] font-medium text-foreground w-5 text-right\">{scoreValue}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","size_bytes":5423}},"version":2}